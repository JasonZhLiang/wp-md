<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

	
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>brainCloud API Docs</title>
	<link>https://staging.getbraincloud.com/apidocs</link>
	<description>brainCloud Mobile Backend-as-a-Service</description>
	<pubDate>Sun, 01 Jan 2023 17:30:20 +0000</pubDate>
	<language>en-CA</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>https://staging.getbraincloud.com/apidocs</wp:base_site_url>
	<wp:base_blog_url>https://staging.getbraincloud.com/apidocs</wp:base_blog_url>

		<wp:author><wp:author_id>4</wp:author_id><wp:author_login><![CDATA[paulw]]></wp:author_login><wp:author_email><![CDATA[paulw@bitheads.com]]></wp:author_email><wp:author_display_name><![CDATA[Paul Winterhalder]]></wp:author_display_name><wp:author_first_name><![CDATA[Paul]]></wp:author_first_name><wp:author_last_name><![CDATA[Winterhalder]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>8</wp:author_id><wp:author_login><![CDATA[roger.masse]]></wp:author_login><wp:author_email><![CDATA[roger.masse@bitheads.com]]></wp:author_email><wp:author_display_name><![CDATA[Roger Masse]]></wp:author_display_name><wp:author_first_name><![CDATA[Roger]]></wp:author_first_name><wp:author_last_name><![CDATA[Masse]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>26</wp:author_id><wp:author_login><![CDATA[jasonl]]></wp:author_login><wp:author_email><![CDATA[jasonl@bitheads.com]]></wp:author_email><wp:author_display_name><![CDATA[Jason Liang]]></wp:author_display_name><wp:author_first_name><![CDATA[Jason]]></wp:author_first_name><wp:author_last_name><![CDATA[Liang]]></wp:author_last_name></wp:author>

				
	

<image>
	<url>https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/05/cropped-favAPIDocs-32x32.png</url>
	<title>brainCloud API Docs</title>
	<link>https://staging.getbraincloud.com/apidocs</link>
	<width>32</width>
	<height>32</height>
</image> 

		<item>
		<title>iOS C++ Tutorial #1 - Getting Started</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=433</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://apidocs.braincloudservers.com/?page_id=433</guid>
		<description></description>
		<content:encoded><![CDATA[This guide is intended to get you up and running with the brainCloud API in an hour or less. This guide is geared towards using brainCloud with iOS C++ (e.g. cocos2d-x).

&nbsp;

Several assumptions we're making:
<ol>
	<li>You've downloaded the latest client libraries for iOS C++ from the brainCloud portal. If not, login to <a title="https://portal.braincloudservers.com/" href="https://portal.braincloudservers.com/" target="_blank">https://portal.braincloudservers.com/</a> and click the "Client Libraries" download link on the home page.</li>
	<li>You've created your game in the portal. If you need help in walking through those steps, please refer to our <a title="Unity Tutorial #1 – Getting Started" href="http://apidocs.braincloudservers.com/tutorials/unity-tutorial-1-getting-started/">Unity Tutorial #1 - Getting Started</a> video where we take you through the basic steps to creating a game.</li>
</ol>
&nbsp;

Otherwise let us begin! We will be covering a few topics in this tutorial:
<ul>
	<li>Adding the brainCloud client to your Xcode project</li>
	<li>Adding the brainCloudHelper class</li>
	<li>Including a JSON parsing library</li>
</ul>
<h3>Include SDK in Xcode Project</h3>
<ul>
	<li>Extract the SDK zip file "brainCloudClient_x.x.x.zip" to a reasonable location within your project folder</li>
</ul>
<ul>
	<li>Right click on the project and select Add Files To "Your Project Name"</li>
</ul>
<a href="http://apidocs.braincloudservers.com/wp-content/uploads/2014/11/Fullscreen_2014-11-20__12_44_PM.png"><img class="alignnone wp-image-438 size-full" src="http://apidocs.braincloudservers.com/wp-content/uploads/2014/11/Fullscreen_2014-11-20__12_44_PM.png" alt="Fullscreen_2014-11-20__12_44_PM" width="450" height="490" /></a>
<ul>
	<li>Select the extracted zip folder and ensure that <strong>Create groups</strong> is checked and <strong>Add to targets</strong> is checked for your appropriate target. Click Add</li>
</ul>
<a href="http://apidocs.braincloudservers.com/wp-content/uploads/2014/11/My_BrainCloud_Game_xcodeproj.png"><img class="alignnone size-full wp-image-439" src="http://apidocs.braincloudservers.com/wp-content/uploads/2014/11/My_BrainCloud_Game_xcodeproj.png" alt="My_BrainCloud_Game_xcodeproj" width="704" height="722" /></a>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>433</wp:post_id>
		<wp:post_date><![CDATA[2019-01-24 11:42:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>4800</wp:post_parent>
		<wp:menu_order>21</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="checked"><![CDATA[checked]]></category>
		<category domain="yst_prominent_words" nicename="click"><![CDATA[click]]></category>
		<category domain="yst_prominent_words" nicename="client"><![CDATA[client]]></category>
		<category domain="yst_prominent_words" nicename="client-libraries"><![CDATA[client libraries]]></category>
		<category domain="yst_prominent_words" nicename="folder"><![CDATA[folder]]></category>
		<category domain="yst_prominent_words" nicename="game"><![CDATA[game]]></category>
		<category domain="yst_prominent_words" nicename="guide"><![CDATA[guide]]></category>
		<category domain="yst_prominent_words" nicename="ios"><![CDATA[ios]]></category>
		<category domain="yst_prominent_words" nicename="ios-c"><![CDATA[ios c]]></category>
		<category domain="yst_prominent_words" nicename="libraries"><![CDATA[libraries]]></category>
		<category domain="yst_prominent_words" nicename="portal"><![CDATA[portal]]></category>
		<category domain="yst_prominent_words" nicename="project"><![CDATA[project]]></category>
		<category domain="yst_prominent_words" nicename="sdk"><![CDATA[sdk]]></category>
		<category domain="yst_prominent_words" nicename="select"><![CDATA[select]]></category>
		<category domain="yst_prominent_words" nicename="steps"><![CDATA[steps]]></category>
		<category domain="yst_prominent_words" nicename="tutorial"><![CDATA[tutorial]]></category>
		<category domain="yst_prominent_words" nicename="xcode"><![CDATA[xcode]]></category>
		<category domain="yst_prominent_words" nicename="xcode-project"><![CDATA[xcode project]]></category>
		<category domain="yst_prominent_words" nicename="zip"><![CDATA[zip]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Creating cloud code scripts</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=583</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://apidocs.braincloudservers.com/?page_id=583</guid>
		<description></description>
		<content:encoded><![CDATA[This is how you create cloud code scripts, yadda yadda yadda...

&nbsp;

<a href="http://apidocs.braincloudservers.com/wp-content/uploads/2014/12/Cloud_Scripts.png"><img class="alignnone size-large wp-image-584" src="http://apidocs.braincloudservers.com/wp-content/uploads/2014/12/Cloud_Scripts-1024x545.png" alt="Cloud_Scripts" width="474" height="252" /></a>

&nbsp;

Thalsdkjfa
<h2>New Section</h2>
aslkdjafsd

asldkfa

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>583</wp:post_id>
		<wp:post_date><![CDATA[2019-01-24 11:42:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>4800</wp:post_parent>
		<wp:menu_order>21</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Java Tutorials</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=903</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=903</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>903</wp:post_id>
		<wp:post_date><![CDATA[2019-01-24 11:42:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>4800</wp:post_parent>
		<wp:menu_order>21</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Script Service</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=1103</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[roger.masse]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1103</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1103</wp:post_id>
		<wp:post_date><![CDATA[2019-01-24 11:41:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>4800</wp:post_parent>
		<wp:menu_order>21</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Store Integration - Google</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=1491</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1491</guid>
		<description></description>
		<content:encoded><![CDATA[To integrate with the Google Play store you'll want to follow the steps below.
<h3>brainCloud Portal Setup</h3>
<ul>
	<li>Log into the brainCloud portal and navigate to "Design | Core App Info | Application IDs"
<a href="/apidocs/wp-content/uploads/2015/08/2015-08-07_14-05-15.png"><img class="alignnone size-full wp-image-1474" src="/apidocs/wp-content/uploads/2015/08/2015-08-07_14-05-15.png" alt="2015-08-07_14-05-15" width="231" height="387" /></a></li>
	<li>Click the Google icon
<a href="/apidocs/wp-content/uploads/2015/08/2015-08-07_14-34-38.png"><img class="alignnone size-full wp-image-1487" src="/apidocs/wp-content/uploads/2015/08/2015-08-07_14-34-38.png" alt="2015-08-07_14-34-38" width="314" height="75" /></a></li>
	<li></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1491</wp:post_id>
		<wp:post_date><![CDATA[2019-01-24 11:41:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>4800</wp:post_parent>
		<wp:menu_order>21</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-portal"><![CDATA[braincloud portal]]></category>
		<category domain="yst_prominent_words" nicename="google"><![CDATA[google]]></category>
		<category domain="yst_prominent_words" nicename="portal"><![CDATA[portal]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Leaderboard Configuration</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=1533</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1533</guid>
		<description></description>
		<content:encoded><![CDATA[brainCloud allows for the easy tracking of multiple social leaderboards. Leaderboards can be set to automatically reset daily, weekly, monthly, yearly, or not at all, and can be set to a number of different score-counting methods, including high value (regular high score), cumulative (added scores), last value (most recent score), and low value (high score but with golf rules; lower is better). Leaderboards can also be accessed easily through the API, allowing users to post and read scores to/from various leaderboards, and see past iterations of them.

Below is a quick guide on how to setup and access leaderboards for your brainCloud app.
<h3>Creating a Leaderboard</h3>
Navigate to the Leaderboards Tab in the brainCloud portal, and select the Leaderboard Config option.

<a href="/apidocs/wp-content/uploads/2015/08/1.png"><img class="alignnone size-medium wp-image-1576" src="/apidocs/wp-content/uploads/2015/08/1-300x255.png" alt="1" width="300" height="255" /></a>

You can create a leaderboard by pressing the + icon in the upper right hand corner of the table on this page.

<a href="/apidocs/wp-content/uploads/2015/08/2.png"><img class="alignnone size-medium wp-image-1577" src="/apidocs/wp-content/uploads/2015/08/2-300x242.png" alt="2" width="300" height="242" /></a>

Hitting this icon will bring up the "Add Leaderboard Configuration" dialog. In this dialog, give your leaderboard a name in the Leaderboard ID box. Keep in mind that this is the name that you will use to access this leaderboard in the API.

<a href="/apidocs/wp-content/uploads/2015/08/3.png"><img class="alignnone size-full wp-image-1578" src="/apidocs/wp-content/uploads/2015/08/3.png" alt="3" width="829" height="590" /></a>

Next, select a Leaderboard Type from the drop-down box. Your choices are:
<ul>
	<li>High Value: When a user posts a score to the leaderboard, it will only keep it if it's higher than their current recorded score (ie, a standard high score table). This is good for things like points, survival times, and player levels.</li>
	<li>Cumulative: When a user posts a score to the leaderboard, it will add the score to the current saved score. This is good for things like total kills, currency earned, and any stat that grows as time goes on.</li>
	<li>Last Value: When a user posts a score to the leaderboard, it will save and use that most current score, regardless of the previous value. This is good for things like accuracy, and averages calculated on the client side based on stats (kill/death ratio, etc).</li>
	<li>Low Value: When a user posts a score to the leaderboard, it will only keep it if it's lower than their current recorded score (ie, a standard high score table, but with golf rules; lower is better). This is good for things like fastest-times, deaths per level, and other stats where a lower value is better.</li>
</ul>
<a href="/apidocs/wp-content/uploads/2015/08/4.png"><img class="alignnone size-full wp-image-1579" src="/apidocs/wp-content/uploads/2015/08/4.png" alt="4" width="829" height="590" /></a>

You now have to the option of whether your leaderboard will reset itself or not. Resetting leaderboards can be used for tournaments, where the highest scores at the end of the reset period are saved and can be accessed by users. brainCloud will keep records of previous leaderboards, equal to the number of iterations that you select from the Retained Leaderboards drop-down.
<ul>
	<li>Never: This leaderboard will never automatically reset its scores, and users can always update their score.</li>
	<li>Daily/Weekly/Monthly/Yearly: This leaderboard will reset itself every 24 hours/7 days/30 days/365 days after the provided starting time. Users may post their scores up until the leaderboard has reset, in which case any scores posted will instead appear on the next version of the leaderboard. If the Reatined Leaderboards count is greater than 1, users can see the high scores for the given reset period. Scores do not carry over between reset periods; players will have to post a new score after the leaderboard has reset in order to be on it.</li>
</ul>
<a href="/apidocs/wp-content/uploads/2015/08/6.png"><img class="alignnone size-full wp-image-1581" src="/apidocs/wp-content/uploads/2015/08/6.png" alt="6" width="828" height="691" /></a>

Lastly, you can enable pacers for the particular leaderboard. Pacers are fake users with predetermined scores meant to fill up leaderboards to make them appear populated to users viewing them. If you have any pacers created (see Pacers section), you can enable them here.

<a href="/apidocs/wp-content/uploads/2015/08/7.png"><img class="alignnone size-full wp-image-1582" src="/apidocs/wp-content/uploads/2015/08/7.png" alt="7" width="828" height="691" /></a>

To enable the use of pacers, check the checkbox at the top left of the pacers box. This will allow you to select the pacers that you wish to be present on this leaderboard. If no pacers are shown, that means you have not created any (see Pacers section). After enabling a pacer, you can input its score, and add any extra data for the user. If setup correctly, users should see these pacers with their correct score values on their respective leaderboards.
<h3><a href="/apidocs/wp-content/uploads/2015/08/8.png"><img class="alignnone size-full wp-image-1583" src="/apidocs/wp-content/uploads/2015/08/8.png" alt="8" width="826" height="398" /></a></h3>
<h3>Posting Scores to a Leaderboard</h3>
brainCloud leaderboards track a player's score as a numeric value, but users may also put extra data into their leaderboard entry by specifying it in a JSON structure. You may put any number of key/value pairs in the extra data for a leaderboard entry. This is useful for storing extra information about each particular leaderboard entry (ie, the user's level, army size, days played, etc) that can be accessed by any user looking at the leaderboard. Extra data is unique for each user, meaning they are allowed to have different keys. Ideally though, you would likely have the same keys with different values for each user, as this would make searching through the data easier through code.

To post a score to a given leaderboard, have a look at the API documentation for leaderboards (The code is a little bit different for each platform, so find the one that covers the API that you're using) <a href="/apidocs/api-modules/leaderboards/braincloudsocialleaderboard/#bc-snippets-PostScoreToLeaderboard" target="_blank">HERE</a>.

If you want to test the leaderboard quickly, you can use the API explorer. Open the Cloud Code tab on the brainCloud Portal, and select the API explorer option.

<a href="/apidocs/wp-content/uploads/2015/08/9.png"><img class="alignnone size-full wp-image-1584" src="/apidocs/wp-content/uploads/2015/08/9.png" alt="9" width="442" height="254" /></a>

The default option for the Service box should be Authenticate. If it isn't, select Authenticate from the drop-down box. The operation should also read Authenticate. Press the green play button in the upper right corner of the API box. This will authenticate the default user, allowing you to perform other API commands.

<a href="/apidocs/wp-content/uploads/2015/08/10.png"><img class="alignnone size-full wp-image-1585" src="/apidocs/wp-content/uploads/2015/08/10.png" alt="10" width="773" height="273" /></a>

Go back to the Service drop-down box and select the Leaderboard service. Under Operation, select the PostScore operation. In the parameters box below, replace the name "default" beside the leaderboardId field with the name of the leaderboard you created. Replace the "10" beside the score field to whatever score you'd like to post. And finally, if you wish to put extra data in the leaderboard, fill in the data field with the information you'd like stores (deleting the whole "nickname" : "batman" line will cause the data to be empty). Hit the green play button again and you will have posted a score!

<a href="/apidocs/wp-content/uploads/2015/08/11.png"><img class="alignnone size-full wp-image-1586" src="/apidocs/wp-content/uploads/2015/08/11.png" alt="11" width="785" height="394" /></a>
<h3>Viewing a Leaderboard</h3>
brainCloud allows you to view a representation of your leaderboard right from the portal, and users can call an API command to retrieve the leaderboard information in a number of configurations.

To view the leaderboard entries for a particular leaderboard, select the Leaderboards tab in the brainCloud portal, and select the Leaderboard Config option. Find the leaderboard that you wish to look at, and hit the little eye icon on the right side of that leaderboard entry. This will bring you to the leaderboard monitoring page, showing any scores that have been posted to the leaderboard.

<a href="/apidocs/wp-content/uploads/2015/08/12.png"><img class="alignnone size-full wp-image-1587" src="/apidocs/wp-content/uploads/2015/08/12.png" alt="12" width="465" height="215" /></a>

You can remove a particular score, or view the user that posted the score, by hitting the Actions box on the right side beside each entry.

<a href="/apidocs/wp-content/uploads/2015/08/13.png"><img class="alignnone size-full wp-image-1588" src="/apidocs/wp-content/uploads/2015/08/13.png" alt="13" width="367" height="271" /></a>

To view the entries of a leaderboard from code, have a look at the API documentation for leaderboards (The code is a little bit different for each platform, so find the one that covers the API that you're using) <a href="/apidocs/api-modules/leaderboards/braincloudsocialleaderboard/" target="_blank">HERE</a>.

If you want to test the API functions for reading leaderboards, you can use the API explorer (see Posting Scores to a Leaderboard section).
<h3>Pacers</h3>
Pacers are fake users with predetermined scores meant to fill up leaderboards to make them appear populated to users viewing them. They can be enabled on leaderboards when the leaderboard is created, or by editing an existing leaderboard and enabling the Pacers option.

To create a pacer, navigate to the Leaderboards tab in the brainCloud portal, and select the Pacers option.

<a href="/apidocs/wp-content/uploads/2015/08/14.png"><img class="alignnone size-full wp-image-1589" src="/apidocs/wp-content/uploads/2015/08/14.png" alt="14" width="306" height="229" /></a>

From this window, you can click the + button in the top right corner of the Leaderboard Pacers box.

<a href="/apidocs/wp-content/uploads/2015/08/2.png"><img class="alignnone size-full wp-image-1577" src="/apidocs/wp-content/uploads/2015/08/2.png" alt="2" width="313" height="253" /></a>

Doing so should bring up the Add Pacer Player dialog. Enter a name for the pacer. This is the name that will be shown on the leaderboards that this pacer is enabled on. You may also upload a picture for the pacer if you wish. This picture will be added to the pacer's information in their leaderboard entry, to make the pacer seem like an actual user. When you're finished, hit the green save button.

<a href="/apidocs/wp-content/uploads/2015/08/15.png"><img class="alignnone size-full wp-image-1590" src="/apidocs/wp-content/uploads/2015/08/15.png" alt="15" width="655" height="314" /></a>

Your pacer is now available for use in any leaderboards for your app!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1533</wp:post_id>
		<wp:post_date><![CDATA[2019-02-13 10:09:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>4800</wp:post_parent>
		<wp:menu_order>7</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="braincloud-portal-and-select"><![CDATA[braincloud portal and select]]></category>
		<category domain="yst_prominent_words" nicename="documentation-for-leaderboards-the-code"><![CDATA[documentation for leaderboards the code]]></category>
		<category domain="yst_prominent_words" nicename="fake-users-with-predetermined-scores"><![CDATA[fake users with predetermined scores]]></category>
		<category domain="yst_prominent_words" nicename="ie-a-standard-high-score"><![CDATA[ie a standard high score]]></category>
		<category domain="yst_prominent_words" nicename="leaderboards"><![CDATA[leaderboards]]></category>
		<category domain="yst_prominent_words" nicename="leaderboards-tab-in-the-braincloud"><![CDATA[leaderboards tab in the braincloud]]></category>
		<category domain="yst_prominent_words" nicename="look-at-the-api-documentation"><![CDATA[look at the api documentation]]></category>
		<category domain="yst_prominent_words" nicename="navigate-to-the-leaderboards-tab"><![CDATA[navigate to the leaderboards tab]]></category>
		<category domain="yst_prominent_words" nicename="portal-and-select"><![CDATA[portal and select]]></category>
		<category domain="yst_prominent_words" nicename="portal-and-select-the-leaderboard"><![CDATA[portal and select the leaderboard]]></category>
		<category domain="yst_prominent_words" nicename="posting-scores-to-a-leaderboard"><![CDATA[posting scores to a leaderboard]]></category>
		<category domain="yst_prominent_words" nicename="posts-a-score"><![CDATA[posts a score]]></category>
		<category domain="yst_prominent_words" nicename="recorded-score-ie-a-standard"><![CDATA[recorded score ie a standard]]></category>
		<category domain="yst_prominent_words" nicename="score"><![CDATA[score]]></category>
		<category domain="yst_prominent_words" nicename="score-to-the-leaderboard"><![CDATA[score to the leaderboard]]></category>
		<category domain="yst_prominent_words" nicename="select-the-leaderboard-config"><![CDATA[select the leaderboard config]]></category>
		<category domain="yst_prominent_words" nicename="select-the-leaderboard-config-option"><![CDATA[select the leaderboard config option]]></category>
		<category domain="yst_prominent_words" nicename="tab-in-the-braincloud"><![CDATA[tab in the braincloud]]></category>
		<category domain="yst_prominent_words" nicename="tab-in-the-braincloud-portal"><![CDATA[tab in the braincloud portal]]></category>
		<category domain="yst_prominent_words" nicename="user-posts-a-score"><![CDATA[user posts a score]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Milestones &amp; Quests</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=1716</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1716</guid>
		<description></description>
		<content:encoded><![CDATA[The Milestones and Quests tab allows you to view the status of the selected User's milestones and quests.

<a href="/apidocs/wp-content/uploads/2015/08/milestonesButton.png"><img class="alignnone size-full wp-image-1700" src="/apidocs/wp-content/uploads/2015/08/milestonesButton.png" alt="milestonesButton" width="206" height="58" /></a>

The <strong>Clear and Recalculate </strong>button will reset all Milestone and Quest completion statuses and force a reevaluation of all Quests and Milestones.  If a User has already completed a Milestone or Quest and this button is pressed the User will be seen to complete it again, triggering all the rewards involved as well.

<a href="/apidocs/wp-content/uploads/2015/08/questsList.png"><img class="alignnone size-full wp-image-1701" style="max-width: 100%;" src="/apidocs/wp-content/uploads/2015/08/questsList.png" alt="questsList" /></a>

The Quests section lists all the Quests and the players status within them.  You can sort by Quest name and Status.  By clicking the arrow to the right of the Quest name the quest will expand to show the details of each individual milestone that makes up the Quest.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1716</wp:post_id>
		<wp:post_date><![CDATA[2019-01-24 11:40:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>4800</wp:post_parent>
		<wp:menu_order>21</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="button"><![CDATA[button]]></category>
		<category domain="yst_prominent_words" nicename="milestone"><![CDATA[milestone]]></category>
		<category domain="yst_prominent_words" nicename="milestones"><![CDATA[milestones]]></category>
		<category domain="yst_prominent_words" nicename="milestones-and-quests"><![CDATA[milestones and quests]]></category>
		<category domain="yst_prominent_words" nicename="name"><![CDATA[name]]></category>
		<category domain="yst_prominent_words" nicename="quest"><![CDATA[quest]]></category>
		<category domain="yst_prominent_words" nicename="quest-name"><![CDATA[quest name]]></category>
		<category domain="yst_prominent_words" nicename="quests"><![CDATA[quests]]></category>
		<category domain="yst_prominent_words" nicename="status"><![CDATA[status]]></category>
		<category domain="yst_prominent_words" nicename="user"><![CDATA[user]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>PricingDetails</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=1770</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1770</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1770</wp:post_id>
		<wp:post_date><![CDATA[2019-01-24 11:42:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>4800</wp:post_parent>
		<wp:menu_order>21</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Unreal Tutorials</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=1957</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1957</guid>
		<description></description>
		<content:encoded><![CDATA[The brainCloud Unreal plugin has been designed to integrate seamlessly with both native C++ and the new Blueprints visual scripting system.

As part of our Unreal package we include:
<ul>
	<li>Unreal Engine 4 C++ libraries</li>
	<li>Full support for the Blueprints Visual Scripting system</li>
	<li>Support for the Online Subsystem interface (in-development)</li>
</ul>
The following tutorials are available:
<ul>
	<li>Setting up the brainCloud plugin</li>
	<li>Getting Started With Blueprints</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1957</wp:post_id>
		<wp:post_date><![CDATA[2019-01-24 13:42:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>4800</wp:post_parent>
		<wp:menu_order>13</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="blueprints"><![CDATA[blueprints]]></category>
		<category domain="yst_prominent_words" nicename="blueprints-visual"><![CDATA[blueprints visual]]></category>
		<category domain="yst_prominent_words" nicename="blueprints-visual-scripting"><![CDATA[blueprints visual scripting]]></category>
		<category domain="yst_prominent_words" nicename="blueprints-visual-scripting-system"><![CDATA[blueprints visual scripting system]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="plugin"><![CDATA[plugin]]></category>
		<category domain="yst_prominent_words" nicename="scripting"><![CDATA[scripting]]></category>
		<category domain="yst_prominent_words" nicename="scripting-system"><![CDATA[scripting system]]></category>
		<category domain="yst_prominent_words" nicename="support"><![CDATA[support]]></category>
		<category domain="yst_prominent_words" nicename="system"><![CDATA[system]]></category>
		<category domain="yst_prominent_words" nicename="unreal"><![CDATA[unreal]]></category>
		<category domain="yst_prominent_words" nicename="visual"><![CDATA[visual]]></category>
		<category domain="yst_prominent_words" nicename="visual-scripting"><![CDATA[visual scripting]]></category>
		<category domain="yst_prominent_words" nicename="visual-scripting-system"><![CDATA[visual scripting system]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Extended Blueprint Tutorial</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=2114</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=2114</guid>
		<description></description>
		<content:encoded><![CDATA[In this tutorial we're going to expand on the basics we learned in the Getting Started With Blueprint tutorial by posting to and reading from a leaderboard on brainCloud.
<h3>Prerequisites</h3>
<ul>
	<li>Created a brainCloud Portal account</li>
	<li>Created a game in the brainCloud Portal. If you need help with this step refer to the <a href="/apidocs/tutorials/unity-tutorials/unity-tutorial-1-getting-started/" target="_blank">Unity Tutorial #1 video</a>.</li>
	<li>Created a Leaderboard in the Portal</li>
	<li>An Unreal project with the brainCloud plugin installed as described <strong>here(ADD LINK)</strong></li>
	<li>Basic experience with Blueprint, see the <a href="https://docs.unrealengine.com/latest/INT/Engine/Blueprints/GettingStarted/index.html" target="_blank">Unreal documentation</a> for help</li>
</ul>
<h3>Getting Started</h3>
To begin follow the steps outlined in the Getting Started With Blueprint tutorial up to and including <strong>Authentication</strong>. Once you're there we can continue!

&nbsp;
<h3>Posting to the Leaderboard</h3>
Once we've successfully Authenticated we need to update the player's name before we post to the Leaderboard.
<ul>
	<li>Create a <strong>Update Player Name</strong> node (BrainCloud | Player State)</li>
	<li>Attach it to the <strong>On Success </strong>pin of the AuthenticateUniversal</li>
	<li>Enter a name for your User</li>
	<li>Create a <strong>Post Score</strong> node (BrainCloud | Leaderboard)</li>
	<li>Attach it to the <strong>immediate</strong> execution pin of the Update Player Name node</li>
	<li>Enter a score to post</li>
</ul>
Now create a String variable in your Blueprint called <strong>LeaderboardID</strong> and set its default value to that of the leaderboard you configured in the brainCloud portal.  Attach it to the <strong>Leaderboard Id </strong>input of <strong>Post Score</strong>.

You should now have this created:

<a href="/apidocs/wp-content/uploads/2015/10/unreal_lb_post.png" target="_blank"><img class="alignnone wp-image-2124 size-full" src="/apidocs/wp-content/uploads/2015/10/unreal_lb_post.png" alt="unreal_lb_post" /></a>
<h3></h3>
<h3>Getting the Leaderboard</h3>
Now that we have at least our score on the leaderboard we can call <strong>Get Global Leaderboard View</strong> (BrainCloud | Leaderboard) to read the leaderboard from brainCloud.  We can refer to the <a href="/apidocs/api-modules/leaderboards/braincloudsocialleaderboard/#bc-snippets-GetGlobalLeaderboardView" target="_blank">documentation </a>or hover over the node title to see what the function parameters are.

<a href="/apidocs/wp-content/uploads/2015/11/unreal_lb_get.png" target="_blank"><img class="alignnone wp-image-2140 size-full" src="/apidocs/wp-content/uploads/2015/11/unreal_lb_get.png" alt="unreal_lb_get" /></a>

Once you have the function node hooked up to the <strong>On Success</strong> execution pin of Post Score and all the parameters filled out we can move on to parsing the JSON returned from the call.

&nbsp;
<h3>Parsing the JSON</h3>
Because there are a few steps between parsing and printing the data to the log we will create a new Blueprint <strong>function</strong> called <strong>Get Leaderboard Json </strong>to perform the JSON parsing.

Inside our function we need to perform some setup:
<ul>
	<li>Add a <strong>string</strong> input called <strong>Json Data</strong> to pass the returned JSON string in</li>
	<li>Add an <strong>Array of Json Objects </strong>(VaRest | Json) called <strong>Leaderboard</strong> as a function return</li>
	<li>Add a <strong>bool </strong>return called <strong>Success</strong> to report if the parsing was successful</li>
	<li>Create a local <strong>Json Object</strong> (VaRest | Json) variable called<strong> Json Obj</strong> to hold the data decoded from the Json Data string</li>
</ul>
Once we've finished preparing our function we can start to add the parsing functionality.
<ul>
	<li>First call the <strong>Construct Json Object</strong> function (VaRest | Json) and assign its return to your local <strong>Json Obj </strong>variable</li>
	<li>Next call the <strong>Decode Json</strong> function (VaRest | Json) using the <strong>Json Obj</strong> as the target and your passed in <strong>Json Data</strong> string as the Json String</li>
	<li>Create a <b>Branch</b> and use the Return Value bool from <strong>Decode Json</strong> as the Condition</li>
	<li>Attach the <strong>False </strong>execution pin directly to the <strong>Return</strong> node along with the Return Value bool from <strong>Decode Json </strong>as the Success return value</li>
</ul>
The time has come to dig into the JSON data stored in out <strong>Json Obj </strong>variable.  Looking at the JSON return in the documentation we want to retrieve the "leaderboard" field contained in the "data" object. We can also see that "leaderboard" is an array of JSON objects.  Using this information we can make the correct calls to get the leaderboard data.
<ul>
	<li>Attach a <strong>Get Object Array Field </strong>node to the <strong>True</strong> execution pin on the Branch with a field name of <strong>leaderboard</strong></li>
	<li>We know leaderboard is inside "data" so we can't just pass our Json Obj as the Target, we need to get the "data" object first.
<ul>
	<li> Create a <strong>Get Object Field</strong> (VaRest | Json) node with a <strong>Field Name</strong> of "data"</li>
	<li>Attach our local variable <strong>Json Obj </strong>to the <strong>Target</strong> input</li>
	<li>Attach the Return Value to the <strong>Get Object Array Field </strong>node's <strong>Target </strong>input</li>
</ul>
</li>
	<li>Finally we can connect the <strong>Get Object Array Field </strong>node's Return Value and Execution Pin to the Return Node, completing our function</li>
</ul>
Our completed function should look like this:

<a href="/apidocs/wp-content/uploads/2015/11/unreal_lb_jsonFunc.png" target="_blank"><img class="alignnone wp-image-2142 size-full" src="/apidocs/wp-content/uploads/2015/11/unreal_lb_jsonFunc.png" alt="unreal_lb_jsonFunc" /></a>

&nbsp;
<h3>Extracting the Leaderboard</h3>
Now that we have a function that will parse the return JSON string and return the Leaderboard as an array of Json Objects we can extract the data we want from it.  In this case we want only the <strong>player name</strong> and the <strong>score</strong>.  Lets start be creating two variables in our Level Blueprint, a string array called <strong>LeaderboardNames</strong> and a int array called <strong>LeaderboardScores</strong>.  We will use these to store the data extracted from our leaderboard JSON objects.

Once our variables are created we will need to make another function, this time called <strong>SaveLeaderboard, </strong>and perform some setup inside it.
<ul>
	<li>First add an array of <strong>Json Objects </strong> (VaRest | Json) called Leaderboard as an input parameter for the return of our Get Leaderboard Json function</li>
	<li>Now create a <strong>ForEachLoop</strong> node and attach our Leaderboard input parameter to the Array input of the loop</li>
</ul>
We know from the JSON return in the <a href="/apidocs/api-modules/leaderboards/braincloudsocialleaderboard/#bc-snippets-GetGlobalLeaderboardView" target="_blank">documentation</a> that the JSON objects contained in the leaderboard array have the "name" and "score" fields that we want.  So in our loop we want to get these fields from each JSON object in our passed in Leaderboard array and add them to our LeaderboardNames and LeaderboardScores arrays as strings and ints.

The next steps are best explained with an image of the function itself:

<a href="/apidocs/wp-content/uploads/2015/11/unreal_lb_saveFunc.png" target="_blank"><img class="alignnone wp-image-2144 size-full" src="/apidocs/wp-content/uploads/2015/11/unreal_lb_saveFunc.png" alt="unreal_lb_saveFunc" /></a>

&nbsp;
<h3>Printing the Result</h3>
Now that we have all the data we need stored in our two array variables we can do whatever we want with it, including printing it to the Output Log.  Back in our Level Blueprint we can create another function called <strong>Print Leaderboard</strong>.  This function will take no parameters and will simply combine the Name and Score for each array index and print them to the Log.

<a href="/apidocs/wp-content/uploads/2015/11/unreal_lb_printFunc.png" target="_blank"><img class="alignnone wp-image-2146 size-full" src="/apidocs/wp-content/uploads/2015/11/unreal_lb_printFunc.png" alt="unreal_lb_printFunc" /></a>

&nbsp;
<h3>Final Steps</h3>
The last thing we need to do is actually hook our functions up, continuing from the <strong>OnSuccess</strong> execution pin of our <strong>Get Global Leaderboard View</strong> call.

<a href="/apidocs/wp-content/uploads/2015/11/unreal_lb_final.png" target="_blank"><img class="alignnone wp-image-2151 size-full" src="/apidocs/wp-content/uploads/2015/11/unreal_lb_final.png" alt="unreal_lb_final" /></a>

&nbsp;
<h3>Final Blueprint</h3>
Here is a image of the final Level Blueprint for reference:

<a href="/apidocs/wp-content/uploads/2015/11/unreal_lb_full.png" target="_blank"><img class="alignnone wp-image-2149 size-full" src="/apidocs/wp-content/uploads/2015/11/unreal_lb_full.png" alt="unreal_lb_full" /></a>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2114</wp:post_id>
		<wp:post_date><![CDATA[2019-02-13 10:11:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>4800</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="array-of-json"><![CDATA[array of json]]></category>
		<category domain="yst_prominent_words" nicename="array-of-json-objects"><![CDATA[array of json objects]]></category>
		<category domain="yst_prominent_words" nicename="array-of-json-objects-varest"><![CDATA[array of json objects varest]]></category>
		<category domain="yst_prominent_words" nicename="bool-from-decode-json"><![CDATA[bool from decode json]]></category>
		<category domain="yst_prominent_words" nicename="execution-pin"><![CDATA[execution pin]]></category>
		<category domain="yst_prominent_words" nicename="getting-started-with-blueprint-tutorial"><![CDATA[getting started with blueprint tutorial]]></category>
		<category domain="yst_prominent_words" nicename="json-obj"><![CDATA[json obj]]></category>
		<category domain="yst_prominent_words" nicename="json-obj-as-the-target"><![CDATA[json obj as the target]]></category>
		<category domain="yst_prominent_words" nicename="json-objects"><![CDATA[json objects]]></category>
		<category domain="yst_prominent_words" nicename="json-return-in-the-documentation"><![CDATA[json return in the documentation]]></category>
		<category domain="yst_prominent_words" nicename="leaderboard"><![CDATA[leaderboard]]></category>
		<category domain="yst_prominent_words" nicename="object-array-field"><![CDATA[object array field]]></category>
		<category domain="yst_prominent_words" nicename="player-name-node"><![CDATA[player name node]]></category>
		<category domain="yst_prominent_words" nicename="return-value"><![CDATA[return value]]></category>
		<category domain="yst_prominent_words" nicename="return-value-bool-from-decode"><![CDATA[return value bool from decode]]></category>
		<category domain="yst_prominent_words" nicename="started-with-blueprint-tutorial"><![CDATA[started with blueprint tutorial]]></category>
		<category domain="yst_prominent_words" nicename="update-player-name"><![CDATA[update player name]]></category>
		<category domain="yst_prominent_words" nicename="update-player-name-node"><![CDATA[update player name node]]></category>
		<category domain="yst_prominent_words" nicename="value-bool-from-decode"><![CDATA[value bool from decode]]></category>
		<category domain="yst_prominent_words" nicename="value-bool-from-decode-json"><![CDATA[value bool from decode json]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Store Integration - Android</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=2360</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=2360</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2360</wp:post_id>
		<wp:post_date><![CDATA[2019-01-24 11:41:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>4800</wp:post_parent>
		<wp:menu_order>21</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Store Integration - Google</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=2362</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=2362</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2362</wp:post_id>
		<wp:post_date><![CDATA[2019-02-13 10:11:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>4800</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Unity Basic Setup</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=2392</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=2392</guid>
		<description></description>
		<content:encoded><![CDATA[In this guide, we'll show you how to link your brainCloud game with your Unity project.
<h2>Prerequisites</h2>
<ul>
	<li>You will need a brainCloud account and a brainCloud game. You can follow <a href="/apidocs/portal-usage/introduction-to-the-portal/">this guide</a> to get started.</li>
	<li>You will also need to download and install the "brainCloud BaaS" Unity Asset Store package.</li>
</ul>
<h2>Configuring Your Game</h2>
<h3>Enable Your Platforms</h3>
In order to communicate with brainCloud, you will first need to enable the platforms your game runs on.
<ul>
	<li>Log into the <a href="https://portal.braincloudservers.com/">brainCloud portal</a></li>
	<li>Click the Design tab and choose your game. Navigate to the Core App Info | Platforms page
<a href="/apidocs/wp-content/uploads/2015/12/2015-12-07_10-39-32.png"><img class="alignnone size-full wp-image-2394" src="/apidocs/wp-content/uploads/2015/12/2015-12-07_10-39-32.png" alt="2015-12-07_10-39-32" width="231" height="321" /></a></li>
	<li>At the bottom of the page, select the platforms that your game runs on. Note that you should also select the platform that you use with the Unity editor. For instance, if you're developing on Windows, ensure that Windows is one of the selected platforms.
<a href="/apidocs/wp-content/uploads/2015/12/2015-12-07_10-40-46.png"><img class="alignnone size-full wp-image-2395" src="/apidocs/wp-content/uploads/2015/12/2015-12-07_10-40-46.png" alt="2015-12-07_10-40-46" width="692" height="551" /></a></li>
</ul>
<h3>Configure Your Unity Game's brainCloud Settings</h3>
In order to configure your Unity game, you will need to grab the App Id and App Secret from the brainCloud portal.
<ul>
	<li>Log into the <a href="https://portal.braincloudservers.com/">brainCloud portal</a></li>
	<li>Click the Design tab and choose your game. Navigate to the Core App Info | Application IDs page
<a href="/apidocs/wp-content/uploads/2015/12/2015-12-07_10-36-42.png"><img class="alignnone size-full wp-image-2393" src="/apidocs/wp-content/uploads/2015/12/2015-12-07_10-36-42.png" alt="2015-12-07_10-36-42" width="233" height="278" /></a></li>
	<li>Grab the App Id and App Secret
<a href="/apidocs/wp-content/uploads/2015/12/2015-12-07_10-44-53.png"><img class="alignnone size-full wp-image-2396" src="/apidocs/wp-content/uploads/2015/12/2015-12-07_10-44-53.png" alt="2015-12-07_10-44-53" width="840" height="154" /></a></li>
	<li>Open the Unity project and select Window | brainCloud | Settings
<a href="/apidocs/wp-content/uploads/2015/12/2015-12-07_10-47-19.png"><img class="alignnone size-full wp-image-2397" src="/apidocs/wp-content/uploads/2015/12/2015-12-07_10-47-19.png" alt="2015-12-07_10-47-19" width="403" height="241" /></a></li>
	<li>Fill in the App Id and App Secret into the Unity project's Game Id and Game Secret fields
<img class="alignnone size-full wp-image-2398" src="/apidocs/wp-content/uploads/2015/12/2015-12-07_10-49-14.png" alt="2015-12-07_10-49-14" width="342" height="163" /></li>
	<li>It's also worth noting that you can enable brainCloud debug logging in the settings pane. There are also buttons which take you to the brainCloud Portal, API documentation and Tutorials webpages.
<a href="/apidocs/wp-content/uploads/2015/12/2015-12-07_10-51-45.png"><img class="alignnone size-full wp-image-2400" src="/apidocs/wp-content/uploads/2015/12/2015-12-07_10-51-45.png" alt="2015-12-07_10-51-45" width="329" height="178" /></a></li>
</ul>
<h2>Test Authentication</h2>
Finally to wrap it all up, there is a Scene provided within the brainCloud library that allows you to quickly test that you can Authenticate with the brainCloud servers.
<ul>
	<li>Load the "Default" scene in the Assets | BrainCloud | Unity | Scenes folder
<a href="/apidocs/wp-content/uploads/2015/12/2015-12-07_11-58-13.png"><img class="alignnone size-full wp-image-2402" src="/apidocs/wp-content/uploads/2015/12/2015-12-07_11-58-13.png" alt="2015-12-07_11-58-13" width="511" height="352" /></a></li>
	<li>Click Play and you should see a brainCloud Login dialog appear.
<a href="/apidocs/wp-content/uploads/2015/12/2015-12-07_12-00-32.png"><img class="alignnone size-full wp-image-2403" src="/apidocs/wp-content/uploads/2015/12/2015-12-07_12-00-32.png" alt="2015-12-07_12-00-32" width="510" height="410" /></a></li>
	<li>Enter a username and password. You can use any value you'd like as the system will automatically create your user if they do not already exist. On successful authentication you should see the brainCloud HUD pop up.
<a href="/apidocs/wp-content/uploads/2015/12/2015-12-07_12-03-061.png"><img class="alignnone size-full wp-image-2412" src="/apidocs/wp-content/uploads/2015/12/2015-12-07_12-03-061.png" alt="2015-12-07_12-03-06" width="360" height="469" /></a></li>
</ul>
You are now connected to brainCloud!
<h2>Looking At The Code</h2>
<h3>BrainCloudLogin and BrainCloudHUD Prefabs</h3>
Now that you've connected to brainCloud you might want to take a closer look at what's going on under the hood during Authentication.

Notice in the Default scene, there are two prefab objects: BrainCloudLogin and BrainCloudHUD.

<a href="/apidocs/wp-content/uploads/2015/12/2015-12-07_13-09-29.png"><img class="alignnone size-full wp-image-2407" src="/apidocs/wp-content/uploads/2015/12/2015-12-07_13-09-29.png" alt="2015-12-07_13-09-29" width="209" height="108" /></a>

<strong>BrainCloudLogin</strong> contains the BrainCloudLoginPF.cs script which provides the code to draw the Login dialog and authenticate with brainCloud.

<strong>BrainCloudHUD</strong> provides a few screens that show various properties of brainCloud once you're authenticated. You can view player information as well as reset/delete your player. This can be handy during debugging.
<h3>BrainCloudLoginPF.cs Script</h3>
Open up the BrainCloudLoginPF.cs script located at Assets | BrainCloud | Unity | Scripts

The BrainCloudLoginPF class uses the BrainCloudWrapper in order to simplify the Authentication with brainCloud and do a few Unity specific initialization steps. In particular, notice the following:
<ul>
	<li>In the Start() method, we initialize the brainCloud library with "BrainCloudWrapper.Initialize();"</li>
	<li>In the OnWindow() method, we authenticate with brainCloud using the "BrainCloudWrapper.GetInstance().AuthenticateUniversal(m_username, m_password, true, OnSuccess_Authenticate, OnError_Authenticate);" method</li>
	<li>OnSuccess_Authenticate method is called when the authenticate method is successful</li>
	<li>OnError_Authenticate method is called when the authenticate method returns an error</li>
</ul>
You can use the BrainCloudLoginPF.cs class as a template for your own login dialog.
<h3>BrainCloudWrapper</h3>
The BrainCloudWrapper class provides some glue between the Unity environment and the brainCloud C# library. Specifically the BrainCloudWrapper does the following:

1) Creates and uses a global singleton GameObject to manage it's lifetime across the game
2) Provides an Initialize method which uses the game id, secret, version, and server url defined in the brainCloud Settings Unity window.
3) Provides a few of the authentication types that are supported by brainCloud.
4) For Anonymous authentication, stores the anonymous id and profile id to the Unity player prefs upon successful authentication. This is important as once an anonymous account is created, both the anonymous id and profile id of the account are required to authenticate.

&nbsp;
<h2>Going Further</h2>
At this point you should have a game which can authenticate with brainCloud. The next step for what you want brainCloud to do is of course up to you. However it is helpful to understand the syntax of brainCloud API calls. Specifically, within your game scripts you will need to make calls like so:

The brainCloud API is available by calling

BrainCloudWrapper.GetBC()

to grab an instance of the BrainCloudClient. From here you have access to all of the brainCloud API services. For instance, to update the player's name API you would do the following:

BrainCloudWrapper.GetBC().PlayerStateService.UpdatePlayerName("new name")

Similar services exist for other APIs.
See the <a href="/apidocs/api-modules/">API services</a> for the full list of brainCloud APIs.

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2392</wp:post_id>
		<wp:post_date><![CDATA[2019-02-13 10:11:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>4800</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>brainCloud RTT</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=4420</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=4420</guid>
		<description></description>
		<content:encoded><![CDATA[brainCloud RTT is]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4420</wp:post_id>
		<wp:post_date><![CDATA[2019-01-24 11:42:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>4800</wp:post_parent>
		<wp:menu_order>21</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Test</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=4427</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=4427</guid>
		<description></description>
		<content:encoded><![CDATA[brainCloud is rapidly evolving to meet the needs of our development community. Software updates occur regularly at a pace of every two to three weeks. We work hard to ensure that new features and fixes are additive, and do not break existing apps in the field. Where API methods need to be changed / discontinued, we give minimum 90 calendar days notice.
<h3>Recent Updates</h3>
Details on the most recent updates:

[display-posts category="Release History" include_excerpt="true" include_date="true" posts_per_page="50"]
<h2></h2>
<!--?php the_excerpt(); ?-->
<!--?php endforeach; ?-->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4427</wp:post_id>
		<wp:post_date><![CDATA[2019-01-24 11:40:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>4800</wp:post_parent>
		<wp:menu_order>21</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="announce-the-availability"><![CDATA[announce the availability]]></category>
		<category domain="yst_prominent_words" nicename="announce-the-availability-of-braincloud"><![CDATA[announce the availability of braincloud]]></category>
		<category domain="yst_prominent_words" nicename="availability-of-braincloud"><![CDATA[availability of braincloud]]></category>
		<category domain="yst_prominent_words" nicename="features"><![CDATA[features]]></category>
		<category domain="yst_prominent_words" nicename="features-in-this-release"><![CDATA[features in this release]]></category>
		<category domain="yst_prominent_words" nicename="features-in-this-release-include"><![CDATA[features in this release include]]></category>
		<category domain="yst_prominent_words" nicename="fixes-and-improvements"><![CDATA[fixes and improvements]]></category>
		<category domain="yst_prominent_words" nicename="fixes-and-improvements-portal"><![CDATA[fixes and improvements portal]]></category>
		<category domain="yst_prominent_words" nicename="fixes-and-improvements-portal-features"><![CDATA[fixes and improvements portal features]]></category>
		<category domain="yst_prominent_words" nicename="improvements-portal-features"><![CDATA[improvements portal features]]></category>
		<category domain="yst_prominent_words" nicename="include-api-features"><![CDATA[include api features]]></category>
		<category domain="yst_prominent_words" nicename="misc-fixes-and-improvements"><![CDATA[misc fixes and improvements]]></category>
		<category domain="yst_prominent_words" nicename="misc-fixes-and-improvements-portal"><![CDATA[misc fixes and improvements portal]]></category>
		<category domain="yst_prominent_words" nicename="new-features-in-this-release"><![CDATA[new features in this release]]></category>
		<category domain="yst_prominent_words" nicename="pleased-to-announce"><![CDATA[pleased to announce]]></category>
		<category domain="yst_prominent_words" nicename="pleased-to-announce-the-availability"><![CDATA[pleased to announce the availability]]></category>
		<category domain="yst_prominent_words" nicename="portal-features"><![CDATA[portal features]]></category>
		<category domain="yst_prominent_words" nicename="release-include-api"><![CDATA[release include api]]></category>
		<category domain="yst_prominent_words" nicename="release-include-api-features"><![CDATA[release include api features]]></category>
		<category domain="yst_prominent_words" nicename="release-include-api-features-global"><![CDATA[release include api features global]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Syntax Help</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=4547</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=4547</guid>
		<description></description>
		<content:encoded><![CDATA[Cloud Code uses the Rhina JavaScript engine, and as such, is a bit non-standard when compared to regular JavaScript.

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4547</wp:post_id>
		<wp:post_date><![CDATA[2019-01-24 12:59:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>4800</wp:post_parent>
		<wp:menu_order>17</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="javascript"><![CDATA[javascript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Examples</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=4658</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=4658</guid>
		<description></description>
		<content:encoded><![CDATA[This is the new brainCloud Examples directory. It provides links to the runnable brainCloud examples:
<ul>
 	<li>bcChat - example chat service written in React.js</li>
 	<li>Bombers - brainCloud bombers example</li>
</ul>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4658</wp:post_id>
		<wp:post_date><![CDATA[2019-01-24 11:42:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>4800</wp:post_parent>
		<wp:menu_order>21</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="bombers"><![CDATA[bombers]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-examples"><![CDATA[braincloud examples]]></category>
		<category domain="yst_prominent_words" nicename="example"><![CDATA[example]]></category>
		<category domain="yst_prominent_words" nicename="examples"><![CDATA[examples]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>XP Levels</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5171</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5171</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5171</wp:post_id>
		<wp:post_date><![CDATA[2019-02-15 13:52:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5165</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Quests</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5174</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5174</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5174</wp:post_id>
		<wp:post_date><![CDATA[2019-02-15 13:52:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5165</wp:post_parent>
		<wp:menu_order>6</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Statistic Events</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5175</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5175</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5175</wp:post_id>
		<wp:post_date><![CDATA[2019-02-15 13:52:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5165</wp:post_parent>
		<wp:menu_order>7</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>User Statistics</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5379</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5379</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5379</wp:post_id>
		<wp:post_date><![CDATA[2019-02-19 13:44:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5357</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Scripts</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5589</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5589</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5589</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:01:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5469</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>API Hooks</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5590</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5590</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5590</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:01:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5469</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Web Services</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5591</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5591</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5591</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:01:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5469</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>S2S Explorer</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5592</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5592</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5592</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:01:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5469</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>S2S Config</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5593</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5593</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5593</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:01:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5469</wp:post_parent>
		<wp:menu_order>6</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>WebHooks</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5594</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5594</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5594</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:01:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5469</wp:post_parent>
		<wp:menu_order>7</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Peer Publish</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5599</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5599</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5599</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:03:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5467</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Admin Tools</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5600</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5600</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5600</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:03:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5467</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Localization</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5601</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5601</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5601</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:03:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5467</wp:post_parent>
		<wp:menu_order>6</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Email Authentication</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5602</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5602</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5602</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:04:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5468</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>External</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5603</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5603</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5603</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:04:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5468</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Shared Accounts</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5604</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5604</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5604</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:04:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5468</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Global Properties</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5605</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5605</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5605</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:04:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5470</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Files</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5606</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5606</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5606</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:04:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5470</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Group Types</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5607</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5607</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5607</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:05:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5497</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Manage Intergrations</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5608</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5608</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5608</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:05:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5474</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Peer Services</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5609</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5609</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5609</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:05:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5474</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Leaderboard Configs</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5610</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5610</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5610</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:06:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5475</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Tournament Templates</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5611</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5611</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5611</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:06:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5475</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>brainCloud In An Hour - iOS Edition</title>
		<link>https://staging.getbraincloud.com/apidocs/garbage-bin/braincloud-in-an-hour-ios-edition/</link>
		<pubDate>Tue, 09 Sep 2014 16:23:13 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://braincloudapidocs.local/?page_id=65</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="block-system-main" class="block block-system clearfix">
<div id="node-7" class="node node-page clearfix">
<div class="content">
<div class="field field-name-body field-type-text-with-summary field-label-hidden">
<div class="field-items">
<div class="field-item even">

This guide is intended to get you up and running with the brainCloud API in an hour or less. This guide is currently geared towards using brainCloud with Unity and/or iOS C++ but we will expand to other supported platforms soon. Either way, this is a good way to get your feet wet.

Follow links in the left hand navigation bar to continue.

</div>
</div>
</div>
</div>
</div>
</section>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>65</wp:post_id>
		<wp:post_date><![CDATA[2014-09-09 12:23:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-09 16:23:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[braincloud-in-an-hour-ios-edition]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>4800</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="guide"><![CDATA[guide]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Project Setup</title>
		<link>https://staging.getbraincloud.com/apidocs/garbage-bin/project-setup/</link>
		<pubDate>Tue, 09 Sep 2014 16:23:40 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://braincloudapidocs.local/?page_id=67</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="block-system-main" class="block block-system clearfix">
<div id="node-85" class="node node-section-header node-promoted clearfix">
<div class="content">
<div class="field field-name-body field-type-text-with-summary field-label-hidden">
<div class="field-items">
<div class="field-item even">
<h3>Download the latest brainCloud SDK</h3>
TODO INSERT LINK HERE

&nbsp;
<h3>Include SDK in Xcode Project</h3>
<ul>
	<li>Extract the SDK zip file "brainCloudClient_x.x.x.zip" to a reasonable location within your project folder</li>
	<li>Right click on the project and select Add Files To "Your Project Name"… (bunch of pictures)</li>
</ul>
<img src="http://api.braincloudservers.com/sites/default/files/AddFilesToProject.jpg" alt="" width="350" height="568" />

&nbsp;
<ul>
	<li>Select the extracted zip folder and ensure that <strong>Create groups for any added folders</strong> is checked and <strong>Add to targets</strong> is checked for your appropriate target</li>
</ul>
&nbsp;

<img src="http://api.braincloudservers.com/sites/default/files/AddFilesToProject2.jpg" alt="" width="680" height="639" />

&nbsp;

&nbsp;

This will create two folders:
<ul>
	<li>include — this contains all of the headers for the brainCloud SDK</li>
	<li>libs — this contains all of the libs files for the brainCloud SDK</li>
</ul>
&nbsp;
<h3>Add the brainCloud Helper class</h3>
Included on the FTP site is a "brainCloudHelper_x.x.x.zip" file which includes helper class files to get you started. We recommend using these interfaces to speak with brainCloud. Benefits are simplified error handling and an ability to pass in JSON objects directly.
<ul>
	<li>Extract the SDK zip file "brainCloudHelper_x.x.x.zip" to a reasonable location within your project folder</li>
	<li>Right click on the project and select Add Files To "Your Project Name"…</li>
	<li>Select the extracted zip folder and ensure that Create groups for any added folders is checked and Add to targets is checked for your appropriate target</li>
</ul>
Note that this class depends on the JSON library described below so make sure to add it to your project as well!

&nbsp;
<h3>Include a JSON parsing library</h3>
brainCloud uses the jsoncpp library, version 0.6.0-rc2. Follow the steps below to include this library:
<ul>
	<li>Download the library from here <a href="http://sourceforge.net/projects/jsoncpp/files/jsoncpp/0.6.0-rc2/">http://sourceforge.net/projects/jsoncpp/files/jsoncpp/0.6.0-rc2/</a></li>
	<li>Extract the JSON library to a reasonable location within your project folder</li>
	<li>Right click on the project and select Add Files To "Your Project Name"…</li>
	<li>Select the "src/lib_json" folder and ensure that Create groups for any added folders is checked and Add to targets is checked for your appropriate target</li>
	<li>Right click on the project and select Add Files To "Your Project Name"…</li>
	<li>Select the "include" folder and ensure that Create groups for any added folders is checked and Add to targets is checked for your appropriate target</li>
</ul>
</div>
</div>
</div>
</div>
</div>
</section>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>67</wp:post_id>
		<wp:post_date><![CDATA[2014-09-09 12:23:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-09 16:23:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[project-setup]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>4800</wp:post_parent>
		<wp:menu_order>21</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Authentication</title>
		<link>https://staging.getbraincloud.com/apidocs/garbage-bin/authentication/</link>
		<pubDate>Tue, 09 Sep 2014 16:38:15 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://braincloudapidocs.local/?page_id=76</guid>
		<description></description>
		<content:encoded><![CDATA[In order to authenticate with brainCloud, you will need the following pieces of information:
<ul>
	<li>brainCloud URL</li>
	<li>brainCloud Game Id</li>
	<li>brainCloud Game Secret Key</li>
	<li>Your Game Version: This is up to you but a good starting point is "1.0"</li>
	<li>App id (optional): AppStore id on iOS, AppWorld id on BB. You can use "" if you do not have an app id yet</li>
	<li>This information should be given to you by the brainCloud account manager.</li>
</ul>
&nbsp;

If you're a Facebook-connected game, you will also want to acquire the following data using the Facebook SDK:
<ul>
	<li>User's Facebook Id</li>
	<li>User's Facebook authentication token (ie after successful login)</li>
	<li>Please refer to the Facebook SDK documentation for information on how to obtain these parameters.</li>
</ul>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>76</wp:post_id>
		<wp:post_date><![CDATA[2014-09-09 12:38:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-09 16:38:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[authentication]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>4800</wp:post_parent>
		<wp:menu_order>21</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Division Sets</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5612</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5612</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5612</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:06:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5475</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Pacers</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5613</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5613</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5613</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:06:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5475</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Virtual Currencies</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5614</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5614</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5614</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:07:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5476</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Products</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5615</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5615</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5615</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:07:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5476</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Redemption Codes</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5616</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5616</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5616</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:07:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5476</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Lobbies</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5617</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5617</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5617</wp:post_id>
		<wp:post_date><![CDATA[2019-02-27 16:46:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5478</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Matchmaking</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5618</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5618</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5618</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:07:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5478</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Settings</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5619</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5619</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5619</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:07:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5479</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Template</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5620</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5620</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5620</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:07:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5479</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Scheduled</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5621</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5621</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5621</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:08:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5480</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Automated</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5622</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5622</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5622</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:08:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5480</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Segments</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5623</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5623</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5623</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:08:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5481</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Chat</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5624</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5624</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5624</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:09:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5477</wp:post_parent>
		<wp:menu_order>-1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Chat Channels</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5625</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5625</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5625</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:09:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5477</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Messaging</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=5626</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5626</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5626</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:09:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>5477</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>brainCloud Service Level Aggrement (SLA)</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=6359</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=6359</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><em>Last Updated January 19th, 2019</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong><em>*This brainCloud Uptime Service Level Agreement is only applicable to brainCloud "Business Plan" and above customers*</em></strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>brainCloud Uptime SLA.</strong>&nbsp;brainCloud shall use all reasonable commercial efforts, being no less than accepted industrial standards in this regard, to ensure that the brainCloud Service is available to you 99.9% of the time in any calendar month. If it is not, you may be eligible to receive the Service Credits described below (the "<strong>brainCloud Uptime SLA</strong>").</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Definitions.</strong>&nbsp;The following definitions shall apply to the brainCloud Uptime SLA.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>"Downtime"</strong>&nbsp;means, for a server, if there is more than a five percent user error rate. User error is calculated using server monitoring software (e.g. Hyperspin or comparable service), based on results from ping tests, web server tests, TCP port tests, and website tests. Downtime is measured based on server side error rate.</li><li><strong>"Downtime Period"</strong>&nbsp;means, for a server, if a period of ten consecutive minutes of Downtime occurs. Intermittent Downtime for a period of less than ten minutes will not be counted towards any Downtime Periods.</li><li><strong>"Monthly Uptime Percentage"</strong>&nbsp;means the total number of minutes in the calendar month minus the number of minutes of Downtime suffered from all Downtime Periods in the calendar month, divided by the total number of minutes in the calendar month.</li><li><strong>"Scheduled Downtime"</strong>&nbsp;means those times where brainCloud notifies you of periods of Downtime five (5) days prior to the commencement of such Downtime. There will be no more than twelve (12) hours of Scheduled Downtime per calendar year. Scheduled Downtime is not considered Downtime for purposes of this brainCloud Uptime SLA, and will not be counted towards any Downtime Periods.</li><li><strong>"Services"</strong>&nbsp;means the services provided to you by the brainCloud Service including cloud-based hosting and other services in accordance with brainCloud's&nbsp;<a href="http://getbraincloud.com/terms-of-service/">Terms of Service</a>&nbsp;or alternatively, on terms as expressly agreed between you and brainCloud.</li><li><strong>"Service Credit"</strong>&nbsp;may be provided according to the following schedule:&nbsp;<ul><li><strong>One week Credit:</strong>&nbsp;Includes&nbsp;<strong>Seven (7)</strong>&nbsp;days of Services added to the end of your billing cycle, at no charge to you, if the Monthly Uptime Percentage for any calendar month is between 99.9% and 97.0%;</li></ul><ul><li><strong>Two week Credit:</strong>&nbsp;Includes&nbsp;<strong>Fourteen (14)</strong>&nbsp;days of Services added to the end of your billing cycle, at no charge to you, if the Monthly Uptime Percentage for any calendar month is between 97.0% and 95.0%;</li></ul><ul><li><strong>One month Credit:</strong>&nbsp;Includes&nbsp;<strong>Thirty (30)</strong>&nbsp;days of Services added to the end of your billing cycle, at no charge to you, if the Monthly Uptime Percentage for any calendar month is less than 95.0%.</li></ul></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong>Right to terminate:</strong>&nbsp;In the event the Monthly Uptime Percentage for any calendar month is less than 90.0%, you will have a right to terminate brainCloud Service plan with seven (7) days written notice to brainCloud, or alternatively you can opt to procure the One month Credit outlined above.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Customer Must Request Service Credit.</strong>&nbsp;In order to receive any of the Service Credits described above, you must notify brainCloud by email or otherwise in writing within thirty (30) days from the time you become eligible to receive a Service Credit.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Maximum Service Credit.</strong>&nbsp;The aggregate maximum number of Service Credits you can claim for any and all Downtime Periods that occur in a single calendar month shall not exceed thirty days of Services added to the end of your billing cycle. Service Credits may not be exchanged for, or converted to, monetary compensation.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Uptime SLA Exclusions.</strong>&nbsp;The Uptime SLA does not apply to any performance issues: (i) caused by factors outside of brainCloud's reasonable control; (ii) that resulted from any actions or inactions of you or any third parties; or (iii) that resulted from your equipment and/or third party equipment (not within the primary control of brainCloud). This brainCloud SLA states your sole and exclusive remedy for any failure by brainCloud to provide the Services as a result of Downtime.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Continuation of Service.</strong>&nbsp;brainCloud reserves the right to cease providing brainCloud Services and withdraw the brainCloud service to all users with twelve (12) months written notice.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6359</wp:post_id>
		<wp:post_date><![CDATA[2019-06-21 13:44:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="billing-cycle"><![CDATA[billing cycle]]></category>
		<category domain="yst_prominent_words" nicename="billing-cycle-at-no-charge"><![CDATA[billing cycle at no charge]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-service"><![CDATA[braincloud service]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-uptime"><![CDATA[braincloud uptime]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-uptime-sla"><![CDATA[braincloud uptime sla]]></category>
		<category domain="yst_prominent_words" nicename="cycle-at-no-charge"><![CDATA[cycle at no charge]]></category>
		<category domain="yst_prominent_words" nicename="downtime"><![CDATA[downtime]]></category>
		<category domain="yst_prominent_words" nicename="downtime-periods"><![CDATA[downtime periods]]></category>
		<category domain="yst_prominent_words" nicename="end-of-your-billing"><![CDATA[end of your billing]]></category>
		<category domain="yst_prominent_words" nicename="end-of-your-billing-cycle"><![CDATA[end of your billing cycle]]></category>
		<category domain="yst_prominent_words" nicename="monthly-uptime"><![CDATA[monthly uptime]]></category>
		<category domain="yst_prominent_words" nicename="monthly-uptime-percentage"><![CDATA[monthly uptime percentage]]></category>
		<category domain="yst_prominent_words" nicename="scheduled-downtime"><![CDATA[scheduled downtime]]></category>
		<category domain="yst_prominent_words" nicename="service"><![CDATA[service]]></category>
		<category domain="yst_prominent_words" nicename="service-credit"><![CDATA[service credit]]></category>
		<category domain="yst_prominent_words" nicename="service-credits"><![CDATA[service credits]]></category>
		<category domain="yst_prominent_words" nicename="service-credits-described"><![CDATA[service credits described]]></category>
		<category domain="yst_prominent_words" nicename="uptime-percentage"><![CDATA[uptime percentage]]></category>
		<category domain="yst_prominent_words" nicename="uptime-sla"><![CDATA[uptime sla]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Client Libraries (new)</title>
		<link>https://staging.getbraincloud.com/apidocs/?page_id=6838</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=6838</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>The following brainCloud libraries are available:</p>
<!-- /wp:paragraph -->

<!-- wp:table {"className":"is-style-regular"} -->
<figure class="wp-block-table is-style-regular"><table class=""><thead><tr><th class="has-text-align-left" data-align="left"><strong>Language</strong></th><th class="has-text-align-center" data-align="center"><strong>Client</strong></th><th class="has-text-align-center" data-align="center"><strong>Relay</strong></th><th class="has-text-align-center" data-align="center"><strong>S2S</strong></th><th><strong>Links</strong></th></tr></thead><tbody><tr><td class="has-text-align-left" data-align="left"><strong>ActionScript</strong><br>No RTT Support. <em>No longer actively maintained.</em></td><td class="has-text-align-center" data-align="center">4.4 *</td><td class="has-text-align-center" data-align="center">✘</td><td class="has-text-align-center" data-align="center">✘</td><td>Client t Libs</td></tr><tr><td class="has-text-align-left" data-align="left"><strong>C++</strong><br>C++ for Android, Apple, Windows and Linux. UWP and Nuget support.<br>PS4 libraries also available upon request.</td><td class="has-text-align-center" data-align="center">4.4</td><td class="has-text-align-center" data-align="center">&#x2705;</td><td class="has-text-align-center" data-align="center">&#x2705;</td><td>Client Libs<br></td></tr><tr><td class="has-text-align-left" data-align="left"><strong>Java</strong><br>Java libraries for desktop and Android.</td><td class="has-text-align-center" data-align="center">4.4</td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td></td></tr><tr><td class="has-text-align-left" data-align="left"><strong>JavaScript</strong><br>JavaScript for web and node.js.</td><td class="has-text-align-center" data-align="center">4.4</td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td></td></tr><tr><td class="has-text-align-left" data-align="left"><strong>ObjectiveC</strong> / <strong>Swift</strong><br>Objective-C and Swift support for AppleTV, iOS and MacOS. CocoaPods support.</td><td class="has-text-align-center" data-align="center">4.4</td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td></td></tr><tr><td class="has-text-align-left" data-align="left"><strong>Unity / C#</strong><br>Unity C# Library. Includes C# Windows support as well.</td><td class="has-text-align-center" data-align="center">4.4</td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td></td></tr><tr><td class="has-text-align-left" data-align="left"><strong>Unreal</strong><br>C++, Blueprint and OnlineSubSystem library for Unreal 4.</td><td class="has-text-align-center" data-align="center">4.4</td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td></td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>trying another table...</p>
<!-- /wp:paragraph -->

<!-- wp:table /-->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6838</wp:post_id>
		<wp:post_date><![CDATA[2020-04-13 12:37:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="4-4"><![CDATA[4.4]]></category>
		<category domain="yst_prominent_words" nicename="android"><![CDATA[android]]></category>
		<category domain="yst_prominent_words" nicename="c"><![CDATA[c#]]></category>
		<category domain="yst_prominent_words" nicename="client"><![CDATA[client]]></category>
		<category domain="yst_prominent_words" nicename="java"><![CDATA[java]]></category>
		<category domain="yst_prominent_words" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="yst_prominent_words" nicename="libraries"><![CDATA[libraries]]></category>
		<category domain="yst_prominent_words" nicename="library"><![CDATA[library]]></category>
		<category domain="yst_prominent_words" nicename="libs"><![CDATA[libs]]></category>
		<category domain="yst_prominent_words" nicename="support"><![CDATA[support]]></category>
		<category domain="yst_prominent_words" nicename="swift"><![CDATA[swift]]></category>
		<category domain="yst_prominent_words" nicename="unity"><![CDATA[unity]]></category>
		<category domain="yst_prominent_words" nicename="unreal"><![CDATA[unreal]]></category>
		<category domain="yst_prominent_words" nicename="windows"><![CDATA[windows]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>brainCloud In An Hour - Unity Edition</title>
		<link>https://staging.getbraincloud.com/apidocs/garbage-bin/braincloud-in-an-hour-unity-edition/</link>
		<pubDate>Tue, 09 Sep 2014 16:38:54 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://braincloudapidocs.local/?page_id=78</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>78</wp:post_id>
		<wp:post_date><![CDATA[2014-09-09 12:38:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-09 16:38:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[braincloud-in-an-hour-unity-edition]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>4800</wp:post_parent>
		<wp:menu_order>10</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Project Setup</title>
		<link>https://staging.getbraincloud.com/apidocs/garbage-bin/project-setup-2/</link>
		<pubDate>Tue, 09 Sep 2014 16:39:46 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://braincloudapidocs.local/?page_id=80</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="block-system-main" class="block block-system clearfix">
<div id="node-86" class="node node-section-header node-promoted clearfix">
<div class="content">
<div class="field field-name-body field-type-text-with-summary field-label-hidden">
<div class="field-items">
<div class="field-item even">

We will go through creating a basic Unity project. For developers who have an existing Unity project, many of these steps can be skipped.
<ul>
	<li>Open Unity Editor</li>
	<li>Create project
<ul>
	<li>File | New Project</li>
</ul>
</li>
	<li>In the Project View
<ul>
	<li>Create a folder called "External"</li>
	<li>Create a folder called "Scenes"</li>
	<li>Create a folder called "Scripts"</li>
	<li>Extract BrainCloudClient.DLL and LitJson.DLL from the brainCloud SDK into the External folder</li>
	<li>Extract BrainCloudWrapper.cs from the brainCloud SDK into the Scripts folder</li>
</ul>
</li>
</ul>
&nbsp;

Your Unity Project View should now look like the following:

<a href="http://apidocs.braincloudservers.com/wp-content/uploads/2014/09/3_13_2014__11_44_AM_0.png"><img class="alignnone size-full wp-image-353" src="http://apidocs.braincloudservers.com/wp-content/uploads/2014/09/3_13_2014__11_44_AM_0.png" alt="3_13_2014__11_44_AM_0" width="614" height="565" /></a>

</div>
</div>
</div>
</div>
</div>
</section>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>80</wp:post_id>
		<wp:post_date><![CDATA[2014-09-09 12:39:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-09 16:39:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[project-setup-2]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>4800</wp:post_parent>
		<wp:menu_order>21</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-sdk"><![CDATA[braincloud sdk]]></category>
		<category domain="yst_prominent_words" nicename="create"><![CDATA[create]]></category>
		<category domain="yst_prominent_words" nicename="create-a-folder"><![CDATA[create a folder]]></category>
		<category domain="yst_prominent_words" nicename="dll"><![CDATA[dll]]></category>
		<category domain="yst_prominent_words" nicename="external"><![CDATA[external]]></category>
		<category domain="yst_prominent_words" nicename="extract"><![CDATA[extract]]></category>
		<category domain="yst_prominent_words" nicename="folder"><![CDATA[folder]]></category>
		<category domain="yst_prominent_words" nicename="project"><![CDATA[project]]></category>
		<category domain="yst_prominent_words" nicename="project-view"><![CDATA[project view]]></category>
		<category domain="yst_prominent_words" nicename="scripts"><![CDATA[scripts]]></category>
		<category domain="yst_prominent_words" nicename="sdk"><![CDATA[sdk]]></category>
		<category domain="yst_prominent_words" nicename="unity"><![CDATA[unity]]></category>
		<category domain="yst_prominent_words" nicename="unity-project"><![CDATA[unity project]]></category>
		<category domain="yst_prominent_words" nicename="view"><![CDATA[view]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Authentication</title>
		<link>https://staging.getbraincloud.com/apidocs/garbage-bin/authentication-2/</link>
		<pubDate>Tue, 09 Sep 2014 16:40:50 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://braincloudapidocs.local/?page_id=82</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="field field-name-body field-type-text-with-summary field-label-hidden">
<div class="field-items">
<div class="field-item even">
<ul>
	<li>In the Project View, create a Connect Scene in the Scenes folder. This scene is where we will initialize BrainCloud and connect to the server.
<ul>
	<li>File | New Scene</li>
	<li>File | Save Scene As…</li>
</ul>
</li>
</ul>
<a href="http://apidocs.braincloudservers.com/wp-content/uploads/2014/09/unity_auth1.png"><img class="alignnone size-full wp-image-357" src="http://apidocs.braincloudservers.com/wp-content/uploads/2014/09/unity_auth1.png" alt="unity_auth1" width="669" height="660" /></a>

&nbsp;

</div>
</div>
</div>
<div class="view view-method-list-2 view-id-method_list_2 view-display-id-entity_view_1 view-dom-id-8a7e788ac6b5580d111c635ebd1f9d2f">
<div class="view-header">

<strong> </strong>

</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>82</wp:post_id>
		<wp:post_date><![CDATA[2014-09-09 12:40:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-09 16:40:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[authentication-2]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>4800</wp:post_parent>
		<wp:menu_order>21</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Cloud Code Exception Handling (Deprecated)</title>
		<link>https://staging.getbraincloud.com/apidocs/garbage-bin/cloud-code-exception-handling/</link>
		<pubDate>Wed, 06 May 2015 16:59:41 +0000</pubDate>
		<dc:creator><![CDATA[roger.masse]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1023</guid>
		<description></description>
		<content:encoded><![CDATA[Note: This mechanism has been deprecated. Cloud code method return values now are formatted to better mirror&nbsp;the other client APIs. They will now return status codes, reason codes, etc in the method return object as well as any data.

This mechanism will continue to be supported for legacy scripts. Legacy behaviour is controlled by a flag in the "Core App Info - Advanced Settings" portal page. It's labeled "Use Legacy Script Result Format".

Braincloud provides a mechanism for querying data regarding exceptions that occur within the service proxies. The methods are:
<ul>
 	<li>isProcessingException - this tells you whether it's a braincloud processing exception or a vanilla java exception</li>
 	<li>getExceptionData - this returns and object describing some details about the exception</li>
</ul>
Both methods take the "err" object passed in the catch clause as a parameter.

The exception data object has the following properties
<ul>
 	<li>class - a simple class name of the exception</li>
 	<li>errorCode - processing exception status code</li>
 	<li>reasonCode - processing exception reason code</li>
 	<li>message - exception message</li>
</ul>
The "class" and "message" properties apply to all exceptions. The "errorCode" and "reasonCode" properties are only for processing exceptions. Processing exceptions are essentially the same as what is returned to a regular client (like Unity) as errors.

Here's a simple example of the use of this feature:

[codesyntax lang="javascript"]
<pre>try {
	do something....
}
catch (err) {
	if (bridge.isProcessingException(err))
	{
		exceptionData = bridge.getExceptionData(err);
		if (exceptionData.reasonCode == 40344)
		{
			do something...
		}
	}
}</pre>
[/codesyntax]

Here is a more complicated example that demonstrates a potential use of the exception handling. The following methods implement a simple clan membership feature that could be implemented in cloud code. The methods allow you to create a clan, join it and leave it.

CreateClan:

[codesyntax lang="javascript"]
<pre>function createClan(clanName, clanCrest) {
   
// Create empty result object
    var result = {};

// retrieve the global entity service proxy
    entityService = bridge.getGlobalEntityServiceProxy();

// Create a query data object
    var readQuery = {};
    readQuery['data.name'] = clanName;

// Execute query
    entityList = entityService.getList(readQuery, null, 1);
    
// If anything found, already exists
    if (entityList['entityListCount'] &gt; 0)
    {
        result['success'] = false;
        result['message'] = "Clan already exists";
        return result;
    }

// Create data and acl objects
    var newEntityData = {};
    var newEntityAcl = {};

// Set data properties
    newEntityData['name'] = clanName;
    newEntityData['crest'] = clanCrest;

// 2 means all access
    newEntityAcl['other'] = 2;

// Create the clan
    var newEntity = entityService.createEntity("Clan", 0, newEntityAcl, newEntityData);
    result['newClan'] = newEntity;
    result['success'] = true;

// return the newly created object and success/fail set
    return result;
}

// Retrieve script parameters
var name = data['name'];
var crest = data['crest'];

// Call create function
createClan(name, crest);

</pre>
[/codesyntax]

JoinClan:

[codesyntax lang="javascript"]
<pre>function joinClan(clanName) {

// Create empty result object
    var result = {};

// Retrieve the player state service proxy
    playerStateService = bridge.getPlayerStateServiceProxy();
    
// Read the player state to get the profile id
    playerState = playerStateService.readPlayerState();
    profileId = playerState.profileId;

// retrieve the global entoty service proxy
    entityService = bridge.getGlobalEntityServiceProxy();

// Limit the number of retries
    var retryCount = 0;
    
    for (retryCount = 0; retryCount &lt; 10; retryCount++)
    {
        try
        {
            // Create a query data object
            var readQuery = {};
            readQuery['data.name'] = clanName;
        
            // Execute the query
            entityListResult = entityService.getList(readQuery, null, 1);
            
            // Missing clan error
            if (entityListResult.entityListCount == 0)
            {
                result['success'] = false;
                result['message'] = "Clan does not exist";
                return result;
            }

            // grab the first entry (there should only be one)
            var entityList = entityListResult.entityList;
            var entity = entityList[0];
            
            // Initialize member map if empty
            if (entity.data.members === undefined)
            {
                entity.data.members = {};
            }
            
            // Add him to the member list
            entity.data.members[profileId] = true;
            
            // Grab the version from the entity read to pass into the update call
            // This is the concurrent access support mechanism
            version = entity['version'];

            // Update the entry getting the updated entry as a result
            var updateEntity = {};
            updatedEntity = entityService.updateEntity(entity.entityId, version, entity.data);
            result['success'] = true;
            result['updatedEntity'] = updatedEntity;
        
            // return the updated entry and the success/fail set
            return result;
        }
        catch (err)
        {
            // Exception handling
            // If its a processing error and the code is 40344 that means a version mismatch
            // Somebody else has updated the record
            // Therefore loop back to read to retrieve the new version and try again
            if (bridge.isProcessingException(err))
            {
                var exceptionData = bridge.getExceptionData(err);
                if (exceptionData.reasonCode == 40344)
                {
                    continue;
                }
            }

            // Else just rethrow the exception
            throw err;
        }
    }
    
    // If you get here the retry count has been exhausted
    result['success'] = false;
    result['message'] = "Update retry count exhausted";
    return result;
}

// Retrieve the clan name from the input parameters
var name = data.clanName;

// Call join function
joinClan(name);
</pre>
[/codesyntax]

LeaveClan:

[codesyntax lang="javascript"]
<pre>function leaveClan(clanName) {
    
// Create empty result object
    var result = {};

// Retrieve the player state service proxy
    playerStateService = bridge.getPlayerStateServiceProxy();
    
// Read the player state to get the profile id
    playerState = playerStateService.readPlayerState();
    profileId = playerState.profileId;

// retrieve the global entity service proxy
    entityService = bridge.getGlobalEntityServiceProxy();

// Limit the number of retries
    var retryCount = 0;
    
    for (retryCount = 0; retryCount &lt; 10; retryCount++)
    {
        try
        {
            // Create a query data object
            var readQuery = {};
            readQuery['data.name'] = clanName;
        
            // Execute the query
            entityListResult = entityService.getList(readQuery, null, 1);
            
            // Missing clan error
            if (entityListResult.entityListCount == 0)
            {
                result['success'] = false;
                result['message'] = "Clan does not exist";
                return result;
            }
            
            // grab the first entry (there should only be one)
            var entityList = entityListResult.entityList;
            var entity = entityList[0];

            // No members means he must have already left
            if (entity.data.members === undefined)
            {
                result['success'] = true;
                result['message'] = "Already left clan";
                result['updatedEntity'] = entity;
                return result;
            }
            
            // Remove him from the members list
            delete entity.data.members[profileId];

            // Grab the version from the entity read to pass into the update call
            // This is the concurrent access support mechanism
            version = entity['version'];

            // Update the entry getting the updated entry as a result
            var updateEntity = {};
    
            updatedEntity = entityService.updateEntity(entity.entityId, version, entity.data);
            result['success'] = true;
            result['updatedEntity'] = updatedEntity;
        
            // return the updated entry and the success/fail set
            return result;
        }
        catch (err)
        {
            // Exception handling
            // If its a processing error and the code is 40344 that means a version mismatch
            // Somebody else has updated the record
            // Therefore loop back to read to retrieve the new version and try again
            if (bridge.isProcessingException(err))
            {
                var exceptionData = bridge.getExceptionData(err);
                if (exceptionData.reasonCode == 40344)
                {
                    continue;
                }
            }
            
            // Else just rethrow the exception
            throw err;
        }
    }
    
    // If you get here the retry count has been exhausted
    result['success'] = false;
    result['message'] = "Update retry count exhausted";
    return result;
}

// Retrieve the clan name from the input parameters
var name = data.clanName;

// Call leave function
leaveClan(name);
</pre>
[/codesyntax]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1023</wp:post_id>
		<wp:post_date><![CDATA[2015-05-06 12:59:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-06 16:59:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cloud-code-exception-handling]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>4800</wp:post_parent>
		<wp:menu_order>19</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>FAQ</title>
		<link>https://staging.getbraincloud.com/apidocs/garbage-bin/faq/</link>
		<pubDate>Thu, 28 May 2015 18:27:14 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1124</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>Have a question?</h4>
Hopefully it has already been answered! Please check out the various FAQ sections using the navigation menu on the left or the links below:
<ul>
 	<li><a href="/apidocs/support/faq/all-platforms/">All Platforms</a></li>
 	<li><a href="/apidocs/support/faq/braincloud-portal/">brainCloud Portal</a></li>
 	<li><a href="/apidocs/support/faq/unity/">Unity</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1124</wp:post_id>
		<wp:post_date><![CDATA[2015-05-28 14:27:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-28 18:27:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[faq]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>4800</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Unity</title>
		<link>https://staging.getbraincloud.com/apidocs/garbage-bin/unity/</link>
		<pubDate>Thu, 28 May 2015 18:34:07 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1126</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>Below are various questions and answers&nbsp;related to using brainCloud in Unity.</h4>
[hrf_faqs category='FAQ Unity']

&nbsp;

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1126</wp:post_id>
		<wp:post_date><![CDATA[2015-05-28 14:34:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-28 18:34:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[unity]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>4800</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>brainCloud Portal</title>
		<link>https://staging.getbraincloud.com/apidocs/garbage-bin/braincloud-portal/</link>
		<pubDate>Thu, 28 May 2015 20:58:33 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1156</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>This FAQ applies to brainCloud Portal questions.</h4>
[hrf_faqs category='FAQ Portal']]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1156</wp:post_id>
		<wp:post_date><![CDATA[2015-05-28 16:58:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-28 20:58:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[braincloud-portal]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>4800</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>About brainCloud Bombers</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/unity-tutorials/about-braincloud-bombers/</link>
		<pubDate>Tue, 23 Jun 2015 19:06:38 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1263</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1><strong>brainCloud Bombers</strong></h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>brainCloud Bombers is an example project meant to show the compatibility between brainCloud and real-time multiplayer technologies (such as Unity 5 UNET and Photon). Players create accounts, log into the game, play against other players in real-time multiplayer battles, and their stats are saved between sessions via&nbsp;brainCloud. The example also shows various features of brainCloud, including:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Experience levels and ranking up</li><li>Custom player statistics and entities</li><li>Multiple global&nbsp;leaderboards</li><li>Achievement tracking and unlocking</li><li>Global properties</li><li>Email authentication</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Please refer to the specific individual sections for some description, overview, and functionality of each feature. &nbsp;<em>The source for both UNET and Photon versions of brainCloud Bombers can be found <a href="https://github.com/getbraincloud/UnityExamples" target="_blank" rel="noreferrer noopener">here</a>.</em></p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1265,"align":"none","className":"wp-image-1265 size-full"} -->
<figure class="wp-block-image alignnone wp-image-1265 size-full"><img src="/apidocs/wp-content/uploads/2015/06/Dash_XP_and_Stats.png" alt="Dash_XP_and_Stats" class="wp-image-1265"/><figcaption>Bombers XP &amp; Stats Dashboard</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2><strong>Experience Levels and Ranking Up</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In brainCloud Bombers, players can earn experience for destroying enemy planes in-game. Experience is awarded at the end of each match and kept track of on the brainCloud servers. Players can view their total experience on the Matchmaking menu, beneath the player’s name. brainCloud also has custom levels defined, each having an experience value and a name. Players can see their current rank (as well as its numeric value) on the Matchmaking menu, beneath the player’s name. Experience is incremented live, so brainCloud sends messages to clients when they have made it to the next rank. This is shown to the player through a dialog that appears at the end of a match.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Experience and levels can be read through the PlayerStateService in the brainCloud API. The call returns the current player’s experience level and rank name/numeric value, all of which are saved as public member variables in the BrainCloudStats class. These stats are updated live on the brainCloud server, but on the local client, they are only updated when the player visits the Matchmaking menu, reducing the number of API calls required per user.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1266,"align":"none"} -->
<figure class="wp-block-image alignnone"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2015/06/xp_levels.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2015/06/xp_levels.png" alt="" class="wp-image-1266"/></a><figcaption>Xp levels</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2><strong>Custom Player [User] Statistics</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Every player in brainCloud bombers has a number of custom statistics that are stored on the brainCloud servers. These statistics include the number of ships they have sunk, the number of times they have fired their weapon, their total number of wins, and more. These statistics are updated at the end of each match. Players can view their statistics on the Matchmaking menu, where they are shown on the left side, below the player’s name. These statistics were created on the brainCloud design portal, and can also be edited from the monitoring section of the portal&nbsp;for each user.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":4664,"align":"none"} -->
<figure class="wp-block-image alignnone"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/11/UserStats.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/11/UserStats.png" alt="" class="wp-image-4664"/></a><figcaption>User Statistics</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Player statistics can be read through the PlayerStatisticsService in the brainCloud API. The call returns all of the current player’s statistics, including the statistics’ name, value, and description (all defined from the brainCloud dashboard), of which only the value is saved in public member variables in the BrainCloudStats class. These stats are updated live on the brainCloud server, but on the local client, they are only updated when the player visits the Matchmaking menu, reducing the number of API calls required per user.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2><strong>Global&nbsp;Leaderboards</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>brainCloud Bombers has two separate global&nbsp;leaderboards defined, that players may view at their leisure from the Matchmaking menu. The first leaderboard keeps track of the number of enemy plane takedowns that each player has, with the least number of deaths as the tiebreaker, and the second leaderboard keeps track of the number of ship weak-points destroyed by each player, with the least number bombs dropped as the tiebreaker. Both leaderboards feature the player’s place in the leaderboard, name, their rank (and numeric value of rank), and score. brainCloud keeps tracks of all aspects of the leaderboards, and scores are updated at the end of each match.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Leaderboards can be accessed through the SocialLeaderboardService in the brainCloud API. The call returns the entire listing of a given leaderboard, or can be broken up into just the current player’s score, or individual sections of the leaderboard with variable length. The values for the currently observed leaderboard are stored as a public member variable in the BrainCloudStats class. The leaderboards are updated live on the brainCloud server, but on the local client the leaderboards are only fetched when the player wishes to see them from the Matchmaking menu, reducing the number of API calls required per user.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1267,"align":"none"} -->
<figure class="wp-block-image alignnone"><a href="/apidocs/wp-content/uploads/2015/06/leaderboards.png"><img src="/apidocs/wp-content/uploads/2015/06/leaderboards-273x300.png" alt="leaderboards" class="wp-image-1267"/></a><figcaption>Bomber Leaderboards</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>Achievement Tracking</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Three achievements have been implemented for brainCloud Bombers: destroying 50 enemy planes, sinking 10 ships, and destroying five enemy planes in a single match. brainCloud tracks whether the achievements have been unlocked or not, and can even automatically award the achievements based on player stats using Milestones. At the end of the match, bombers sends the stats updates to brainCloud, and then checks the response to see if any Achievements have been awarded. &nbsp;[Exception: note that the Quickshot achievement is handled manually by the client code in real-time during the match.]</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Achievements can be accessed through the GamificationService in the brainCloud API. The call returns all of the achievements in the system, their names, the urls for their icons, their descriptions, and whether or not the current user has unlocked any of them. The achievement data is stored in a public member variable in the BrainCloudStats class. The achievements are updated from the server when the player visits the Matchmaking menu.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1269,"align":"none"} -->
<figure class="wp-block-image alignnone"><a href="/apidocs/wp-content/uploads/2015/06/achievements_png.png"><img src="/apidocs/wp-content/uploads/2015/06/achievements_png.png" alt="achievements_png" class="wp-image-1269"/></a><figcaption>Bomber achievements</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {"id":4673,"align":"none"} -->
<figure class="wp-block-image alignnone"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/11/Milestone-2.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/11/Milestone-2.png" alt="" class="wp-image-4673"/></a><figcaption>&nbsp;1. When this condition is satisfied. <br>2. Award this achievement.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>Global&nbsp;Properties</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>brainCloud Global Properties can be used in place of constants in your games - allowing games to be tuned and/or patched on the fly without having to release new builds. A number of properties&nbsp;have been utilized in&nbsp;brainCloud Bombers, to tune such things as&nbsp;player fire rate, respawn time, bullet speed, player health, and more.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>These properties&nbsp;can be read through the GlobalAppService in the brainCloud API. The call returns all of the currently saved global variables, which are then stored as public member variables in the BrainCloudStats class. To reduce API calls from the client, these values are only read once when the game is started, meaning clients will need to restart the app to get any changes, but they could be checked more often for the sake of app security or faster testing.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":4665,"align":"none"} -->
<figure class="wp-block-image alignnone"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/11/GlobalProps.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/11/GlobalProps.png" alt="" class="wp-image-4665"/></a><figcaption>Global Properties</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2><strong>Email Authentication</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>brainCloud Bombers requires users to sign in with an email and password, with the authentication being done through brainCloud. If a player uses an email that hasn’t been registered, an account is created for them and an authentication email is sent to the email address used. brainCloud also has the ability to <em>require</em> email authentication before being able to log in, though this feature is turned off for brainCloud Bombers. Players may also submit a "Forgot Password" request from the login screen, prompting them to enter their email and sending a password reset link to the entered email.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>User authentication is done through the BrainCloudWrapper instance, and is taken care of on the server end. The server will send a message back saying whether the authentication was successful or not, and the error that occurred if it wasn’t successful. Since brainCloud Bombers uses external servers (UNET or Photon), the player must wait until they are connected to their servers before logging in to brainCloud. This requirement is optional; the services do not depend on each other&nbsp;-&nbsp;this is done under <strong>Design | Authentication | Email&nbsp;Authentication</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":4667,"align":"none"} -->
<figure class="wp-block-image alignnone"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/11/EmailAuth.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/11/EmailAuth.png" alt="" class="wp-image-4667"/></a><figcaption>Email Authentication Settings</figcaption></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":1} -->
<h1><strong>brainCloud Bombers App Overview</strong></h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><em>The source code for brainCloud Bombers can be found <a href="https://github.com/getbraincloud/UnityExamples" target="_blank" rel="noreferrer noopener">here</a>.</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>brainCloud Bombers uses a mixture of scenes and state machines to achieve the flow-through for the game. Please refer to the following section for the general functionality of each of the classes. The scene and main class order is as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Connect Scene
<ol><li>Connect</li><li>BrainCloudStats</li></ol>
</li><li>Matchmaking Scene
<ol><li>Matchmaking</li></ol>
</li><li>Game Scene
<ol><li>GameManager</li><li>PlayerController</li><li>WeaponController</li></ol>
</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong>General Script Functionality</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Connect.cs</strong>
<ul><li>Connects the user to the multiplayer&nbsp;server</li><li>Handles the email and password input for brainCloud</li><li>Handles error messages from the login process</li><li>Initializes the BrainCloudStats script after the player has logged in</li></ul>
</li><li><strong>BrainCloudStats.cs</strong>
<ul><li>Reads a variety of information from the brainCloud server and stores it in public member variables
<ul><li>Statistics for the authenticated user</li><li>Experience and Level for the authenticated user</li><li>General information about experience levels (names, value, etc.)</li><li>General information about achievements (including whether the authenticated user has achieved them or not)</li><li>Global Properties for brainCloud Bombers</li><li>Social Leaderboards for brainCloud Bombers</li></ul>
</li><li>Handles error messages from the brainCloud server</li></ul>
</li><li><strong>Matchmaking.cs</strong>
<ul><li>Uses a state machine to implement functionality for a number of menus available to the player
<ul><li>GAME_STATE_SHOW_ROOMS: Shows the main matchmaking menu, allowing the player to join games, create games, view the leaderboards, view the controls, view their achievements, and shows the player’s stats.</li><li>GAME_STATE_NEW_ROOM_OPTIONS: Shows the create new room dialogue, allowing the player to set the options for a new room, and then joining into it automatically</li><li>GAME_STATE_SHOW_LEADERBOARDS: Displays one of the social leaderboards for brainCloud Bombers, allowing the player to switch between them, and displaying a chevron beside the player’s own entry (if one exists)</li><li>GAME_STATE_SHOW_CONTROLS: Displays the basic controls for the game, as well as the goal and some instructions on what to do</li><li>GAME_STATE_SHOW_ACHIEVEMENTS: Shows the available achievements for brainCloud Bombers, and tells the player whether they have achieved them or not.</li></ul>
</li><li>Checks the multiplayer&nbsp;server for open rooms, and allows the player to join any room that is not full and within their level range.</li><li>Allows players to filter room results using a number of filters</li></ul>
</li><li><strong>GameManager.cs</strong>
<ul><li>Uses a state machine to implement functionality for a number of menus available to the player
<ul><li>GAME_STATE_WAITING_FOR_PLAYERS: Shows the “Bombers Assemble” menu, showing the players connected to the game on both teams, giving players the ability to switch teams, and allowing the host to start the game prematurely before the room is full</li><li>GAME_STATE_STARTING_GAME: Fades the screen in anticipation for the match to begin, telling players to get ready</li><li>GAME_STATE_PLAYING_GAME: The main state, showing the players their HUD and handling a number of interactions for the actual game, including updating the local scores and tracking the time left in the match</li><li>GAME_STATE_GAME_OVER: Shows the results screen to the players, telling them which team won and the scores for each player. The host may go back to the “Bombers Assemble” menu when they wish, and players may leave the room</li></ul>
</li><li>Contains the majority of functionality for the live multiplayer, implementing a number of RPCs and controlling their effects (Photon version only)</li><li>Controls much of the game logic on the host side</li></ul>
</li><li><strong>PlayerController.cs</strong>
<ul><li>Accepts inputs from the player to control their plane</li><li>Sends movement information to the player’s plane</li><li>Controls the health and death messages for the player’s plane</li><li>Contains the majority of &nbsp;functionality for the live multiplayer, implementing a number of commands and client RPCs (UNET version only)</li></ul>
</li><li><strong>WeaponController.cs</strong>
<ul><li>Accepts inputs from the player to control the weapons on their plane, including the main guns, bombs, and flares</li><li>Sends network messages through the <strong>GameManager</strong> to spawn projectiles of all sorts</li><li>Controls the bomb targeting reticule for the player</li><li>Controls the offscreen enemy ship indicator for the player</li></ul>
</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1263</wp:post_id>
		<wp:post_date><![CDATA[2015-06-23 15:06:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-23 19:06:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[about-braincloud-bombers]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>572</wp:post_parent>
		<wp:menu_order>15</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="api-calls-required-per-user"><![CDATA[api calls required per user]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-bombers"><![CDATA[braincloud bombers]]></category>
		<category domain="yst_prominent_words" nicename="calls-required-per-user"><![CDATA[calls required per user]]></category>
		<category domain="yst_prominent_words" nicename="live-on-the-braincloud-server"><![CDATA[live on the braincloud server]]></category>
		<category domain="yst_prominent_words" nicename="matchmaking-menu"><![CDATA[matchmaking menu]]></category>
		<category domain="yst_prominent_words" nicename="matchmaking-menu-reducing-the-number"><![CDATA[matchmaking menu reducing the number]]></category>
		<category domain="yst_prominent_words" nicename="member-variables-in-the-braincloudstats"><![CDATA[member variables in the braincloudstats]]></category>
		<category domain="yst_prominent_words" nicename="menu-reducing-the-number"><![CDATA[menu reducing the number]]></category>
		<category domain="yst_prominent_words" nicename="number-of-api-calls"><![CDATA[number of api calls]]></category>
		<category domain="yst_prominent_words" nicename="number-of-api-calls-required"><![CDATA[number of api calls required]]></category>
		<category domain="yst_prominent_words" nicename="player"><![CDATA[player]]></category>
		<category domain="yst_prominent_words" nicename="player-visits-the-matchmaking"><![CDATA[player visits the matchmaking]]></category>
		<category domain="yst_prominent_words" nicename="player-visits-the-matchmaking-menu"><![CDATA[player visits the matchmaking menu]]></category>
		<category domain="yst_prominent_words" nicename="public-member-variables"><![CDATA[public member variables]]></category>
		<category domain="yst_prominent_words" nicename="reducing-the-number-of-api"><![CDATA[reducing the number of api]]></category>
		<category domain="yst_prominent_words" nicename="updated-live-on-the-braincloud"><![CDATA[updated live on the braincloud]]></category>
		<category domain="yst_prominent_words" nicename="variables-in-the-braincloudstats-class"><![CDATA[variables in the braincloudstats class]]></category>
		<category domain="yst_prominent_words" nicename="visits-the-matchmaking-menu"><![CDATA[visits the matchmaking menu]]></category>
		<category domain="yst_prominent_words" nicename="visits-the-matchmaking-menu-reducing"><![CDATA[visits the matchmaking menu reducing]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Building Bombers</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/unity-tutorials/building-the-braincloud-bombers-project/</link>
		<pubDate>Wed, 24 Jun 2015 17:35:31 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1291</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><em>Note - these instructions assume that you've already made yourself familiar with the game via the Intro and Overview postings.</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To build the <strong>Photon</strong> version of brainCloud bombers:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Step 1: Retrieve the source code</li><li>Step 2: Register with brainCloud (if you haven't already)</li><li>Step 3: Create the brainCloud Bombers app</li><li>Step 4: Update the brainCloud appId and secret in the source code</li><li>Step 5: Import the brainCloud Bombers meta-data</li><li>Step 6: Register with Photon</li><li>Step 7: Update the Photon appid and secret</li><li>Step 8: Build!</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong><em>To build the UNET version of Bombers, just use UNET Step 6 and UNET Step 7.</em></strong></p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>Step 1: Retrieve the source code</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The brainCloud Bombers source is stored on GitHub. &nbsp;You can find it in the&nbsp;"Bombers" directory&nbsp;<a href="https://github.com/getbraincloud/UnityExamples" target="_blank" rel="noreferrer noopener">here</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Step 2: Register with brainCloud</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Registering with brainCloud is easy and free. &nbsp;Go to&nbsp;<a href="http://getbraincloud.com" target="_blank" rel="noreferrer noopener">getBrainCloud.com</a> and click <strong>[Sign Up]</strong> in the top-right-hand corner.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Step 3: Create the brainCloud Bombers App</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To create the app:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Go to the <strong>Administration</strong> section of the Portal by clicking on the "Gear" icon in the top-right</li><li>Click on the <strong>[+]</strong> button in the "Your Apps" section of the <strong>Home</strong> page</li><li>Fill out the <strong>New App</strong> dialog - be sure to enable game features and choose the platforms to run upon.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":1292,"align":"none"} -->
<figure class="wp-block-image alignnone"><a href="/apidocs/wp-content/uploads/2015/06/Bomber_new_app.png"><img src="/apidocs/wp-content/uploads/2015/06/Bomber_new_app-277x300.png" alt="New App Dialog" class="wp-image-1292"/></a><figcaption>New App Dialog</figcaption></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Go to the app by clicking on its name in the <strong>Your Apps</strong> list, or by choosing the <strong>Design</strong> tab, and then selecting it from the drop-down</li><li>You'll see the brainCloud App ID and App Secret on the <strong>Core App Info | Application IDs</strong> page.... &nbsp;we'll use those in our next step.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":1302,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/06/Bomber_app_id.png"><img src="/apidocs/wp-content/uploads/2015/06/Bomber_app_id-1024x300.png" alt="Bomber_app_id" class="wp-image-1302"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>Step 4:&nbsp;Update the brainCloud appId and secret in the source code</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Load the bomber project,&nbsp;"PhotonDemo", into Unity</li><li>Choose <strong>brainCloud | Settings</strong> from the Unity menu bar</li><li>Enter the <em>brainCloud&nbsp;app id</em> into the <em>Game Id</em> field</li><li>Enter the <em>brainCloud secret</em> into the <em>Game Secret</em> field</li><li>Also, hit <strong>[Reset to Default Server URL]</strong> to ensure that the client is set to connect to the proper endpoint</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":1304,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/06/Unity_settings.png"><img src="/apidocs/wp-content/uploads/2015/06/Unity_settings-300x186.png" alt="Unity_settings" class="wp-image-1304"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>Step 5: Import the Bomber meta-data</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Back in the brainCloud portal, go to <strong>Design | Admin Tools</strong> for the your app</li><li>Click the [Import] button in the Configuration Data section
<ul><li>Choose <strong>[Select Configuration File (bcconfig)]</strong>, and navigate to the <strong><em>Bombers/ImportData/Bombers_&lt;some_date&gt;.bcconfig</em></strong> file&nbsp;included with the bomber source</li><li>You can leave the two "Do not overwrite" options blank - they're not used in this example</li><li>Click <strong>[Upload]</strong> to import the data</li><li>You'll immediately note that the brainCloud Bombers icon is now associated with your project. &nbsp;You'll also see user statistics, achievements, and XP levels filled in throughout the application.</li></ul>
</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Step 6: Register with Photon</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Go to&nbsp;<strong>https://www.exitgames.com/en/PUN</strong> to set up a free Photon account</li><li>Once you've registered, click <strong>[Dashboard]</strong> to view the free app that Photon has automatically configured for you</li><li>You'll notice the Photon App ID - we'll be using that in the next step</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":1300,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/06/Photon_Setup.png"><img src="/apidocs/wp-content/uploads/2015/06/Photon_Setup-1024x411.png" alt="Photon_Setup" class="wp-image-1300"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>UNET Step 6: Register with&nbsp;UNET</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Go to&nbsp;<a href="http://unet.cloud.unity3d.com"><strong>https://www.unet.cloud.unity3d.com</strong></a>&nbsp;to set up a free Unity Cloud&nbsp;account</li><li>Once you've registered, click <strong>[Multiplayer] </strong>at the top left and click the [Create Project] button at the top right</li><li>Type in a name, a maximum number of players per room, and accept</li><li>Copy the <strong>UPID</strong>&nbsp;field from this page</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Step 7:&nbsp;Update the Photon app id</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Back in Unity,&nbsp;Choose <strong>Window | Photon Unity Networking | Local Settings Asset</strong> from the drop-down menu</li><li>In the Inspector windows that shows, enter the Photon AppID</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":1301,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/06/Photon_app_id_in_Unity.png"><img src="/apidocs/wp-content/uploads/2015/06/Photon_app_id_in_Unity-300x137.png" alt="Photon_app_id_in_Unity" class="wp-image-1301"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>UNET Step 7:&nbsp;Update the&nbsp;Cloud Project ID</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Back in Unity,&nbsp;Choose <strong>Edit&nbsp;| Project Settings&nbsp;| Player</strong>&nbsp;from the drop-down menu</li><li>In the Inspector windows that shows, enter the you <strong>UPID</strong>&nbsp;into the&nbsp;<strong>Cloud Project Id&nbsp;</strong>field</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Step 8:&nbsp;Play the game!</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>From the <strong>Project</strong> window, choose the <strong>Assets</strong> folder on the left, and then choose the Scenes subfolder</li><li>Select the&nbsp;<strong>Connect</strong> Scene in the <strong>Assets</strong> folder of the project, and then click <strong>Play! </strong>Have fun!</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":1306,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/06/Run_bombers.png"><img src="/apidocs/wp-content/uploads/2015/06/Run_bombers-300x142.png" alt="Run_bombers" class="wp-image-1306"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1291</wp:post_id>
		<wp:post_date><![CDATA[2015-06-24 13:35:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-24 17:35:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[building-the-braincloud-bombers-project]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>572</wp:post_parent>
		<wp:menu_order>16</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="1-retrieve-the-source"><![CDATA[1 retrieve the source]]></category>
		<category domain="yst_prominent_words" nicename="1-retrieve-the-source-code"><![CDATA[1 retrieve the source code]]></category>
		<category domain="yst_prominent_words" nicename="2-register-with-braincloud"><![CDATA[2 register with braincloud]]></category>
		<category domain="yst_prominent_words" nicename="3-create-the-braincloud"><![CDATA[3 create the braincloud]]></category>
		<category domain="yst_prominent_words" nicename="3-create-the-braincloud-bombers"><![CDATA[3 create the braincloud bombers]]></category>
		<category domain="yst_prominent_words" nicename="4-update-the-braincloud-appid"><![CDATA[4 update the braincloud appid]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-bombers"><![CDATA[braincloud bombers]]></category>
		<category domain="yst_prominent_words" nicename="create-the-braincloud-bombers"><![CDATA[create the braincloud bombers]]></category>
		<category domain="yst_prominent_words" nicename="create-the-braincloud-bombers-app"><![CDATA[create the braincloud bombers app]]></category>
		<category domain="yst_prominent_words" nicename="inspector-windows-that-shows-enter"><![CDATA[inspector windows that shows enter]]></category>
		<category domain="yst_prominent_words" nicename="retrieve-the-source-code"><![CDATA[retrieve the source code]]></category>
		<category domain="yst_prominent_words" nicename="secret-in-the-source-code"><![CDATA[secret in the source code]]></category>
		<category domain="yst_prominent_words" nicename="step-1-retrieve-the-source"><![CDATA[step 1 retrieve the source]]></category>
		<category domain="yst_prominent_words" nicename="step-2-register-with-braincloud"><![CDATA[step 2 register with braincloud]]></category>
		<category domain="yst_prominent_words" nicename="step-3-create-the-braincloud"><![CDATA[step 3 create the braincloud]]></category>
		<category domain="yst_prominent_words" nicename="step-4-update-the-braincloud"><![CDATA[step 4 update the braincloud]]></category>
		<category domain="yst_prominent_words" nicename="step-6-register"><![CDATA[step 6 register]]></category>
		<category domain="yst_prominent_words" nicename="step-6-register-with-photon"><![CDATA[step 6 register with photon]]></category>
		<category domain="yst_prominent_words" nicename="step-7-update"><![CDATA[step 7 update]]></category>
		<category domain="yst_prominent_words" nicename="step-7-update-the-photon"><![CDATA[step 7 update the photon]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Push Notification Setup - Deprecated GCM</title>
		<link>https://staging.getbraincloud.com/apidocs/garbage-bin/push-notification-setup-google/</link>
		<pubDate>Thu, 30 Jul 2015 19:41:35 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1420</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>As soon as <strong>April 11, 2019</strong>, GCM (Google Cloud Messaging) will be removed by <a href="https://developers.google.com/cloud-messaging/">Google</a>.</h4>
<h4>We suggest to check out Google's&nbsp;<a href="/apidocs/portal-usage/push-notification-setup-firebase/">FCM (Firebase&nbsp;Cloud Messages)</a>&nbsp;instead.</h4>
&nbsp;

<hr>

<strong>[LEGACY TUTORIAL]</strong>

&nbsp;

In this tutorial we walk you through the steps to configure Google Cloud Messaging (GCM) with brainCloud.
<h2>Prerequisites</h2>
<ul>
 	<li>Must have a Google developer account</li>
 	<li>Must have created an app on the <a href="https://console.developers.google.com/" target="_blank" rel="noopener noreferrer">Google developer console site</a></li>
 	<li>Must have entered appropriate Google information in "Core App Info |&nbsp;Application IDs" seciont of the brainCloud portal</li>
</ul>
&nbsp;
<h2>Create GCM API key for brainCloud</h2>
<h3>Enable the GCM API</h3>
<ul>
 	<li>Navigate your browser to the <a href="https://console.developers.google.com/" target="_blank" rel="noopener noreferrer">Google developer console site</a></li>
 	<li>Select your app
<a href="/apidocs/wp-content/uploads/2015/07/GooglePlay1.png" target="_blank" rel="noopener noreferrer"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2015/07/GooglePlay1.png" alt="brainCloud"></a></li>
 	<li>Click&nbsp;the "APIs&nbsp;&amp; auth | APIs" link on the left hand nav bar
<a href="/apidocs/wp-content/uploads/2015/07/GooglePlay1-2.png" target="_blank" rel="noopener noreferrer"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2015/07/GooglePlay1-2.png" alt="brainCloud"></a></li>
 	<li>Select "Cloud Messaging for Android</li>
 	<li>Enable the API</li>
</ul>
<h3>Create Public Access Key</h3>
<ul>
 	<li style="list-style-type: none;">
<ul>
 	<li>Navigate to the "API | Credentials" page</li>
 	<li>Create New Key under "Public API access"</li>
 	<li>Select "Server Key"
<a href="/apidocs/wp-content/uploads/2015/07/GooglePlay31.png" target="_blank" rel="noopener noreferrer"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2015/07/GooglePlay31.png" alt="brainCloud"></a></li>
 	<li>Hit the Create button
<a href="/apidocs/wp-content/uploads/2015/07/GooglePlay32.png" target="_blank" rel="noopener noreferrer"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2015/07/GooglePlay32.png" alt="brainCloud"></a></li>
</ul>
</li>
</ul>
&nbsp;
<ul>
 	<li>You should now have a server API key:
<a href="/apidocs/wp-content/uploads/2015/07/GooglePlay33.png" target="_blank" rel="noopener noreferrer"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2015/07/GooglePlay33.png" alt="brainCloud"></a></li>
 	<li>Navigate to the brainCloud portal and enter this key in the Notifications | Settings for Google Play.
<a href="/apidocs/wp-content/uploads/2016/09/brainCloud_angNotif_1.jpg" target="_blank" rel="noopener noreferrer"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2016/09/brainCloud_angNotif_1.jpg" alt="brainCloud"></a></li>
</ul>
&nbsp;

&nbsp;
<h2>Enable GCM For Your App</h2>
In addition to the above steps, you will need to do the following in order for GCM to work in your app.
<h3>Link your Google Console game to Google Play</h3>
Apparently these two systems can't talk to each other. Do the following to establish a link between the two systems.
<ul>
 	<li>Navigate to the <a href="http://play.google.com/apps/publish" target="_blank" rel="noopener noreferrer">Google Play Developer site (play.google.com/apps/publish)</a></li>
 	<li>Click Game Services in left hand navigation bar
<a href="/apidocs/wp-content/uploads/2015/07/GooglePlay4.png" target="_blank" rel="noopener noreferrer"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2015/07/GooglePlay4.png" alt="brainCloud"></a></li>
 	<li>Click Add New Game button on top right</li>
 	<li>Fill in the appropriate info in the Add Game dialog making sure to select "I already use Google APIs in my game" and using the appropriate game (Hello World is probably *not* the correct game).
<a href="/apidocs/wp-content/uploads/2015/07/GooglePlay41.png" target="_blank" rel="noopener noreferrer"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2015/07/GooglePlay41.png" alt="brainCloud"></a></li>
</ul>
&nbsp;
<h3>Registering GCM Notification Token With brainCloud</h3>
After Authenticating a user with brainCloud, you will want to Register their GCM notification token with brainCloud. Specifically you'll want to call the <a href="/apidocs/apiref/#capi-push-registerpushnotificationdevicetoken">BrainCloudPushNotifications.RegisterDeviceToken()</a> and pass in the registration id. In order to get this registration id, follow these steps.

Note that this example assume you are working in Java on an Android device. For developers using Unity, follow the appropriate instructions available elsewhere.
<ul>
 	<li>Find your "Sender Id" - the number which appears under your app's name in the Game Services section of the Google Play developer site.
<a href="/apidocs/wp-content/uploads/2015/07/GooglePlay5__1_.png" target="_blank" rel="noopener noreferrer"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2015/07/GooglePlay5__1_.png" alt="brainCloud"></a></li>
 	<li>This Sender Id is what you will need to pass to the GCM Java API to get a registration id. The code below shows how to retrieve the registration id:
<a href="/apidocs/wp-content/uploads/2015/07/GooglePlay511.png" target="_blank" rel="noopener noreferrer"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2015/07/GooglePlay511.png" alt="brainCloud"></a></li>
 	<li>Once you have the registration id you will want to call&nbsp;<a href="/apidocs/apiref/#capi-push-registerpushnotificationdevicetoken">BrainCloudPushNotifications.RegisterDeviceToken()</a></li>
</ul>
<h2>Other Google Configuration Stuff</h2>
A few other tasks remain to link credentials together etc.
<h3>Create OAuth Key</h3>
<ul>
 	<li>In the <a href="https://console.developers.google.com" target="_blank" rel="noopener noreferrer">Google Developer Console</a> navigate to the "Apis &amp; auth | Credentials" section</li>
 	<li>Under the OAuth section click "Create new Client ID"</li>
 	<li>Fill in the appropriate info
<a href="/apidocs/wp-content/uploads/2015/07/GooglePlay6.png" target="_blank" rel="noopener noreferrer"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2015/07/GooglePlay6.png" alt="brainCloud"></a></li>
 	<li>&nbsp;Your Client ID should now&nbsp;available
<a href="/apidocs/wp-content/uploads/2015/07/GooglePlay62.png" target="_blank" rel="noopener noreferrer"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2015/07/GooglePlay62.png" alt="brainCloud"></a></li>
</ul>
<h3>Link Client ID to Google Play</h3>
<ul>
 	<li>Navigate to the <a href="https://play.google.com/apps/publish" target="_blank" rel="noopener noreferrer">Google Play Developer Console</a></li>
 	<li>Select Game Services for your app from left hand navigation bar</li>
 	<li>Click "Linked Apps"
<a href="/apidocs/wp-content/uploads/2015/07/GooglePlay7.png" target="_blank" rel="noopener noreferrer"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2015/07/GooglePlay7.png" alt="brainCloud"></a></li>
 	<li>Click "Android" button</li>
 	<li>Enter the appropriate information for your app
<a href="/apidocs/wp-content/uploads/2015/07/GooglePlay81.png" target="_blank" rel="noopener noreferrer"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2015/07/GooglePlay81.png" alt="brainCloud"></a></li>
 	<li>And finally, verify that your Client ID is linked in correctly
<a href="/apidocs/wp-content/uploads/2015/07/GooglePlay8.png" target="_blank" rel="noopener noreferrer"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2015/07/GooglePlay8.png" alt="brainCloud"></a></li>
 	<li>Take a breath of fresh air, you are finally *done*!</li>
</ul>
&nbsp;

<strong>[LEGACY TUTORIAL]</strong>

<hr>

<h4>As soon as <strong>April 11, 2019</strong>, GCM (Google Cloud Messaging) will be removed by <a href="https://developers.google.com/cloud-messaging/">Google</a>.</h4>
<h4>We suggest to check out Google's&nbsp;<a href="/apidocs/portal-usage/push-notification-setup-firebase/">FCM (Firebase&nbsp;Cloud Messages)</a>&nbsp;instead.</h4>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1420</wp:post_id>
		<wp:post_date><![CDATA[2015-07-30 15:41:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-30 19:41:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[push-notification-setup-google]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>4800</wp:post_parent>
		<wp:menu_order>6</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="11-2019-gcm-google"><![CDATA[11 2019 gcm google]]></category>
		<category domain="yst_prominent_words" nicename="11-2019-gcm-google-cloud"><![CDATA[11 2019 gcm google cloud]]></category>
		<category domain="yst_prominent_words" nicename="2019-gcm-google-cloud"><![CDATA[2019 gcm google cloud]]></category>
		<category domain="yst_prominent_words" nicename="2019-gcm-google-cloud-messaging"><![CDATA[2019 gcm google cloud messaging]]></category>
		<category domain="yst_prominent_words" nicename="april-11-2019-gcm"><![CDATA[april 11 2019 gcm]]></category>
		<category domain="yst_prominent_words" nicename="april-11-2019-gcm-google"><![CDATA[april 11 2019 gcm google]]></category>
		<category domain="yst_prominent_words" nicename="check-out-googles-fcm-firebase"><![CDATA[check out google's fcm firebase]]></category>
		<category domain="yst_prominent_words" nicename="fcm-firebase-cloud-messages"><![CDATA[fcm firebase cloud messages]]></category>
		<category domain="yst_prominent_words" nicename="gcm-google-cloud-messaging"><![CDATA[gcm google cloud messaging]]></category>
		<category domain="yst_prominent_words" nicename="gcm-notification-token-with-braincloud"><![CDATA[gcm notification token with braincloud]]></category>
		<category domain="yst_prominent_words" nicename="google-cloud-messaging"><![CDATA[google cloud messaging]]></category>
		<category domain="yst_prominent_words" nicename="google-developer-console"><![CDATA[google developer console]]></category>
		<category domain="yst_prominent_words" nicename="google-developer-console-site"><![CDATA[google developer console site]]></category>
		<category domain="yst_prominent_words" nicename="google-play"><![CDATA[google play]]></category>
		<category domain="yst_prominent_words" nicename="google-play-developer"><![CDATA[google play developer]]></category>
		<category domain="yst_prominent_words" nicename="google-play-developer-site"><![CDATA[google play developer site]]></category>
		<category domain="yst_prominent_words" nicename="googles-fcm-firebase-cloud"><![CDATA[google's fcm firebase cloud]]></category>
		<category domain="yst_prominent_words" nicename="googles-fcm-firebase-cloud-messages"><![CDATA[google's fcm firebase cloud messages]]></category>
		<category domain="yst_prominent_words" nicename="left-hand-navigation-bar"><![CDATA[left hand navigation bar]]></category>
		<category domain="yst_prominent_words" nicename="navigate-to-the-google-play"><![CDATA[navigate to the google play]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Push Notification Setup - iOS-   Archived</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/push-notification-setup-ios/</link>
		<pubDate>Tue, 04 Aug 2015 20:28:47 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1447</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>Prerequisites</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Must have an iOS developer account</li><li>In order to configure brainCloud to send notifications to your iOS app, you will need to provide a p12 certificate file. <a href="http://www.mobiloud.com/help/knowledge-base/how-to-export-push-notification-certificate-p12/" target="_blank" rel="noreferrer noopener">Follow these steps</a> to create a p12 file for your app.</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>brainCloud Portal Configuration</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Log into the brainCloud portal</li><li>Navigate to "Notifications | Settings" in the design tab for your app<br><a rel="noreferrer noopener" href="/apidocs/wp-content/uploads/2016/09/brainCloud_iosNotif_1.jpg" target="_blank"></a></li><li>Click on the edit button for the Apple notification settings<br><a rel="noreferrer noopener" href="/apidocs/wp-content/uploads/2016/09/brainCloud_iosNotif_2.jpg" target="_blank"></a></li><li>Upload your p12 file and enter the password that was used to create the p12 file into the dialog</li><li>Notice that once you've done that, the type of certificate shows up (production/sandbox) as well as the expiry date<br><a rel="noreferrer noopener" href="/apidocs/wp-content/uploads/2016/09/brainCloud_iosNotif_3.jpg" target="_blank"></a></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong>Unity Code Example</strong></p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"csharp","title":"Unity"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="Unity" data-enlighter-group="">using UnityEngine;
using UnityEngine.iOS;

public class App : MonoBehaviour
{
    private BrainCloudWrapper _bc;
    private string _wrapperName = "default";
    
    bool tokenSent;
    void Start()
    {
        // Unity
        GameObject go = new GameObject();
        _bc = go.AddComponent&lt;BrainCloudWrapper>();
        _bc.WrapperName = _wrapperName; // optionally set a wrapper-name
        _bc.Init(); // extra data, such as: _appId, _secret and _appVersion, is taken from the brainCloud Unity Plugin.
        DontDestroyOnLoad(go); // keep the brainCloud game object through scene changes
     
        
        // Authenticate your user with brainCloud 
        _bc.AuthenticateAnonymous((response, cbObject) =>
            {
                Debug.Log(string.Format("[Auth Success] {0}", response));
                
            },
            (status, code, error, cbObject) =>
            {
                Debug.Log(string.Format("[Auth Failed] {0}  {1}  {2}", status, code, error));
            });
        
        
        tokenSent = false;
        UnityEngine.iOS.NotificationServices.RegisterForNotifications(
            NotificationType.Alert |
            NotificationType.Badge |
            NotificationType.Sound);
    }

    void Update()
    {
        
        if (!tokenSent)
        {
            byte[] token = UnityEngine.iOS.NotificationServices.deviceToken;
            
            // When token exists, and brainCloud is Authenticated
            if (token != null &amp;&amp; _bc.Client.Authenticated)
            {
                // Send the token to brainCloud
                _bc.PushNotificationService.RegisterPushNotificationDeviceToken(
                    token, 
                    (response, cbObject) =>
                    {
                        Debug.Log(string.Format("[Register Success] {0}", response));
                    },    ((status, code, error, cbObject) =>
                    {
                        Debug.Log(string.Format("[Register Failed] {0}  {1}  {2}", status, code, error));
                    }));
                
                tokenSent = true;
            }
        }
    }
}
</pre>
<!-- /wp:enlighter/codeblock -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1447</wp:post_id>
		<wp:post_date><![CDATA[2015-08-04 16:28:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-04 20:28:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[push-notification-setup-ios]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>58</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="app"><![CDATA[app]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-portal"><![CDATA[braincloud portal]]></category>
		<category domain="yst_prominent_words" nicename="certificate"><![CDATA[certificate]]></category>
		<category domain="yst_prominent_words" nicename="create"><![CDATA[create]]></category>
		<category domain="yst_prominent_words" nicename="file"><![CDATA[file]]></category>
		<category domain="yst_prominent_words" nicename="ios"><![CDATA[ios]]></category>
		<category domain="yst_prominent_words" nicename="notifications"><![CDATA[notifications]]></category>
		<category domain="yst_prominent_words" nicename="p12"><![CDATA[p12]]></category>
		<category domain="yst_prominent_words" nicename="p12-file"><![CDATA[p12 file]]></category>
		<category domain="yst_prominent_words" nicename="portal"><![CDATA[portal]]></category>
		<category domain="yst_prominent_words" nicename="settings"><![CDATA[settings]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Store Integration - Google - Archived</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/store-integration-google/</link>
		<pubDate>Tue, 15 Dec 2015 19:59:02 +0000</pubDate>
		<dc:creator><![CDATA[jasonl]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=2363</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph {"className":"p1"} -->
<p class="p1"><span class="s1">In this tutorial, we’ll look at integrating the Google Play store with the brainCloud marketplace. By doing this, Google Android users will have the ability to validate purchased items from the Google Play store with brainCloud.</span></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"className":"p1"} -->
<p class="p1"><span class="s1">Note that apps still have to make the purchase directly with the Google Play Store. For more information on this process refer to the Google&nbsp;Play developer site.</span></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"className":"p1"} -->
<h2 class="p1">Purchase Flow</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>(coming soon)</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>brainCloud Portal Setup</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {"className":"p1"} -->
<p class="p1"><span class="s1">Here are the steps to configure brainCloud for Google Play&nbsp;purchases.</span></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"className":"p2"} -->
<p class="p2"><span class="s1">Prerequisites</span></p>
<!-- /wp:paragraph -->

<!-- wp:list {"className":"ul1"} -->
<ul class="ul1"><li><span class="s1">You&nbsp;should have set up your products in the brainCloud marketplace. Please refer to the <a href="/apidocs/portal-usage/marketplace-configuration/"><span class="s2">Marketplace Configuration</span></a> guide.</span></li><li><span class="s1">You should have created the Google&nbsp;Store In-App products per the Google Developer documentation</span></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3,"className":"p1"} -->
<h3 class="p1"><span class="s1">Associate Google In-App&nbsp;Products with brainCloud Products</span></h3>
<!-- /wp:heading -->

<!-- wp:paragraph {"className":"p2"} -->
<p class="p2"><span class="s1">After setting up your products in the brainCloud marketplace, you’ll want to associate them with the&nbsp;Google&nbsp;product ids. In particular, we will be grabbing the product ids from the&nbsp;Google Play developer site&nbsp;and entering them into the appropriate brainCloud products.</span></p>
<!-- /wp:paragraph -->

<!-- wp:list {"className":"ul1"} -->
<ul class="ul1"><li class="li3"><span class="s3">Log into the <a href="https://play.google.com/apps/publish/">Google Play Developer</a> site</span></li><li class="li2"><span class="s1">Select your App and go to the “In-App Products” section</span></li><li class="li2"><span class="s1">Select your IAP and grab the Google&nbsp;Product ID<br><figure><a href="/apidocs/wp-content/uploads/2015/12/2015-12-04_11-06-551.png" target="_blank" rel="noopener noreferrer"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2015/12/2015-12-04_11-06-551.png" alt="brainCloud"></a></figure></span></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>(for this tutorial&nbsp;we'll assume that the product id is com.braincloud.mygame.goldsack1)</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Log into the brainCloud Portal</li><li>Go to the “Marketplace | Products” page in the Design tab<br><figure><a rel="noopener noreferrer" href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_productsTab.jpg" target="_blank"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_productsTab.jpg" alt="brainCloud"></a></figure></li><li> Select the product you would like to associate with.<figure><a rel="noopener noreferrer" href="/apidocs/wp-content/uploads/2016/09/brainCloud_dashboard_addFbProduct1.jpg" target="_blank"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2016/09/brainCloud_dashboard_addFbProduct1.jpg" alt="brainCloud"></a></figure></li></ul>
<!-- /wp:list -->

<!-- wp:list -->
<ul><li> Click the “+ Edit Product” button<figure><a rel="noopener noreferrer" href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_addProduct2.jpg" target="_blank"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_addProduct2.jpg" alt="brainCloud"></a></figure></li></ul>
<!-- /wp:list -->

<!-- wp:list -->
<ul><li> Find your Price (or create one) and click the edit icon<figure><a rel="noopener noreferrer" href="/apidocs/wp-content/uploads/2016/09/brainCloud_dashboard_addFbProduct2.jpg" target="_blank"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2016/09/brainCloud_dashboard_addFbProduct2.jpg" alt="brainCloud"></a></figure><p class="p1"></li></ul>
<!-- /wp:list -->

<!-- wp:list -->
<ul><li> In the Edit Price dialog, click the + icon to add an entry for&nbsp;Google<figure><a rel="noopener noreferrer" href="/apidocs/wp-content/uploads/2016/09/brainCloud_dashboard_addFbProduct3.jpg" target="_blank"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2016/09/brainCloud_dashboard_addFbProduct3.jpg" alt="brainCloud"></a></figure></li></ul>
<!-- /wp:list -->

<!-- wp:list -->
<ul><li> Enter your Google product id for this price – in our case “com.braincloud.mytestapp.goldsack1”.<figure><a rel="noopener noreferrer" href="/apidocs/wp-content/uploads/2016/09/portal_addGoogProd1..jpg" target="_blank"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2016/09/portal_addGoogProd1..jpg" alt="brainCloud"></a></figure><p class="p1"></li></ul>
<!-- /wp:list -->

<!-- wp:list -->
<ul><li> At this point, you may want to select your price to be the default if it isn’t already selected. You can do this back in the Edit Product page.<figure><a rel="noopener noreferrer" href="/apidocs/wp-content/uploads/2016/09/portal_addGoogProd2..jpg" target="_blank"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2016/09/portal_addGoogProd2..jpg" alt="brainCloud"></a></figure><p class="p1"></li></ul>
<!-- /wp:list -->

<!-- wp:list -->
<ul><li> You can now verify that your Product is coming back with the correct Google In-app Product&nbsp;id. Here is the output from the API Explorer “Product.GetInventory” call using "googlePlay" as the platform:<figure><a rel="noopener noreferrer" href="/apidocs/wp-content/uploads/2016/09/portal_addGoogProd3..jpg" target="_blank"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2016/09/portal_addGoogProd3..jpg" alt="brainCloud"></a></figure></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Google Certificates and Credentials</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Once the products have been configured, you will need to add the appropriate Google credentials to brainCloud.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Navigate to the Application IDs page<br><figure><a href="/apidocs/wp-content/uploads/2016/09/portal_addGoogProd4.jpg" target="_blank" rel="noopener noreferrer"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2016/09/portal_addGoogProd4.jpg" alt="brainCloud"></a></figure></li><li>Click the Google icon and notice the following fields<br><figure><a href="/apidocs/wp-content/uploads/2016/09/portal_addGoogProd5.jpg" target="_blank" rel="noopener noreferrer"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2016/09/portal_addGoogProd5.jpg" alt="brainCloud"></a></figure></li><li>The following sections will show you where to find the appropriate information</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4>Google Package Name</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Log into the&nbsp;<a href="https://play.google.com/apps/publish/">Google Play</a> developer site</li><li>Select your application</li><li>Grab the package name</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":6900,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/04/image-18.png" alt="" class="wp-image-6900"/></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":4} -->
<h4>Google Service Account&nbsp;Email &amp; p12 Certificate File</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To validate purchases, brainCloud requires the usage of a Service Account to communicate with the Google Play backend servers.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Log into the <a href="https://console.developers.google.com">Google Console</a> developer site</li><li>Create a project (or select an existing project). Note that the Google Service Account can be used across multiple apps.<br></li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":6875,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/04/image.png" alt="" class="wp-image-6875"/><figcaption>the left top corner screen shot of Google Developer Console</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>(by clicking caret down icon, open the project list dialogue with select or create new project options)</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":6876,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/04/image-1-1024x296.png" alt="" class="wp-image-6876"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Enable the Google Play Android Developer API</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":6878,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/04/image-3.png" alt="" class="wp-image-6878"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Type the name of APIs or Services</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":6879,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/04/image-4.png" alt="" class="wp-image-6879"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Check Google play Android Developer API is on the list of</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":6906,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/04/image-19-1024x616.png" alt="" class="wp-image-6906"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Navigate to the <strong>Home </strong>-&gt;<strong>Credentials</strong>, click [+ CREATE CREDENTIALS], select <strong>Service account</strong></li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":6880,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/04/image-5.png" alt="" class="wp-image-6880"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Create a new Service Account</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":6881,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/04/image-6.png" alt="" class="wp-image-6881"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Set service account permissions and click <strong>CONTINUE</strong></li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":6882,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/04/image-7.png" alt="" class="wp-image-6882"/><figcaption>select a role and click continue</figcaption></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Select the p12 key type and click Create</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":6883,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/04/image-8-1024x463.png" alt="" class="wp-image-6883"/><figcaption>create a key and select key type P12</figcaption></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>This should create a new Service Account and immediately download the p12 key file to your computer. If for some reason the browser did not download the p12 key file try Chrome.</li><li>Upload the p12 key file to the brainCloud portal.</li><li>Also, the <em>Service Account</em> should now show up on the <em>Credentials</em> page. <span style="color: #000080;">Important: Grab the email address and save it to&nbsp;the brainCloud portal - <strong>Design | Core App Info | Application IDs</strong>, <em>Google</em> platform tab, <em>Google Service Account Email</em> field.</span><br><figure><a href="/apidocs/wp-content/uploads/2015/12/2015-12-04_14-31-03.png"><img width="422" height="102" class="alignnone size-full wp-image-2386" src="/apidocs/wp-content/uploads/2015/12/2015-12-04_14-31-03.png" alt="2015-12-04_14-31-03"></a></figure></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Linking the&nbsp;Google Console project to the&nbsp;Google Play app</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>For the Service Account to be active, you will need to link the console project to the Google Play app and give the Service Account permission to View Financial Reports. Note you will need to be the account owner in order to complete these steps.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Log into the <a href="https://play.google.com/apps/publish">Google Play Developer Console</a></li><li>Go to Settings | API Access<br></li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":6885,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/04/image-10.png" alt="" class="wp-image-6885"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Select the Google Console project to link to</li></ul>
<!-- /wp:list -->

<!-- wp:list -->
<ul><li>Verify that the project is linked and the Games Services Publishing API access is&nbsp;ON<br><figure><a href="/apidocs/wp-content/uploads/2015/12/2015-12-04_14-38-48.png"><img width="671" height="335" class="alignnone size-full wp-image-2388" src="/apidocs/wp-content/uploads/2015/12/2015-12-04_14-38-48.png" alt="2015-12-04_14-38-48"></a></figure></li><li>Navigate to Users &amp; permissions</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":6887,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/04/image-12.png" alt="" class="wp-image-6887"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Select the Service Account and turn on "View financial data" permission. All other permissions can be disabled<br></li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":6886,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/04/image-11.png" alt="" class="wp-image-6886"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Once fill out all necessary publish information on Google play console</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":6894,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/04/image-16.png" alt="" class="wp-image-6894"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>And after publishing you APK with billing permission to one of the releases and set tester accordingly</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":6890,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/04/image-15-1024x449.png" alt="" class="wp-image-6890"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Upload the Java Keytool generated upload key to App signing section</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":6896,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/04/image-17-1024x453.png" alt="" class="wp-image-6896"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>You should now be able to validate purchase with brainCloud.</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Confirming the purchase Client Side</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>After making a purchase client side, GooglePlay will&nbsp;return a receipt with an orderId, productId, and purchaseToken that is used by the&nbsp;<a href="/apidocs/apiref/#capi-product-confirmgoogleplaypurchase">VerifyPurchase</a> API call.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>If your using Unity's IAP Service, your code may look like this</li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">public PurchaseProcessingResult ProcessPurchase(PurchaseEventArgs args)
    {
        var responseDictionary = 
            (Dictionary&lt;string, object>)JsonReader.Deserialize(args.purchasedProduct.receipt);
        var  receiptDataDictionary = 
            (Dictionary&lt;string, object>)responseDictionary["receiptData"];
        
        var payloadJson = (string)receiptDataDictionary["Payload"];
            
        var payloadDictionary = 
            (Dictionary&lt;string, object>)JsonReader.Deserialize(payloadJson);
            
            
        string innerPayloadJson = (string)payloadDictionary["json"];
            
        var innerPayloadDictionary = 
            (Dictionary&lt;string, object>)JsonReader.Deserialize(innerPayloadJson);
            
        //brainCloud Expects a token, rather then purchaseToken. We convert that now
        innerPayloadDictionary["token"] = innerPayloadDictionary["purchaseToken"];


        var storeId = "googlePlay";
        var contentJson = JsonWriter.Serialize(innerPayloadDictionary);

          
        bc.AppStoreService.VerifyPurchase(storeId, contentJson,
            (response1, cbObject1) =>
            {
                //Award Purchased Item
                if (string.Equals(args.purchasedProduct.definition.id, "currency_cashpack_500",
                    StringComparison.Ordinal))
                {
                    coins += 500;
                }
                
            }, (status1, code1, error1, cbObject1) =>
            {
                // Handle failed verification
                Debug.Log("Purchase Failed"); 
            }
        );
        
        return PurchaseProcessingResult.Complete;
    }</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:list -->
<ul><li>If  using Google Play Billing Library, your code may look like this:</li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">Java
...
        billingClient = BillingClient.newBuilder(activity).enablePendingPurchases().setListener(this).build();
        billingClient.startConnection(new BillingClientStateListener() {
            @Override
            public void onBillingSetupFinished(BillingResult billingResult) {              
                if (billingResult.getResponseCode() == BillingClient.BillingResponseCode.OK) {
                    // The startConnection() is async methods put query purchases here.
                    List&lt;String> skuList = new ArrayList&lt;>();
                    skuList.add("google_cellphone");
                    skuList.add("google_notebook");
                    SkuDetailsParams.Builder params = SkuDetailsParams.newBuilder();
                    // SkuType.INAPP for one-time products or SkuType.SUBS for subscriptions
                    params.setSkusList(skuList).setType(BillingClient.SkuType.INAPP);
                    billingClient.querySkuDetailsAsync(params.build(),
                        new SkuDetailsResponseListener() {
                            @Override
                            public void onSkuDetailsResponse(BillingResult billingResult,
                                                             List&lt;SkuDetails> skuDetailsList) {
                                // Process the result.
                                if (billingResult.getResponseCode() == BillingClient.BillingResponseCode.OK &amp;&amp; skuDetailsList != null) {
                                    for (final SkuDetails skuDetails : skuDetailsList) {
                                        String sku = skuDetails.getSku();
                                        String price = skuDetails.getPrice();
                                        if ("google_cellphone".equals(sku)) {
                                            priceofproduct1.setText(price);
                                        } else if ("google_notebook".equals(sku)) {
                                            priceofproduct2.setText(price);
                                        } else{
                                            Log.w(TAG, "ttt---no sku price return --"+ sku);
                                        }
//                                        BillingFlowParams flowParams = BillingFlowParams.newBuilder().setSkuDetails(skuDetails).build();
//                                        BillingResult response = billingClient.launchBillingFlow(activity, flowParams);
                                        buyButton.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                BillingFlowParams flowParams = BillingFlowParams.newBuilder().setSkuDetails(skuDetails).build();
                                                billingClient.launchBillingFlow(activity, flowParams);
                                            }
                                        });
                                    }
                                }
                            }
                        }
                    );
                }
            }
            @Override
            public void onBillingServiceDisconnected() {
                // Try to restart the connection on the next request to
                // Google Play by calling the startConnection() method.
                billingClient.startConnection(this);
            }
...

//verify the purchase with brainCloud
@Override
    public void onPurchasesUpdated(BillingResult billingResult, @Nullable List&lt;Purchase> purchases) {
        if (billingResult.getResponseCode() == BillingClient.BillingResponseCode.OK &amp;&amp; purchases != null) {
            for (Purchase purchase : purchases) {
                String storeId = "googlePlay";
                JSONObject receiptData = new JSONObject();
                String productId = purchase.getSku();
                String orderId = purchase.getOrderId();
                String token = purchase.getPurchaseToken();
                String payload = purchase.getDeveloperPayload();
                try {
                    receiptData.put("productId", productId);
                    receiptData.put("orderId", orderId);
                    receiptData.put("token", token);
                    receiptData.put("payload", payload);
                } catch (JSONException e) {
                    e.printStackTrace();
                }
                String receiptDataS = receiptData.toString();
                //verify purchase from brainCloud
                _bcWrapper.getAppStoreService().verifyPurchase(storeId, receiptDataS, this);
            }
        } else if (billingResult.getResponseCode() == BillingClient.BillingResponseCode.USER_CANCELED) {
            // Handle an error caused by a user cancelling the purchase flow.
            Log.w(TAG, "ttt---onPurchasesUpdated--user canceled --");
        } else {
            // Handle any other error codes.
            Log.w(TAG, "ttt---onPurchasesUpdated--other error --");
        }
    }</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2363</wp:post_id>
		<wp:post_date><![CDATA[2015-12-15 14:59:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-15 19:59:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[store-integration-google]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>64</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="console-project-to-the-google"><![CDATA[console project to the google]]></category>
		<category domain="yst_prominent_words" nicename="create-a-new-service-account"><![CDATA[create a new service account]]></category>
		<category domain="yst_prominent_words" nicename="developer-site"><![CDATA[developer site]]></category>
		<category domain="yst_prominent_words" nicename="download-the-p12-key"><![CDATA[download the p12 key]]></category>
		<category domain="yst_prominent_words" nicename="download-the-p12-key-file"><![CDATA[download the p12 key file]]></category>
		<category domain="yst_prominent_words" nicename="google-play"><![CDATA[google play]]></category>
		<category domain="yst_prominent_words" nicename="google-play-developer"><![CDATA[google play developer]]></category>
		<category domain="yst_prominent_words" nicename="google-play-developer-site"><![CDATA[google play developer site]]></category>
		<category domain="yst_prominent_words" nicename="google-play-store"><![CDATA[google play store]]></category>
		<category domain="yst_prominent_words" nicename="google-product-id"><![CDATA[google product id]]></category>
		<category domain="yst_prominent_words" nicename="google-service-account"><![CDATA[google service account]]></category>
		<category domain="yst_prominent_words" nicename="google-service-account-email"><![CDATA[google service account email]]></category>
		<category domain="yst_prominent_words" nicename="log-into-the-google"><![CDATA[log into the google]]></category>
		<category domain="yst_prominent_words" nicename="log-into-the-google-play"><![CDATA[log into the google play]]></category>
		<category domain="yst_prominent_words" nicename="p12-key-file"><![CDATA[p12 key file]]></category>
		<category domain="yst_prominent_words" nicename="play-developer"><![CDATA[play developer]]></category>
		<category domain="yst_prominent_words" nicename="play-developer-site"><![CDATA[play developer site]]></category>
		<category domain="yst_prominent_words" nicename="products-in-the-braincloud-marketplace"><![CDATA[products in the braincloud marketplace]]></category>
		<category domain="yst_prominent_words" nicename="project-to-the-google-play"><![CDATA[project to the google play]]></category>
		<category domain="yst_prominent_words" nicename="service-account"><![CDATA[service account]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Authentication - Google</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/authentication-google/</link>
		<pubDate>Wed, 22 Nov 2017 20:57:42 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=4159</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2 id="AndroidGoogleSetupandAuth(v4)-AppCreation">App Creation</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>Step 1</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Go to the Google Play Console and create your app:<br><a rel="noreferrer noopener" aria-label="https://play.google.com/apps/publish/ (opens in a new tab)" href="https://play.google.com/apps/publish/" target="_blank">https://play.google.com/apps/publish/</a> </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7156,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2021/04/image.png" alt="" class="wp-image-7156"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><em>Fill in the rest of the page as required.</em></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Step 2</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Go to the <strong>Google Cloud Console</strong> (<a href="https://console.cloud.google.com">https://console.cloud.google.com</a>) and select your app from the drop-down at the top of the page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you don't see your app, ensure you're on the All tab, or search for the app's name</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":4213,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2018/01/3.png"><img src="/apidocs/wp-content/uploads/2018/01/3.png" alt="" class="wp-image-4213"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3 id="AndroidGoogleSetupandAuth(v4)-SetupforGooglePlayServices">Step 3</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In the left-hand menu, choose <strong>APIs &amp; Services &gt; Dashboard</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You should see that Google Play Game Services is enabled, along with some other stock services.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":4214,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2018/01/4.png"><img src="/apidocs/wp-content/uploads/2018/01/4-1024x360.png" alt="" class="wp-image-4214"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>If you don't see Google Player Services, click <strong>[ + ENABLE APIS AND SERVICES ]</strong> and enable it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now in the Google Cloud Console Window, under <strong>APIs &amp; Services</strong> choose <strong>Credentials</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Click the <strong>OAuth</strong> Consent tab.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Set the <strong>Application Name</strong></li><li>Set the <strong>Support Email</strong></li><li>Set the Privacy policy URL. You do not have to do this for development, but you will run into problems if you don't add one in production!</li><li>Fill in any other required fields</li><li>Hit <strong>[ Save ]</strong></li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":4215,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2018/01/5.png"><img src="/apidocs/wp-content/uploads/2018/01/5.png" alt="" class="wp-image-4215"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Click the&nbsp;<strong>Credentials</strong> tab</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Click the <strong>[ Create Credentials ]</strong> drop-down, and choose <g class="gr_ gr_96 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Grammar only-ins replaceWithoutSep" id="96" data-gr-id="96">"</g><strong><g class="gr_ gr_96 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Grammar only-ins replaceWithoutSep" id="96" data-gr-id="96">OAuth</g> client ID</strong>" option</li><li>Choose <strong>"Web Application"</strong> as the <strong>Application type</strong></li><li>Give it a name - maybe "brainCloud web access"</li><li>Click <strong>[ Create ]</strong></li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":4216,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2018/01/6.png"><img src="/apidocs/wp-content/uploads/2018/01/6.png" alt="" class="wp-image-4216"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>This will give you a <strong>client Id</strong> and <strong>client secret</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":6081} -->
<figure class="wp-block-image"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/05/2019-05-14_16-14-43.png" alt="" class="wp-image-6081"/></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>Step 4</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Go to your app in the <strong>brainCloud Portal</strong>:&nbsp;<a href="https://portal.braincloudservers.com/">https://portal.braincloudservers.com/</a></li><li>In <strong>Design | Core App Info | Application Ids</strong> &gt; Select the <strong>Google</strong> Tab in "Configure Platforms"</li><li>Enter the <strong>Google Client Id</strong> and the <strong>Google Client Secret</strong>.</li><li>Enter the <strong>Google App Id</strong> (the numbers right before the dash in the Google Client Id)</li><li>Enter the <strong>Google Package Name</strong></li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":4217,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2018/01/7.png"><img src="/apidocs/wp-content/uploads/2018/01/7.png" alt="" class="wp-image-4217"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>Step 5</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Back on the Google Cloud Console "Credentials" tab</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Click <strong>"Create credentials"</strong> &gt; <strong>"Service account key"</strong></li><li>For <strong>Service account</strong>, select "<strong>New Service Account</strong>"</li><li>Give it a <strong>name</strong>, and an "<strong>Owner</strong>" role &lt;- probably <strong>Project | Owner</strong></li><li>For <strong>Key type</strong>, select "P12"</li><li>Click <strong>[ Create ]</strong></li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":4218,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2018/01/8.png"><img src="/apidocs/wp-content/uploads/2018/01/8.png" alt="" class="wp-image-4218"/></a></figure>
<!-- /wp:image -->

<!-- wp:image {"id":6084} -->
<figure class="wp-block-image"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/05/2019-05-14_16-24-03.png" alt="" class="wp-image-6084"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Keep that P12 Key!</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Step 6</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>On that same page...</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Click "<strong>Manage Service Accounts</strong>"</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>You should see your new service account on this page, and have a P12 file saved locally from earlier</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Copy the Service Account <strong>Email</strong> -  eg. &nbsp;"authentication@authencation-69372532.iam.gserviceaccount.com"</li><li>Go back to the brainCloud Portal, <strong>Design | Core App Info | Application Ids</strong> page - <strong>Google Tab</strong> under <em>Configure Platforms</em></li><li>Enter the <strong>Google Service Account Email</strong> that you had copied</li><li>Click "Select a certificate file" and add the saved P12</li><li>Save your changes!</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":4219,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2018/01/9.png"><img src="/apidocs/wp-content/uploads/2018/01/9.png" alt="" class="wp-image-4219"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2 id="AndroidGoogleSetupandAuth(v4)-CreateaKeyStore">Step 7</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Create a key store. View this document to find out how:&nbsp;<a href="https://developer.android.com/studio/publish/app-signing.html">https://developer.android.com/studio/publish/app-signing.html</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now in the Google Cloud Console Window, go to APIs &amp; Services &gt; Credentials</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Click "Create Credentials" &gt; "OAuth client ID"</li><li>Select "Android" as Application type (this will be used to pair your app with Google Play Services!)</li><li>Give it a name</li><li>Enter your SHA1 from your keystore. To get the SHA1, use the listed command on your saved keystore<br>ex. keytool -exportcert -keystore authentication-shared.keystore -list -v</li><li>Enter the package name you defined earlier<br>ex. com.brainCloud.Authenication</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/01/10.png" alt="This image has an empty alt attribute"/></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>Step 8</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Go back to your Google Play Console, link the Google Cloud Project that you created from the above steps.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Click the <strong>[API access] </strong>option from left navigate panel. Click [Link project] and select the one you want to link.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7157,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2021/04/image-1-1024x194.png" alt="" class="wp-image-7157"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>You will see the OAuth clients and Service accounts from selected project are added to API access section.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7158,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2021/04/image-2-1024x352.png" alt="" class="wp-image-7158"/></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2 id="AndroidGoogleSetupandAuth(v4)-EnablingTesters">Enabling Testers</h2>
<!-- /wp:heading -->

<!-- wp:image {"id":7161,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2021/04/image-3-1024x558.png" alt="" class="wp-image-7161"/></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2 id="AndroidGoogleSetupandAuth(v4)-ConfiguringGooglePlayServicesinCode">Configuring Google Play Services in Code</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Get the Unity Package from this GitHub repo, and follow the instructions: <a href="https://github.com/playgameservices/play-games-plugin-for-unity">https://github.com/playgameservices/play-games-plugin-for-unity﻿</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The above link will inform you to create an achievement on the Google Play Console, so you can export a similar XML example to pair the plugin with.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"xml"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="xml" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">&lt;?xml version="1.0" encoding="utf-8"?> &lt;!-- Google Play game services IDs. Save this file as res/values/games-ids.xml in your project. --> &lt;resources> &lt;!-- app_id --> &lt;string name="app_id" translatable="false">1074452757487&lt;/string> &lt;!-- package_name --> &lt;string name="package_name" translatable="false">com.brainCloud.Authentication&lt;/string> &lt;!-- achievement Welcome --> &lt;string name="achievement_welcome" translatable="false">CgkI7_f_0qIfEAIQAw&lt;/string> &lt;/resources></pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>In Unity's Player Settings for Android, you'll need to add the keystore file and package name created earlier.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can see our GitHub&nbsp;Authentication project example for reference.<br><a href="https://github.com/getbraincloud/UnityExamples/tree/master/Authentication">https://github.com/getbraincloud/UnityExamples/tree/master/Authentication</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>Note that because of the&nbsp;Enabling Testers step, you will not be able to authenticate with brainCloud Authenticate example, as is.&nbsp;</em>You will need to alter the current setup for your own test app.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You'll be able to log in via Google Play Services and brainCloud with the following code</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">if (GUILayout.Button("Google Signin + brainCloud Authenticate", GUILayout.ExpandWidth(false)))
            {
                PlayGamesClientConfiguration config = new PlayGamesClientConfiguration.Builder()
                    .RequestIdToken()
                    .RequestServerAuthCode(false)
                    .Build();
                
                PlayGamesPlatform.InitializeInstance (config);
                PlayGamesPlatform.Activate().Authenticate((bool success) => {

                    if (success)
                    {
                        m_googleId = PlayGamesPlatform.Instance.GetUserId();
                        m_serverAuthCode = PlayGamesPlatform.Instance.GetServerAuthCode();    
                        
                        BrainCloudWrapper.GetInstance().AuthenticateGoogle(m_googleId, m_serverAuthCode, true, OnSuccess_Authenticate, OnError_Authenticate);
                    }
                    else
                    {
                       // Handle Error State
                    }
                });
            }</pre>
<!-- /wp:enlighter/codeblock -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4159</wp:post_id>
		<wp:post_date><![CDATA[2017-11-22 15:57:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-22 20:57:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[authentication-google]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>48</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="app"><![CDATA[app]]></category>
		<category domain="yst_prominent_words" nicename="client-id"><![CDATA[client id]]></category>
		<category domain="yst_prominent_words" nicename="cloud-console-window"><![CDATA[cloud console window]]></category>
		<category domain="yst_prominent_words" nicename="configuring-google-play-services"><![CDATA[configuring google play services]]></category>
		<category domain="yst_prominent_words" nicename="core-app-info"><![CDATA[core app info]]></category>
		<category domain="yst_prominent_words" nicename="enter-the-google"><![CDATA[enter the google]]></category>
		<category domain="yst_prominent_words" nicename="game-services-of-the-google"><![CDATA[game services of the google]]></category>
		<category domain="yst_prominent_words" nicename="google-cloud-console"><![CDATA[google cloud console]]></category>
		<category domain="yst_prominent_words" nicename="google-cloud-console-window"><![CDATA[google cloud console window]]></category>
		<category domain="yst_prominent_words" nicename="google-play"><![CDATA[google play]]></category>
		<category domain="yst_prominent_words" nicename="google-play-console"><![CDATA[google play console]]></category>
		<category domain="yst_prominent_words" nicename="google-play-services"><![CDATA[google play services]]></category>
		<category domain="yst_prominent_words" nicename="google-play-services-in-code"><![CDATA[google play services in code]]></category>
		<category domain="yst_prominent_words" nicename="now-in-the-google-cloud"><![CDATA[now in the google cloud]]></category>
		<category domain="yst_prominent_words" nicename="oauth-client-id"><![CDATA[oauth client id]]></category>
		<category domain="yst_prominent_words" nicename="play-console"><![CDATA[play console]]></category>
		<category domain="yst_prominent_words" nicename="play-services-in-code"><![CDATA[play services in code]]></category>
		<category domain="yst_prominent_words" nicename="select-your-app"><![CDATA[select your app]]></category>
		<category domain="yst_prominent_words" nicename="service-account"><![CDATA[service account]]></category>
		<category domain="yst_prominent_words" nicename="services-of-the-google-play"><![CDATA[services of the google play]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_837b7696a00624714ecf8b70a31e200e]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_e97486741cbfc50af7a0f0d8425d1e8a]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_73fb08aa03aa290d83e711cf16761992]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Messaging</title>
		<link>https://staging.getbraincloud.com/apidocs/garbage-bin/messaging/</link>
		<pubDate>Thu, 26 Jul 2018 17:14:26 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=4479</guid>
		<description></description>
		<content:encoded><![CDATA[The messaging service has three sub sections:

&nbsp;

Chat - Chat Configurations

Chat Channels - Creation of Chat Channel Types

Messaging - Messaging Configurations]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4479</wp:post_id>
		<wp:post_date><![CDATA[2018-07-26 13:14:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-26 17:14:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[messaging]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>4800</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Garbage Bin</title>
		<link>https://staging.getbraincloud.com/apidocs/garbage-bin/</link>
		<pubDate>Thu, 24 Jan 2019 16:39:54 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=4800</guid>
		<description></description>
		<content:encoded><![CDATA[A place to put orphaned, draft, private, and forgotten pages.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4800</wp:post_id>
		<wp:post_date><![CDATA[2019-01-24 11:39:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-24 16:39:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[garbage-bin]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>44</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>https://staging.getbraincloud.com/apidocs/4833-2/</link>
		<pubDate>Tue, 12 Feb 2019 20:24:52 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=4833</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:preformatted -->
<pre class="wp-block-preformatted">Test test</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4833</wp:post_id>
		<wp:post_date><![CDATA[2019-02-12 15:24:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-12 20:24:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[4833-2]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Getting Started</title>
		<link>https://staging.getbraincloud.com/apidocs/getting-started/</link>
		<pubDate>Fri, 15 Feb 2019 18:17:06 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5163</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>Before we start</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Before we start, ensure that you've signed up with brainCloud and have logged in. &nbsp;It's free and simple - go to <a href="http://getbraincloud.com">http://getbraincloud.com</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Home Page</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>When you first log in to the portal, you'll arrive at the Team Home Page.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_home.jpg" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_home.jpg" alt="brainCloud Home"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Key components of this page include:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>The list of <strong>Your Apps</strong> (with quick links to jump to them)</li><li>The latest <strong>brainCloud News</strong></li><li>Quick links&nbsp;for common&nbsp;actions - like <strong>Inviting Team Members</strong></li><li>The green <strong>Help</strong> button in the bottom-right hand corner - click to talk to us!</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The <strong>Home Page</strong> is the actually just the main page of the <strong>Administration</strong> section of the portal. You can view the other admin pages by clicking on the appropriate tabs on the left-hand side of the page. &nbsp;You can return to the home page at any time by clicking on the <strong>&lt;Gear&gt;</strong> icon in the top-right-hand corner.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Creating an App</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The first thing you'll want to do is create an app. &nbsp;Doing so is simple - just click the <strong>[+]</strong> button in the corner of the <strong>Your Apps</strong> section, and fill in the dialog.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_newApp.jpg" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_newApp.jpg" alt="brainCloud"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>You can choose whether or not to <em>Enable Game Features</em> - this justs shows and/or hides the gaming features of the design portal - like Achievements, Leaderboards, etc. If your app isn't planning to use these features, you can hide them to keep the portal simpler. Note you can always choose to enable them later.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You'll want to pick at least one <em>Supported Platform</em>. brainCloud's APIs check the platform passed in during authentication - if the platform isn't enabled the authentication will be rejected. So be sure to enable both your development and deployment platforms. <em>[Note - the API Explorer defaults to iOS for Authentication calls. It is&nbsp;convenient&nbsp;during development to enable that platform, even if you don't intend to deploy to it.]</em></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>App Management</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>After creating the app you'll be placed in the <strong>Administration | App Management</strong> page. &nbsp;This is where you view and control the publishing of your apps - see the Actions menu on the right-hand side of your app.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_appsList.jpg" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_appsList.jpg" alt="brainCloud"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>For now, we're just going to move along to the&nbsp;design settings for this app. <em>Click on your app's name in the list.</em></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Design</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The Design section is the heart of the brainCloud Portal - it's where&nbsp;you <em>set up the rules</em> about what your app can do, configure <em>integrations</em> with other services, write custom cloud code scripts, and even <em>test api calls</em> live with the system.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_Dashboard_appIds.jpg" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2016/08/brainCloud_Dashboard_appIds.jpg" alt="brainCloud"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Before we get too far, we should mention the navigation items at the top of the screen.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are four main sections - <em>Team</em>, <em>Design</em>, <em>Monitoring</em>, and <em>Reports</em>.&nbsp;As you switch sections you'll notice that the tabs along the left-hand of the screen update. Note also that most of these tabs are expandable to detailed sub-tabs.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can also quickly change the currently selected game via the combo box.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For now, let's go back to Design - we're going to try a very simple test of our game.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>API Explorer</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The API explorer is a central&nbsp;feature of the brainCloud Portal. You can use it to:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Explore how the API is laid out (in terms of services and operations)</li><li>Test new APIs before implementing them in your app</li><li>Confirm the json response format of API calls</li><li>Debug user support scenarios</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_apiExpl.jpg" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_apiExpl.jpg" alt="brainCloud"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>As a simple test, we'll try authenticating with brainCloud. You always have to authenticate with brainCloud before you perform any other operations.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The brainCloud API is organized into Services and Operations. &nbsp;First choose the <strong>Service</strong> (in this case <em>Authenticate</em>) and then the <strong>Operation</strong> (in this case, also <em>Authenticate</em>). You can customize the parameters sent into the API call in the <strong>Parameters</strong> text box.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As you can see, the default Authenticate command will simulate and e-mail based authentication from an iOS device, and is using the developer's e-mail address as the account. Note that <em>&lt;forceCreate&gt;</em> is set to true, which means that the user account will be created if it doesn't already exist.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>These defaults seem fine - click the&nbsp;green <strong>&lt;Run&gt;</strong> button (the play symbol) to send the API call to&nbsp;the brainCloud server. You should see the <em>API Request</em> echoed to the <strong>Log</strong> window, followed by brainCloud's <em>Response</em> a second later.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now that you're logged in (<em>authenticated</em>), you can try additional API calls at your leisure.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And that's it - you've created your first app and logged in. Congrats!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>[P.S. Check your e-mail. brainCloud automatically sends a&nbsp;message to&nbsp;validate the e-mail address provided during account creation. You can customize this functionality in the <strong>Design | Core App Info | Advanced Settings</strong> page of the portal.]</em></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5163</wp:post_id>
		<wp:post_date><![CDATA[2019-02-15 13:17:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-15 18:17:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[getting-started]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>23</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="api"><![CDATA[api]]></category>
		<category domain="yst_prominent_words" nicename="api-call"><![CDATA[api call]]></category>
		<category domain="yst_prominent_words" nicename="api-calls"><![CDATA[api calls]]></category>
		<category domain="yst_prominent_words" nicename="api-explorer"><![CDATA[api explorer]]></category>
		<category domain="yst_prominent_words" nicename="app"><![CDATA[app]]></category>
		<category domain="yst_prominent_words" nicename="app-management"><![CDATA[app management]]></category>
		<category domain="yst_prominent_words" nicename="authenticate"><![CDATA[authenticate]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-portal"><![CDATA[braincloud portal]]></category>
		<category domain="yst_prominent_words" nicename="click"><![CDATA[click]]></category>
		<category domain="yst_prominent_words" nicename="design"><![CDATA[design]]></category>
		<category domain="yst_prominent_words" nicename="home"><![CDATA[home]]></category>
		<category domain="yst_prominent_words" nicename="home-page"><![CDATA[home page]]></category>
		<category domain="yst_prominent_words" nicename="logged"><![CDATA[logged]]></category>
		<category domain="yst_prominent_words" nicename="page"><![CDATA[page]]></category>
		<category domain="yst_prominent_words" nicename="portal"><![CDATA[portal]]></category>
		<category domain="yst_prominent_words" nicename="quick-links"><![CDATA[quick links]]></category>
		<category domain="yst_prominent_words" nicename="services-and-operations"><![CDATA[services and operations]]></category>
		<category domain="yst_prominent_words" nicename="simple-test"><![CDATA[simple test]]></category>
		<category domain="yst_prominent_words" nicename="test"><![CDATA[test]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Gamification</title>
		<link>https://staging.getbraincloud.com/apidocs/getting-started/gamification/</link>
		<pubDate>Fri, 15 Feb 2019 18:19:40 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5165</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><strong>Quick Jump</strong></p>
<!-- /wp:paragraph -->

<!-- wp:shortcode -->
[su_subpages depth="1" p="" class=""]
<!-- /wp:shortcode -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5165</wp:post_id>
		<wp:post_date><![CDATA[2019-02-15 13:19:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-15 18:19:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[gamification]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>5163</wp:post_parent>
		<wp:menu_order>-1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Achievements</title>
		<link>https://staging.getbraincloud.com/apidocs/getting-started/gamification/achievements/</link>
		<pubDate>Fri, 15 Feb 2019 19:58:43 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5172</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Reward your players with [su_tooltip style="blue" position="north" shadow="yes" close="no" behavior="hover" content="Accolades awarded to your users for accomplishments they made by using your app."]<em>Achievements</em>[/su_tooltip].</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Achievements can be triggered directly from the client via API calls or can be awarded automatically by the server by configuring Milestones and Level Up rewards.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":5229,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/02/image-2.png" alt="" class="wp-image-5229"/><figcaption>Achievements used in the <a href="https://staging.getbraincloud.com/apidocs/tutorials/unity-tutorials/braincloud-bombers-example-game/">brainCloud Bombers</a> Unity example.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>To create an achievement, go to the Achievements page on the [su_tooltip style="blue" position="north" shadow="yes" close="no" behavior="hover" content=" The web dashboard where you set up and configure your app details on brainCloud."]<strong><a href="https://portal.braincloudservers.com/admin/dashboard?custom=null#/development/gamification-achievements"><em>dashboard</em></a></strong>[/su_tooltip].</p>
<!-- /wp:paragraph -->

<!-- wp:spacer {"height":50} -->
<div style="height:50px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:image {"id":5217,"align":"right","width":356,"height":411} -->
<div class="wp-block-image"><figure class="alignright is-resized"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/02/image-1.png" alt="" class="wp-image-5217" width="356" height="411"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><strong>On the Achievements page</strong></p>
<!-- /wp:paragraph -->

<!-- wp:spacer {"height":20} -->
<div style="height:20px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:list -->
<ul><li>Click the <strong>[Add Item]&nbsp;</strong>button with the plus icon.</li><li>Enter an [su_tooltip style="blue" position="north" shadow="yes" close="no" behavior="hover" content="A unique text identification for the achievement. ex. achievement_001"]<em>achievementId</em>[/su_tooltip], title, and description.</li><li>Upload a picture for your achievement.</li><li>Choose if achievement is [su_tooltip style="blue" position="north" shadow="yes" close="no" behavior="hover" content="Used if you want to keep some spoiler related achievement hidden from your users, or to surprise them with some unexpected accomplishments."]<em>invisible until earned</em>[/su_tooltip]. </li><li>Add [su_tooltip style="blue" position="north" shadow="yes" close="no" behavior="hover" content="Extra data is given as JSON when calling the achievement via your app. ex. {'my' : 'data'}"]<em>extra data</em>[/su_tooltip] that is needed by your app.</li><li>Select which platforms the achievement is enabled for. <ul><li>For each platform your supporting, you need to add the matching <g class="gr_ gr_12 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace" id="12" data-gr-id="12">achievementId</g> you will find on the dashboard of those platforms. </li></ul></li><li><strong>[Save]</strong> your new achievement!</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:spacer {"height":200} -->
<div style="height:200px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:image {"id":5250,"align":"right","width":350,"height":237} -->
<div class="wp-block-image"><figure class="alignright is-resized"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/02/image-4.png" alt="" class="wp-image-5250" width="350" height="237"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Create as many achievements as your app requires.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can review the JSON return on the achievements by clicking on the <strong>[Raw JSON Data]</strong> button.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Achievements can be edited and deleted with the <strong>[Edit]</strong> and <strong>[Delete]</strong> buttons respectively to the right of each created achievement.</p>
<!-- /wp:paragraph -->

<!-- wp:spacer {"height":200} -->
<div style="height:200px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:paragraph -->
<p><strong>Code below</strong></p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:spacer {"height":20} -->
<div style="height:20px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:paragraph -->
<p><br>Now that you created achievements, you will want to reward them to your players.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>In your client code</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Add the <g class="gr_ gr_63 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace" id="63" data-gr-id="63">brainCloud</g>&nbsp;client to your app</li><li>Pair the client with the dashboard</li><li>Authenticate your user into <g class="gr_ gr_383 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace" id="383" data-gr-id="383">brainCloud</g></li><li>Request a list of achievements with the ReadAchievements&nbsp;call</li><li>Award the achievements with the AwardAchievements&nbsp;call</li><li>Review other achievement related calls for your app in the <a href="https://staging.getbraincloud.com/apidocs/apiref/?csharp#capi-gamification-awardachievements">API Reference</a></li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">using UnityEngine;

public class BCConfig : MonoBehaviour {

    private BrainCloudWrapper _bc;

    public BrainCloudWrapper GetBrainCloud()
    {
        return _bc;
    }   

    void Awake ()
    {
        DontDestroyOnLoad(gameObject);
        _bc = gameObject.AddComponent&lt;BrainCloudWrapper>();

        _bc.WrapperName = gameObject.name;    // Optional: Set a wrapper name
        _bc.Init();      // Init data is taken from the brainCloud Unity Plugin     

bool includeMetaData = false;
SuccessCallback successCallback = (response, cbObject) =>
{
    Debug.Log(string.Format("Success | {0}", response));
};
FailureCallback failureCallback = (status, code, error, cbObject) =>
{
    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));
};

_bc.GamificationService.ReadAchievements(includeMetaData, successCallback, failureCallback);

string[] achievements = { "EGG_ACH09", "EGG_ACH10" };
SuccessCallback successCallback = (response, cbObject) =>
{
    Debug.Log(string.Format("Success | {0}", response));
};
FailureCallback failureCallback = (status, code, error, cbObject) =>
{
    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));
};

_bc.GamificationService.AwardAchievements(achievements, successCallback, failureCallback);

    }
}
</pre>
<!-- /wp:enlighter/codeblock -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5172</wp:post_id>
		<wp:post_date><![CDATA[2019-02-15 14:58:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-15 19:58:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[achievements]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>5165</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="achievementid"><![CDATA[achievementid]]></category>
		<category domain="yst_prominent_words" nicename="achievements-page"><![CDATA[achievements page]]></category>
		<category domain="yst_prominent_words" nicename="api"><![CDATA[api]]></category>
		<category domain="yst_prominent_words" nicename="app"><![CDATA[app]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="button"><![CDATA[button]]></category>
		<category domain="yst_prominent_words" nicename="call"><![CDATA[call]]></category>
		<category domain="yst_prominent_words" nicename="calls"><![CDATA[calls]]></category>
		<category domain="yst_prominent_words" nicename="client"><![CDATA[client]]></category>
		<category domain="yst_prominent_words" nicename="code"><![CDATA[code]]></category>
		<category domain="yst_prominent_words" nicename="create"><![CDATA[create]]></category>
		<category domain="yst_prominent_words" nicename="created"><![CDATA[created]]></category>
		<category domain="yst_prominent_words" nicename="dashboard"><![CDATA[dashboard]]></category>
		<category domain="yst_prominent_words" nicename="page"><![CDATA[page]]></category>
		<category domain="yst_prominent_words" nicename="platforms"><![CDATA[platforms]]></category>
		<category domain="yst_prominent_words" nicename="players"><![CDATA[players]]></category>
		<category domain="yst_prominent_words" nicename="review"><![CDATA[review]]></category>
		<category domain="yst_prominent_words" nicename="reward"><![CDATA[reward]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Milestones</title>
		<link>https://staging.getbraincloud.com/apidocs/getting-started/gamification/milestones/</link>
		<pubDate>Fri, 15 Feb 2019 21:19:26 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5173</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Reward your players with [su_tooltip style="blue" position="north" shadow="yes" close="no" behavior="hover" content="Goal posts your users reach from culimative activity in your app."]<em>Milestones</em>[/su_tooltip].</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Milestones are automatically completed by users of your app reaching a certain stat or level threshold.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":5337,"align":"right","width":350,"height":629} -->
<div class="wp-block-image"><figure class="alignright is-resized"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/02/image-5.png" alt="" class="wp-image-5337" width="350" height="629"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><strong>On the Milestones page</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Click the <strong>[Add Item]</strong> button with the plus icon.</li><li> Enter a category, title, and description.</li><li>Add extra data that is needed by your app.</li><li>Enter the unlock thresholds required.</li><li>Enter the completion threshold required.</li><li>Add rewards that are given after the milestone is completed.</li><li> [Save] your new achievement!</li></ul>
<!-- /wp:list -->

<!-- wp:list -->
<ul><li></li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5173</wp:post_id>
		<wp:post_date><![CDATA[2019-02-15 16:19:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-15 21:19:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[milestones]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>5165</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="app"><![CDATA[app]]></category>
		<category domain="yst_prominent_words" nicename="completed"><![CDATA[completed]]></category>
		<category domain="yst_prominent_words" nicename="enter"><![CDATA[enter]]></category>
		<category domain="yst_prominent_words" nicename="milestones"><![CDATA[milestones]]></category>
		<category domain="yst_prominent_words" nicename="required"><![CDATA[required]]></category>
		<category domain="yst_prominent_words" nicename="threshold"><![CDATA[threshold]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Statistics Rules</title>
		<link>https://staging.getbraincloud.com/apidocs/getting-started/statistics-rules/</link>
		<pubDate>Tue, 19 Feb 2019 18:43:13 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5357</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><strong>Quick Jump</strong></p>
<!-- /wp:paragraph -->

<!-- wp:shortcode -->
[su_subpages depth="1" p="" class=""]
<!-- /wp:shortcode -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5357</wp:post_id>
		<wp:post_date><![CDATA[2019-02-19 13:43:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-19 18:43:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[statistics-rules]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>5163</wp:post_parent>
		<wp:menu_order>11</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Global Statistics</title>
		<link>https://staging.getbraincloud.com/apidocs/getting-started/statistics-rules/global-statistics/</link>
		<pubDate>Tue, 19 Feb 2019 18:55:44 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5380</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Statistics that are global to your app.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Can be used to track sales, the number of total users completing certain tasks, global milestones, etc.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":5430,"align":"right","width":430,"height":319} -->
<div class="wp-block-image"><figure class="alignright is-resized"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/02/image-7.png" alt="" class="wp-image-5430" width="430" height="319"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><strong>On the Global Statistics page</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Click the <strong>[Add Item]</strong> button with the plus icon.</li><li>Enter a name, type, category, and description.</li><li>Set the min value, max value, and the initial value.</li><li><strong>[Save]</strong> your new global stat!</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5380</wp:post_id>
		<wp:post_date><![CDATA[2019-02-19 13:55:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-19 18:55:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[global-statistics]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>5357</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="global"><![CDATA[global]]></category>
		<category domain="yst_prominent_words" nicename="statistics"><![CDATA[statistics]]></category>
		<category domain="yst_prominent_words" nicename="value"><![CDATA[value]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Core App Info</title>
		<link>https://staging.getbraincloud.com/apidocs/getting-started/core-app-info/</link>
		<pubDate>Tue, 26 Feb 2019 19:01:29 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5467</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><strong>Quick Jump</strong></p>
<!-- /wp:paragraph -->

<!-- wp:shortcode -->
[su_subpages depth="1" p="" class=""]
<!-- /wp:shortcode -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5467</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:01:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-26 19:01:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[core-app-info]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>5163</wp:post_parent>
		<wp:menu_order>-9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Authentication</title>
		<link>https://staging.getbraincloud.com/apidocs/getting-started/authentication/</link>
		<pubDate>Tue, 26 Feb 2019 19:01:38 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5468</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><strong>Quick Jump</strong></p>
<!-- /wp:paragraph -->

<!-- wp:shortcode -->
[su_subpages depth="1" p="" class=""]
<!-- /wp:shortcode -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5468</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:01:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-26 19:01:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[authentication]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>5163</wp:post_parent>
		<wp:menu_order>-8</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Cloud Code</title>
		<link>https://staging.getbraincloud.com/apidocs/getting-started/cloud-code/</link>
		<pubDate>Tue, 26 Feb 2019 18:59:41 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5469</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5469</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 13:59:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-26 18:59:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cloud-code]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>5163</wp:post_parent>
		<wp:menu_order>-7</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Custom Config</title>
		<link>https://staging.getbraincloud.com/apidocs/getting-started/custom-config/</link>
		<pubDate>Tue, 26 Feb 2019 19:01:44 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5470</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><strong>Quick Jump</strong></p>
<!-- /wp:paragraph -->

<!-- wp:shortcode -->
[su_subpages depth="1" p="" class=""]
<!-- /wp:shortcode -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5470</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:01:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-26 19:01:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[custom-config]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>5163</wp:post_parent>
		<wp:menu_order>-6</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Intergrations</title>
		<link>https://staging.getbraincloud.com/apidocs/getting-started/intergrations/</link>
		<pubDate>Tue, 26 Feb 2019 19:01:58 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5474</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><strong>Quick Jump</strong></p>
<!-- /wp:paragraph -->

<!-- wp:shortcode -->
[su_subpages depth="1" p="" class=""]
<!-- /wp:shortcode -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5474</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:01:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-26 19:01:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[intergrations]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>5163</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Leaderboards</title>
		<link>https://staging.getbraincloud.com/apidocs/getting-started/leaderboards/</link>
		<pubDate>Tue, 26 Feb 2019 19:02:05 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5475</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><strong>Quick Jump</strong></p>
<!-- /wp:paragraph -->

<!-- wp:shortcode -->
[su_subpages depth="1" p="" class=""]
<!-- /wp:shortcode -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5475</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:02:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-26 19:02:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[leaderboards]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>5163</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Marketplace</title>
		<link>https://staging.getbraincloud.com/apidocs/getting-started/marketplace/</link>
		<pubDate>Tue, 26 Feb 2019 19:02:11 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5476</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><strong>Quick Jump</strong></p>
<!-- /wp:paragraph -->

<!-- wp:shortcode -->
[su_subpages depth="1" p="" class=""]
<!-- /wp:shortcode -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5476</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:02:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-26 19:02:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[marketplace]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>5163</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Messaging</title>
		<link>https://staging.getbraincloud.com/apidocs/getting-started/messaging/</link>
		<pubDate>Sat, 23 Feb 2019 18:46:30 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5477</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><strong>Quick Jump</strong></p>
<!-- /wp:paragraph -->

<!-- wp:shortcode -->
[su_subpages depth="1" p="" class=""]
<!-- /wp:shortcode -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5477</wp:post_id>
		<wp:post_date><![CDATA[2019-02-23 13:46:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-23 18:46:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[messaging]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>5163</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Multiplayer</title>
		<link>https://staging.getbraincloud.com/apidocs/getting-started/multiplayer/</link>
		<pubDate>Tue, 26 Feb 2019 19:02:19 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5478</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><strong>Quick Jump</strong></p>
<!-- /wp:paragraph -->

<!-- wp:shortcode -->
[su_subpages depth="1" p="" class=""]
<!-- /wp:shortcode -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5478</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:02:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-26 19:02:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[multiplayer]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>5163</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Notifications</title>
		<link>https://staging.getbraincloud.com/apidocs/getting-started/notifications/</link>
		<pubDate>Tue, 26 Feb 2019 19:02:27 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5479</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><strong>Quick Jump</strong></p>
<!-- /wp:paragraph -->

<!-- wp:shortcode -->
[su_subpages depth="1" p="" class=""]
<!-- /wp:shortcode -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5479</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:02:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-26 19:02:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[notifications]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>5163</wp:post_parent>
		<wp:menu_order>6</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Promotions</title>
		<link>https://staging.getbraincloud.com/apidocs/getting-started/promotions/</link>
		<pubDate>Tue, 26 Feb 2019 19:02:35 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5480</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><strong>Quick Jump</strong></p>
<!-- /wp:paragraph -->

<!-- wp:shortcode -->
[su_subpages depth="1" p="" class=""]
<!-- /wp:shortcode -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5480</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:02:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-26 19:02:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[promotions]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>5163</wp:post_parent>
		<wp:menu_order>7</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Segmentation</title>
		<link>https://staging.getbraincloud.com/apidocs/getting-started/segmentation/</link>
		<pubDate>Tue, 26 Feb 2019 19:02:41 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5481</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><strong>Quick Jump</strong></p>
<!-- /wp:paragraph -->

<!-- wp:shortcode -->
[su_subpages depth="1" p="" class=""]
<!-- /wp:shortcode -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5481</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:02:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-26 19:02:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[segmentation]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>5163</wp:post_parent>
		<wp:menu_order>8</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Groups</title>
		<link>https://staging.getbraincloud.com/apidocs/getting-started/groups/</link>
		<pubDate>Tue, 26 Feb 2019 19:01:52 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5497</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><strong>Quick Jump</strong></p>
<!-- /wp:paragraph -->

<!-- wp:shortcode -->
[su_subpages depth="1" p="" class=""]
<!-- /wp:shortcode -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5497</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 14:01:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-26 19:01:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[groups]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>5163</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Presence</title>
		<link>https://staging.getbraincloud.com/apidocs/getting-started/messaging/presence/</link>
		<pubDate>Sat, 23 Feb 2019 20:10:56 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5542</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Online Presence allows an app's users to know which of their friends are currently online, what they are doing, and whether they are available to interact. </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":5641,"align":"center","className":"add-border"} -->
<div class="wp-block-image add-border"><figure class="aligncenter"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/02/image-10.png" alt="" class="wp-image-5641"/><figcaption>Presence activity of friends on the Main Menu of the brainCloud Bombers</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:image {"id":5559,"align":"right","className":"add-border"} -->
<div class="wp-block-image add-border"><figure class="alignright"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/02/image-8.png" alt="" class="wp-image-5559"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>To enable Presence, you must first enable <a href="/apidocs/introduction-2/braincloud-rtt/">RTT </a>on the <strong>Design | Core App Info | Advanced Settings</strong> page. Check <strong>Real-time Tech (RTT) Enabled</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After enabling RTT for your app, go to the Presence Config page on the [su_tooltip style="blue" position="north" shadow="yes" close="no" behavior="hover" content=" The web dashboard where you set up and configure your app details on brainCloud."]<strong><em><a href="https://portal.braincloudservers.com/admin/dashboard?custom=null#/development/gamification-achievements">dashboard</a></em></strong>[/su_tooltip].</p>
<!-- /wp:paragraph -->

<!-- wp:spacer -->
<div style="height:100px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:spacer {"height":50} -->
<div style="height:50px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:image {"id":5647,"align":"right","width":372,"height":285,"className":"add-border"} -->
<div class="wp-block-image add-border"><figure class="alignright is-resized"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/02/image-11.png" alt="" class="wp-image-5647" width="372" height="285"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><strong>On the Presence page</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:spacer {"height":20} -->
<div style="height:20px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:list -->
<ul><li>Check <strong>Enable Presence</strong>.<ul><li>As mentioned above. Must first enable RTT.</li></ul></li><li>Check whether your app uses Allow invisibility and Support rich activity. </li><li>Enter the supported Max content size (bytes).</li><li>Check whether your app uses Real-time Tech (RTT) updates.</li><li><strong>[Save]</strong> the changes to your Presence Config!</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:spacer {"height":200} -->
<div style="height:200px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:spacer {"height":200} -->
<div style="height:200px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:paragraph -->
<p><strong>Code below</strong></p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:spacer {"height":20} -->
<div style="height:20px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:paragraph -->
<p><br>Now that you activated Presence, you will want to use it in your app.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>In your client code</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Add the <g class="gr_ gr_63 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace" id="63" data-gr-id="63">brainCloud</g>&nbsp;client to your app</li><li>Pair the client with the dashboard</li><li>Authenticate your user into <g class="gr_ gr_383 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace" id="383" data-gr-id="383">brainCloud</g></li><li>Request a list of achievements with the ReadAchievements&nbsp;call</li><li>Award the achievements with the AwardAchievements&nbsp;call</li><li>Review other achievement related calls for your app in the <a href="https://staging.getbraincloud.com/apidocs/apiref/?csharp#capi-gamification-awardachievements">API Reference</a></li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">using UnityEngine;

public class BCConfig : MonoBehaviour {

    private BrainCloudWrapper _bc;

    public BrainCloudWrapper GetBrainCloud()
    {
        return _bc;
    }   

    void Awake ()
    {
        DontDestroyOnLoad(gameObject);
        _bc = gameObject.AddComponent&lt;BrainCloudWrapper>();

        _bc.WrapperName = gameObject.name;    // Optional: Set a wrapper name
        _bc.Init();      // Init data is taken from the brainCloud Unity Plugin     

bool includeMetaData = false;
SuccessCallback successCallback = (response, cbObject) =>
{
    Debug.Log(string.Format("Success | {0}", response));
};
FailureCallback failureCallback = (status, code, error, cbObject) =>
{
    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));
};

_bc.GamificationService.ReadAchievements(includeMetaData, successCallback, failureCallback);

string[] achievements = { "EGG_ACH09", "EGG_ACH10" };
SuccessCallback successCallback = (response, cbObject) =>
{
    Debug.Log(string.Format("Success | {0}", response));
};
FailureCallback failureCallback = (status, code, error, cbObject) =>
{
    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));
};

_bc.GamificationService.AwardAchievements(achievements, successCallback, failureCallback);

    }
}
</pre>
<!-- /wp:enlighter/codeblock -->

<p><!--EndFragment--></p>
<p></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5542</wp:post_id>
		<wp:post_date><![CDATA[2019-02-23 15:10:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-23 20:10:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[presence]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>5477</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="activity"><![CDATA[activity]]></category>
		<category domain="yst_prominent_words" nicename="app"><![CDATA[app]]></category>
		<category domain="yst_prominent_words" nicename="app-uses"><![CDATA[app uses]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="check"><![CDATA[check]]></category>
		<category domain="yst_prominent_words" nicename="client"><![CDATA[client]]></category>
		<category domain="yst_prominent_words" nicename="enable"><![CDATA[enable]]></category>
		<category domain="yst_prominent_words" nicename="enable-presence"><![CDATA[enable presence]]></category>
		<category domain="yst_prominent_words" nicename="enable-rtt"><![CDATA[enable rtt]]></category>
		<category domain="yst_prominent_words" nicename="first-enable"><![CDATA[first enable]]></category>
		<category domain="yst_prominent_words" nicename="first-enable-rtt"><![CDATA[first enable rtt]]></category>
		<category domain="yst_prominent_words" nicename="friends"><![CDATA[friends]]></category>
		<category domain="yst_prominent_words" nicename="online"><![CDATA[online]]></category>
		<category domain="yst_prominent_words" nicename="page"><![CDATA[page]]></category>
		<category domain="yst_prominent_words" nicename="presence"><![CDATA[presence]]></category>
		<category domain="yst_prominent_words" nicename="presence-config"><![CDATA[presence config]]></category>
		<category domain="yst_prominent_words" nicename="real-time-tech"><![CDATA[real-time tech]]></category>
		<category domain="yst_prominent_words" nicename="real-time-tech-rtt"><![CDATA[real-time tech rtt]]></category>
		<category domain="yst_prominent_words" nicename="rtt"><![CDATA[rtt]]></category>
		<category domain="yst_prominent_words" nicename="tech-rtt"><![CDATA[tech rtt]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>API Explorer</title>
		<link>https://staging.getbraincloud.com/apidocs/getting-started/cloud-code/api-explorer/</link>
		<pubDate>Tue, 26 Feb 2019 20:42:33 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5588</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>When getting started with brainCloud, the API Explorer is one of the best pages to start on. It allows you to run API calls as if your a user using your app, without having to write any code!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The API Explorer simulates a client application talking to the brainCloud servers. So you will be able to test the various APIs and confirm their behaviors and JSON return formats.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":5731,"className":"add-border"} -->
<figure class="wp-block-image add-border"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/02/image-17.png" alt="" class="wp-image-5731"/><figcaption><em>Using the API reference to run various API calls on brainCloud.</em></figcaption></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>To get started, find the API Explorer on the [su_tooltip style="blue" position="north" shadow="yes" close="no" behavior="hover" content=" The web dashboard where you set up and configure your app details on brainCloud."]<a href="https://portal.braincloudservers.com/admin/dashboard#/development/serverscripts-apitest"><em><strong>dashboard</strong></em></a>[/su_tooltip].</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The first call you are going to run on on your App is the <a href="https://staging.getbraincloud.com/apidocs/apiref/#wrapper-initialize">Initialize</a> call, to pair your app client with your app on brainCloud. Since your already in the context of your app from your dashboard, you need to perform the next step you user would, Authentication.</p>
<!-- /wp:paragraph -->

<!-- wp:spacer {"height":20} -->
<div style="height:20px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:image {"id":5719,"align":"right","className":"add-border"} -->
<div class="wp-block-image add-border"><figure class="alignright"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/02/image-16.png" alt="" class="wp-image-5719"/></figure></div>
<!-- /wp:image -->

<!-- wp:heading {"level":4} -->
<h4>API Explorer</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Choose the Service and Operation you wish to run. As mentioned earlier, you will always start with the <strong>Authenticate </strong>service and the <strong>Authenticate </strong>operation to first create a session. Click <strong>[Run]</strong> to authenticate</li><li>After you Authenticate, the Profile ID and Session ID values will be filled in with the user's profileId and sessionId values connected to that authentication.</li><li>The [su_tooltip style="blue" position=<g class="gr_ gr_9 gr-alert gr_gramm gr_inline_cards gr_run_anim Style replaceWithoutSep" id="9" data-gr-id="9">"north</g>" shadow="yes" close="no" behavior="hover" content="If you have the need to disable your app to fix a critical bug, you can use this check to give yourself access to API calls via the API Explorer."]<strong><em>Bypass App Enabled check</em></strong>[/su_tooltip] will allow you to continue to run API calls should you have disabled your app on the <strong>Design | Core App Info | Advanced Settings</strong> page.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":5757,"align":"left","className":"add-border"} -->
<div class="wp-block-image add-border"><figure class="alignleft"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/02/image-19.png" alt="" class="wp-image-5757"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>For each selected Operation, you will see a <strong>description</strong> of what the service does, along with an API Reference link.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Below that are the parameters the API call takes. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Wow! Authentication takes a lot of parameters. Don't worry, if you clicked on that <strong>View API</strong> link seen in the description, you will see in your client code, the API calls are much more streamlined and cleaned up. This authentication call in the API explorer shows what the raw server takes.</p>
<!-- /wp:paragraph -->

<!-- wp:spacer -->
<div style="height:100px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:image {"id":5686,"align":"center","width":667,"height":301,"className":"add-border"} -->
<div class="wp-block-image add-border"><figure class="aligncenter is-resized"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/02/image-13.png" alt="" class="wp-image-5686" width="667" height="301"/><figcaption><em>Screen capture from the API Reference, where the Authenticate call only takes three parameters.</em><br></figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p><em>Did you know? You can click on the link in the Profile Id to go directly to the user monitoring page for that user.</em></p></blockquote>
<!-- /wp:quote -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:spacer {"height":50,"className":"add-border"} -->
<div style="height:50px" aria-hidden="true" class="wp-block-spacer add-border"></div>
<!-- /wp:spacer -->

<!-- wp:heading {"level":4} -->
<h4>After Authentication</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Okay, your are authenticated.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Go to the <strong>Entity </strong>service and <strong>CreateEntity</strong> operation, which will allow you to create data objects connected to the current user profile.</li><li>Change the <strong>entityType</strong> parameter value to <strong>myEntityType</strong>. Example:</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":5799,"align":"right","width":298,"height":433,"className":"add-border"} -->
<div class="wp-block-image add-border"><figure class="alignright is-resized"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/02/image-22.png" alt="" class="wp-image-5799" width="298" height="433"/><figcaption><em> JSON response of running GetEntitiesByType</em></figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
  "entityType": "myEntityType",
  "data": {
    "street": "1309 Carling"
  },
  "acl": {
    "other": 0
  }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:list -->
<ul><li> Now click <strong>[Run]</strong>!</li><li>After running, you will see the JSON response from the server on the right of the screen of the object you just created. Click run a few more times to create additional objects.</li><li>Now change the operation to <strong>GetEntitiesByType</strong>, and change the entityType parameter to <g class="gr_ gr_13 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace" id="13" data-gr-id="13">myEntityType</g>. Run it again.</li><li>See all the entities you made now appear in a list? Copy one of the <strong><g class="gr_ gr_16 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace" id="16" data-gr-id="16">entityId</g> </strong>values, and change the operation to <strong>DeleteEntity</strong></li><li>Enter your copied entity id as the <g class="gr_ gr_17 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace" id="17" data-gr-id="17">entityId</g> value in parameters, and run it one final time. </li></ul>
<!-- /wp:list -->

<!-- wp:spacer {"height":60} -->
<div style="height:60px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>You authenticated as a user, created several entities, queried them from the server, and deleted one! </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Try other aspects of the API Explorer to try out the API. Reference these docs and the API reference to gain additional understanding on how to use each service and oepration!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5588</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 15:42:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-26 20:42:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[api-explorer]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>5469</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="api-calls"><![CDATA[api calls]]></category>
		<category domain="yst_prominent_words" nicename="api-explorer"><![CDATA[api explorer]]></category>
		<category domain="yst_prominent_words" nicename="api-reference"><![CDATA[api reference]]></category>
		<category domain="yst_prominent_words" nicename="app"><![CDATA[app]]></category>
		<category domain="yst_prominent_words" nicename="authentication"><![CDATA[authentication]]></category>
		<category domain="yst_prominent_words" nicename="call"><![CDATA[call]]></category>
		<category domain="yst_prominent_words" nicename="change-the-entitytype"><![CDATA[change the entitytype]]></category>
		<category domain="yst_prominent_words" nicename="change-the-entitytype-parameter"><![CDATA[change the entitytype parameter]]></category>
		<category domain="yst_prominent_words" nicename="change-the-operation"><![CDATA[change the operation]]></category>
		<category domain="yst_prominent_words" nicename="entitytype-parameter"><![CDATA[entitytype parameter]]></category>
		<category domain="yst_prominent_words" nicename="explorer"><![CDATA[explorer]]></category>
		<category domain="yst_prominent_words" nicename="json-response"><![CDATA[json response]]></category>
		<category domain="yst_prominent_words" nicename="operation"><![CDATA[operation]]></category>
		<category domain="yst_prominent_words" nicename="profile-id"><![CDATA[profile id]]></category>
		<category domain="yst_prominent_words" nicename="reference"><![CDATA[reference]]></category>
		<category domain="yst_prominent_words" nicename="run"><![CDATA[run]]></category>
		<category domain="yst_prominent_words" nicename="run-api"><![CDATA[run api]]></category>
		<category domain="yst_prominent_words" nicename="run-api-calls"><![CDATA[run api calls]]></category>
		<category domain="yst_prominent_words" nicename="service"><![CDATA[service]]></category>
		<category domain="yst_prominent_words" nicename="user"><![CDATA[user]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Application IDs</title>
		<link>https://staging.getbraincloud.com/apidocs/getting-started/core-app-info/application-ids/</link>
		<pubDate>Thu, 28 Feb 2019 18:09:51 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5596</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Key application identifiers. These identifiers are used when connecting your <strong>client</strong> to brainCloud, or for allowing brainCloud to connect to other <strong>third-party services.</strong> </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Without these identifiers, you will not be able to pair your client app to your app on brainCloud. Be sure to keep your app identifications a secret</p>
<!-- /wp:paragraph -->

<!-- wp:spacer {"height":10} -->
<div style="height:10px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:image {"id":5829,"align":"center","className":"add-border"} -->
<div class="wp-block-image add-border"><figure class="aligncenter"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/02/image-24.png" alt="" class="wp-image-5829"/><figcaption><em>Example of using the brainCloud plugin in Unity to automatically connect your appId and appSecret to your code base</em></figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:spacer {"height":40} -->
<div style="height:40px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:paragraph -->
<p>To see and edit your application ids, go to the Application IDs page on the [su_tooltip style="blue" position="north" shadow="yes" close="no" behavior="hover" content=" The web dashboard where you set up and configure your app details on brainCloud."]<a href="https://portal.braincloudservers.com/admin/dashboard?custom=null#/development/core-settings-information">dashboard</a>[/su_tooltip].</p>
<!-- /wp:paragraph -->

<!-- wp:spacer {"height":20} -->
<div style="height:20px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:image {"id":5828,"align":"right","width":458,"height":191} -->
<div class="wp-block-image"><figure class="alignright is-resized"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/02/image-23.png" alt="" class="wp-image-5828" width="458" height="191"/></figure></div>
<!-- /wp:image -->

<!-- wp:heading {"level":4} -->
<h4>Pairing your app's identifiers</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Your <strong>App Id</strong> is your app's unique identification on brainCloud. No other app shares your app id, and it cannot be changed</li><li>For your <strong>App Name</strong>, you can enter whatever value desired. Your customers will not see this value, so you could name one app "MyApp [Dev]" and another as "MyApp [Live],"  to denote the [su_tooltip style="blue" position="north" shadow="yes" close="no" behavior="hover" content="No one likes to break live code. It's recommended to keep a development version of your app on release, to test new features and changes in a 'safe to break' environment."]<em><strong>production and internal</strong></em>[/su_tooltip] versions of your apps.</li><li>Similar to your app name, your app's image is an internal picture that can be whatever you like to help represent your app on brainCloud. The example screenshot uses a brainCloud logo as the picture.</li><li>Your <strong>App Secret</strong> is used to ensure the connecting being made to brainCloud belongs to your app.</li><li>The <strong>Show Game Design Features</strong> controls whether gamification features like Achievements and Leaderboards show up on the brainCloud UI. You can uncheck this box to help clean up the UI, and re-enable the box should you decided to add these features at a later date.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If your app secret is ever leaked, it can be refreshed with the [<strong>Regenerate App Secret</strong>] button. Please note you must click <strong>[Save Changes]</strong> for the new secret to be saved.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Accidentally saved over your current app secret? You can enter a copy of your old secret into the App Secret box, and save your old secret. You can change your secret to any text value, however, a secure GUID, like the ones generated by the <strong>[Regenerate App Secret]</strong> button, is highly recommended. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When using features that require brainCloud to pair with other dashboard, you will have to enter those platforms associated idenitifiers in the Configure Platform section.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":5852,"align":"center","className":"add-border"} -->
<div class="wp-block-image add-border"><figure class="aligncenter"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/02/image-25.png" alt="" class="wp-image-5852"/></figure></div>
<!-- /wp:image -->

<!-- wp:spacer -->
<div style="height:100px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:paragraph -->
<p><strong>Code below</strong></p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:spacer {"height":20} -->
<div style="height:20px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:paragraph -->
<p>Now that you have access to your ids, let's pair your app with brainCloud.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">string serverUrl = "https://sharedprod.braincloudservers.com/dispatcherv2";
string secret = "1234-1234-1234-1234";
string appId = "123456";
string version = "1.0.0";

_bc.Init(serverUrl, secret, appId, version);</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>That's it, your app is paired with brainCloud by using your app id and secret. See the <a href="/apidocs/apiref/#wrapper-initialize">Initialize</a> method in the API Reference for additional information and examples of other programming languages. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>If you are using the brainCloud Unity plugin, you only need to call _bc.Init(). The app id and app secret will be auto-filled from the plugin.  See further instruction on </em><a href="https://github.com/getbraincloud/braincloud-csharp/blob/master/README.md"><em>GitHub</em></a></p>
<!-- /wp:paragraph -->

<!-- wp:spacer {"height":200} -->
<div style="height:200px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5596</wp:post_id>
		<wp:post_date><![CDATA[2019-02-28 13:09:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-28 18:09:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[application-ids]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>5467</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="app-id"><![CDATA[app id]]></category>
		<category domain="yst_prominent_words" nicename="app-name"><![CDATA[app name]]></category>
		<category domain="yst_prominent_words" nicename="app-on-braincloud"><![CDATA[app on braincloud]]></category>
		<category domain="yst_prominent_words" nicename="app-secret"><![CDATA[app secret]]></category>
		<category domain="yst_prominent_words" nicename="application"><![CDATA[application]]></category>
		<category domain="yst_prominent_words" nicename="application-ids"><![CDATA[application ids]]></category>
		<category domain="yst_prominent_words" nicename="box"><![CDATA[box]]></category>
		<category domain="yst_prominent_words" nicename="enter"><![CDATA[enter]]></category>
		<category domain="yst_prominent_words" nicename="features"><![CDATA[features]]></category>
		<category domain="yst_prominent_words" nicename="id"><![CDATA[id]]></category>
		<category domain="yst_prominent_words" nicename="identifiers"><![CDATA[identifiers]]></category>
		<category domain="yst_prominent_words" nicename="ids"><![CDATA[ids]]></category>
		<category domain="yst_prominent_words" nicename="name"><![CDATA[name]]></category>
		<category domain="yst_prominent_words" nicename="old-secret"><![CDATA[old secret]]></category>
		<category domain="yst_prominent_words" nicename="pair"><![CDATA[pair]]></category>
		<category domain="yst_prominent_words" nicename="plugin"><![CDATA[plugin]]></category>
		<category domain="yst_prominent_words" nicename="secret"><![CDATA[secret]]></category>
		<category domain="yst_prominent_words" nicename="see"><![CDATA[see]]></category>
		<category domain="yst_prominent_words" nicename="using-the-braincloud"><![CDATA[using the braincloud]]></category>
		<category domain="yst_prominent_words" nicename="value"><![CDATA[value]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Platforms</title>
		<link>https://staging.getbraincloud.com/apidocs/getting-started/core-app-info/platforms/</link>
		<pubDate>Thu, 28 Feb 2019 19:47:02 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5597</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Need to temporarily disable connection to iOS users while a critical bug is fixed? Need to ensure everyone updates to the new major 3.0 patch to prevent older versions from corrupting current data? </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Then this page is for you. You <em>choose</em> which platforms your app supports and which versions of your app from these settings. </p>
<!-- /wp:paragraph -->

<!-- wp:spacer {"height":10} -->
<div style="height:10px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:image {"id":5890,"align":"center","className":"add-border"} -->
<div class="wp-block-image add-border"><figure class="aligncenter"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/02/image-26.png" alt="" class="wp-image-5890"/><figcaption><em>Example of an apps possible platform settings</em></figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:spacer {"height":40} -->
<div style="height:40px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:image {"id":5902,"align":"right","width":401,"height":214,"className":"add-border"} -->
<div class="wp-block-image add-border"><figure class="alignright is-resized"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/02/image-27.png" alt="" class="wp-image-5902" width="401" height="214"/></figure></div>
<!-- /wp:image -->

<!-- wp:heading {"level":4} -->
<h4>Configuring your app platforms</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>To control which platform that can make API calls against your app, simply check each <strong>Supported</strong> platform.</li><li>When forcing a minimum version for your app, click the [<strong>Edit] </strong>button for a supported platform and enter the <strong>Minimum Version </strong>and the [su_tooltip style="blue" content="Depending on what your environment supports, you could attach plain-text instructions to display, automatically update your app based on a download link to the new version."]<strong><em>Application Upgrade Data</em></strong>[/su_tooltip]. </li><li>Now, whenever one of your customers makes a call brainCloud from your app, they will be safely blocked and your app will handle the updating.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p> Note that depending on your app, you may never need to continuously force users to update. If you do not need to do so, you will not be using the minimum version feature. If making a multiplayer game, you will most likely need to use this feature at some point.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:spacer -->
<div style="height:100px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:paragraph -->
<p><strong>Code below</strong></p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>You are now blocking certain customers from using your app based on their platform. You need to handle informing them to update to the latest version.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The response from the server from an invalid platform would look like so:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
  "status_message": "Processing exception (message): App version 1.5.0 for appId 12328 is obsolete.",
  "reason_code": 40322,
  "upgradeAppId": "Your version of MyApp is out of date. Please update the app from the Apple Store to try out the new features!",
  "status": 400
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Here is an example of parsing that JSON after an authentication.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">_bc.AuthenticateUniversal(username, password, forceCreate, OnSuccess_Authenticate,
 (status, code, error, cbObject) => {

  if (code == ReasonCodes.GAME_VERSION_NOT_SUPPORTED) {
   Dictionary&lt;string,object> jsonError = (Dictionary&lt;string,object>) JsonFx.Json.JsonReader.Deserialize(error);
   string status_message = jsonError["status_message"].ToString();
   Debug.Log(status_message);
   string upgradeAppId = jsonError["upgradeAppId"].ToString();

   //TODO: Handle informing the user that they need to upgrade their app. 
   //Such as via a popup, or automatically handling the new version download.
   Debug.Log(upgradeAppId);
  }
 });</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>You will need to handle this error case in the way your app requires.</p>
<!-- /wp:paragraph -->

<!-- wp:spacer {"height":200} -->
<div style="height:200px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5597</wp:post_id>
		<wp:post_date><![CDATA[2019-02-28 14:47:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-28 19:47:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[platforms]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>5467</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="customers"><![CDATA[customers]]></category>
		<category domain="yst_prominent_words" nicename="data"><![CDATA[data]]></category>
		<category domain="yst_prominent_words" nicename="example"><![CDATA[example]]></category>
		<category domain="yst_prominent_words" nicename="feature"><![CDATA[feature]]></category>
		<category domain="yst_prominent_words" nicename="handle"><![CDATA[handle]]></category>
		<category domain="yst_prominent_words" nicename="minimum"><![CDATA[minimum]]></category>
		<category domain="yst_prominent_words" nicename="minimum-version"><![CDATA[minimum version]]></category>
		<category domain="yst_prominent_words" nicename="platform"><![CDATA[platform]]></category>
		<category domain="yst_prominent_words" nicename="platforms"><![CDATA[platforms]]></category>
		<category domain="yst_prominent_words" nicename="settings"><![CDATA[settings]]></category>
		<category domain="yst_prominent_words" nicename="supported"><![CDATA[supported]]></category>
		<category domain="yst_prominent_words" nicename="supported-platform"><![CDATA[supported platform]]></category>
		<category domain="yst_prominent_words" nicename="update"><![CDATA[update]]></category>
		<category domain="yst_prominent_words" nicename="users"><![CDATA[users]]></category>
		<category domain="yst_prominent_words" nicename="version"><![CDATA[version]]></category>
		<category domain="yst_prominent_words" nicename="versions"><![CDATA[versions]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Advanced Settings</title>
		<link>https://staging.getbraincloud.com/apidocs/getting-started/core-app-info/advanced-settings/</link>
		<pubDate>Thu, 28 Feb 2019 23:13:46 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=5598</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Various miscellaneous settings for your brainCloud app can be set in Advance Settings.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>These settings control key aspects of brainCloud behavior. Be careful with them! </p>
<!-- /wp:paragraph -->

<!-- wp:spacer {"height":10} -->
<div style="height:10px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:image {"id":5974,"align":"center","className":"add-border"} -->
<div class="wp-block-image add-border"><figure class="aligncenter"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/02/image-31.png" alt="" class="wp-image-5974"/></figure></div>
<!-- /wp:image -->

<!-- wp:spacer {"height":40} -->
<div style="height:40px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":4} -->
<h4>Choosing Core App Settings</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><g class="gr_ gr_9 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace" id="9" data-gr-id="9">App Enabled</g><ul><li>Disabling your app will prevent your users from making API calls. <em>You can still access your app from the dashboard and making API call and configuration edits. </em> </li><li>Use this option if you have outstanding reasons to disable your app, such as taking your app down for temporary maintenance.</li><li>The disabled reason will be returned as JSON when your customers try to access your app.  </li></ul></li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group=""> {
  "status_message": "Processing exception (bundle): App is disabled.",
  "reason_code": 40330,
  "severity": "ERROR",
  "disabledReason": {
    "message": "MyApp is disabled for maintence from 6:00-8:00 UTC. Please return later."
  },
  "status": 403
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Generate User Statistic Rule Enabled and Generate App Statistic Rule Enabled<ul><li>These two toggles will allow if new statistics can be created via API calls. If you wish for statistics to only be manually created via the dashboard in the <strong><a href="https://portal.braincloudservers.com/admin/dashboard#/development/stats-player">Design | Statistic Rules</a></strong> section, keep these toggles disabled </li></ul></li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":5968,"align":"center","className":"add-border"} -->
<div class="wp-block-image add-border"><figure class="aligncenter"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/02/image-30.png" alt="" class="wp-image-5968"/><figcaption><em>Will you only create your stats on the dashboard? If so, keep this toggle off to lock down how stats can be made</em></figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Disable Live Lock (not recommended)<ul><li>The Live Lock will prevent your development team from making accidental changes in the app unless they have the permission levels to unlock the Live Lock to make their changes. <em>Click on the Live Lock banner to temporary disable the lock. </em></li><li>Disable this option with caution</li></ul></li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":5963,"align":"center","className":"add-border"} -->
<div class="wp-block-image add-border"><figure class="aligncenter"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/02/image-29.png" alt="" class="wp-image-5963"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Real-time Tech (RTT) Enabled <ul><li>This toggle controls whether or not RTT is enabled in your app. </li><li>The RTT features have a unique pricing model, find out more in the <a href="http://help.getbraincloud.com/general-questions/how-does-rtt-pricing-work">"How does RTT pricing work?"</a> help article.</li></ul></li></ul>
<!-- /wp:list -->

<!-- wp:spacer {"height":40} -->
<div style="height:40px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:heading {"level":4} -->
<h4>Your App's Compatibility Settings</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Serval features have been added and modified to brainCloud over the course of its development, and we continue to grow to the service. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Our development team prides itself on not breaking reliant apps by one of these changes. We recommend and encourage developers to keep up to date on our latest libraries, however, we will create Compatibility flag for any breaking change, and automatically grandfather in existing apps to keep using the old features. Your development team can update at there own pace.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To understand what each compatibility flag does, find more on our <a href="/apidocs/api-modules/compatibility-settings/">Compatibility Settings</a> page. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First time creating an app on brainCloud? Then none of these Compatibility Settings will be relevant to your current app, but know your current app will be secure in future changes :)</p>
<!-- /wp:paragraph -->

<!-- wp:spacer {"height":20} -->
<div style="height:20px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:image {"id":5982,"align":"right","className":"add-border"} -->
<div class="wp-block-image add-border"><figure class="alignright"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/02/image-32.png" alt="" class="wp-image-5982"/><figcaption><br></figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:heading {"level":4} -->
<h4>Session Behavior </h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Use <strong>Session Timeout</strong> to control how long it takes for your users to timeout of brainCloud. Your app will keep the brainCloud session alive as long as the user is playing your app, however, if the customer were to disable your app, the session timeout limit would then apply. <em>For example, they would have 20 minutes to return to your app before they would have to reauthenticate their session. If applicable, you could decrease the session timeout to reduce to risk of someone who is not your user from using their profile.  </em></li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
  "status_message": "Session expiry exception (bundle): user session has expired: 9htmpnjs1fo7ujfdhq4bu5o2t6",
  "reason_code": 40303,
  "severity": "WARNING",
  "status": 403
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:list -->
<ul><li>The <strong>Maximum Concurrent Sessions per Player</strong> controls how many sessions a user can create at the same time. The older sessions will be invalidated for the newer sessions. <em>If you are making a game, you will probably want to limit one session per user to prevent cheating. However, if you are making an app, you may not see any reason to limit how many copies of your app your consumer could be running.</em> </li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{  
   "status_message":"Processing exception (bundle): User session logged out by other login",
   "reason_code":40356,
   "severity":"ERROR",
   "status":403
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:spacer {"height":200} -->
<div style="height:200px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5598</wp:post_id>
		<wp:post_date><![CDATA[2019-02-28 18:13:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-28 23:13:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[advanced-settings]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>5467</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="access-your-app"><![CDATA[access your app]]></category>
		<category domain="yst_prominent_words" nicename="api-calls"><![CDATA[api calls]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="compatibility-flag"><![CDATA[compatibility flag]]></category>
		<category domain="yst_prominent_words" nicename="compatibility-settings"><![CDATA[compatibility settings]]></category>
		<category domain="yst_prominent_words" nicename="current-app"><![CDATA[current app]]></category>
		<category domain="yst_prominent_words" nicename="development-team"><![CDATA[development team]]></category>
		<category domain="yst_prominent_words" nicename="disable"><![CDATA[disable]]></category>
		<category domain="yst_prominent_words" nicename="disable-your-app"><![CDATA[disable your app]]></category>
		<category domain="yst_prominent_words" nicename="enabled"><![CDATA[enabled]]></category>
		<category domain="yst_prominent_words" nicename="live-lock"><![CDATA[live lock]]></category>
		<category domain="yst_prominent_words" nicename="lock"><![CDATA[lock]]></category>
		<category domain="yst_prominent_words" nicename="making-api"><![CDATA[making api]]></category>
		<category domain="yst_prominent_words" nicename="rule-enabled"><![CDATA[rule enabled]]></category>
		<category domain="yst_prominent_words" nicename="session"><![CDATA[session]]></category>
		<category domain="yst_prominent_words" nicename="session-timeout"><![CDATA[session timeout]]></category>
		<category domain="yst_prominent_words" nicename="settings"><![CDATA[settings]]></category>
		<category domain="yst_prominent_words" nicename="statistic-rule"><![CDATA[statistic rule]]></category>
		<category domain="yst_prominent_words" nicename="statistic-rule-enabled"><![CDATA[statistic rule enabled]]></category>
		<category domain="yst_prominent_words" nicename="user"><![CDATA[user]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Profiles and Identity</title>
		<link>https://staging.getbraincloud.com/apidocs/introduction-2/profiles-and-identity/</link>
		<pubDate>Mon, 08 Sep 2014 18:12:51 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://braincloudapidocs.local/?page_id=6</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>A cloud-service such as brainCloud is only as flexible as it’s identity system – and brainCloud is very flexible indeed. &nbsp;brainCloud separates the concepts of a User’s&nbsp;<em>Profile</em>&nbsp;from their&nbsp;<em>Identity</em><strong> User Profile&nbsp;</strong><em>(also known as&nbsp;<strong>Player Profile</strong>)</em></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Contains all the information about the user and their state/progress in the app or game</li><li>Includes statistics, entities, attributes, virtual currency balances, the state of milestones, quests, achievements, etc.</li><li>Is local to an App/Game –&nbsp;not&nbsp;shared across games in brainCloud*</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><em>* See details on our <a href="/apidocs/api-modules/authentication/shared-accounts/">Shared Accounts</a> service for ways to share a single user identity across multiple apps.</em><strong> </strong><strong>User Identity</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Is used to identify a user in the system, and look up their Profile</li><li>Maybe unauthenticated (anonymous) or authenticated (GameCenter id, Facebook id, E-mail, etc.)</li><li>A player will often have multiple identities associated with their User Profile – just as in real life, your data may be associated with your driver's license, health number, phone number, etc.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>brainCloud currently supports the following identity types:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Anonymous</li><li>E-mail – e-mail address + password</li><li>Facebook id – facebook identity</li><li>Twitter id – twitter identity</li><li>Google Play – Google identity</li><li>GameCenter id – iOS GameCenter identity</li><li>Steam id – steam identity</li><li>Universal – userid + password &lt;- convenient during development</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>In addition to the above, brainCloud now supports two advanced forms of authentication:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="/apidocs/api-modules/authentication/external-authentication/">External Authentication</a>&nbsp;– allows you to authenticate your users using an external (custom) directory service</li><li><a href="/apidocs/api-modules/authentication/shared-accounts/">Shared Accounts</a>&nbsp;– allows user accounts to be shared across brainCloud apps</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>For more information, refer to the&nbsp;<strong><a href="/apidocs/api-modules/authentication/">Authentication API</a></strong>&nbsp;docs.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date><![CDATA[2014-09-08 14:12:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-08 18:12:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[profiles-and-identity]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>73</wp:post_parent>
		<wp:menu_order>13</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="accounts"><![CDATA[accounts]]></category>
		<category domain="yst_prominent_words" nicename="authentication"><![CDATA[authentication]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="e-mail"><![CDATA[e-mail]]></category>
		<category domain="yst_prominent_words" nicename="facebook"><![CDATA[facebook]]></category>
		<category domain="yst_prominent_words" nicename="facebook-id"><![CDATA[facebook id]]></category>
		<category domain="yst_prominent_words" nicename="flexible"><![CDATA[flexible]]></category>
		<category domain="yst_prominent_words" nicename="gamecenter"><![CDATA[gamecenter]]></category>
		<category domain="yst_prominent_words" nicename="gamecenter-id"><![CDATA[gamecenter id]]></category>
		<category domain="yst_prominent_words" nicename="id"><![CDATA[id]]></category>
		<category domain="yst_prominent_words" nicename="id-facebook"><![CDATA[id facebook]]></category>
		<category domain="yst_prominent_words" nicename="information"><![CDATA[information]]></category>
		<category domain="yst_prominent_words" nicename="player"><![CDATA[player]]></category>
		<category domain="yst_prominent_words" nicename="profile"><![CDATA[profile]]></category>
		<category domain="yst_prominent_words" nicename="shared"><![CDATA[shared]]></category>
		<category domain="yst_prominent_words" nicename="shared-accounts"><![CDATA[shared accounts]]></category>
		<category domain="yst_prominent_words" nicename="system"><![CDATA[system]]></category>
		<category domain="yst_prominent_words" nicename="user"><![CDATA[user]]></category>
		<category domain="yst_prominent_words" nicename="user-identity"><![CDATA[user identity]]></category>
		<category domain="yst_prominent_words" nicename="user-profile"><![CDATA[user profile]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Cloud Data</title>
		<link>https://staging.getbraincloud.com/apidocs/introduction-2/cloud-data/</link>
		<pubDate>Mon, 08 Sep 2014 18:14:46 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://braincloudapidocs.local/?page_id=8</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>brainCloud provides very robust and specialized APIs for dealing with cloud data.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In regard to User (Player) data, brainCloud provides the following mechanisms:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>User [Player] Statistics</strong> - advanced API for managing numeric stats on the server.  Statistics are defined ahead-of-time on the server and are concurrency-safe.  User statistics are a key building block for brainCloud's Gamification features, and therefore developers are encouraged to take advantage of the facility where appropriate</li><li><strong>User Entities</strong> - entities are used to store more complex (i.e. json) objects on the server. The brainCloud API has been optimized to allow retrieval of all entities via a single read operation, with support for a continuous stream of incremental updates.</li><li><strong>User Attributes</strong> - brainCloud also provides support for free-form attributes (key+value pairs).  Attributes are useful for simple, less rigid data - and can be used to simplify the creation of complex user segments (for promotions targeting)</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><em>Note - brainCloud's Gamification feature provides direct support for player XP, player XP level, achievements, etc - so you do not need to model these concepts directly in your cloud data.</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>brainCloud also provides support for <strong>Global</strong> data elements:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Global Statistics</strong> - similar to user statistics, but with global scope - global statistics are useful for managing key metrics across your player population</li><li><strong>Global Entities</strong> - like User Entities, except global in scope.  Global Entities support ACL for permissions.  Global Entities can also be written with a TTL (time to live) attribute so that they automatically delete themselves after a given time period.</li><li><strong>Global Properties</strong> - finally, brainCloud supports Global Properties (key+value pairs) which are very handy as global tuning parameters for your app or game (especially since they're directly editable via the design portal).</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><em>Note that brainCloud's Design Portal provides support for viewing (and in some&nbsp;cases editing) all User and Global data.</em></p>
<!-- /wp:paragraph -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_userStatsMonitoring.jpg"><img src="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_userStatsMonitoring.jpg" alt="brainCloud Portal"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>For a more detailed&nbsp;overview of brainCloud's Cloud Data features, see the introductory section of the <a href="https://staging.getbraincloud.com/apidocs/api-modules/data/">Cloud Data APIs</a>.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>8</wp:post_id>
		<wp:post_date><![CDATA[2014-09-08 14:14:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-08 18:14:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cloud-data]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>73</wp:post_parent>
		<wp:menu_order>14</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-provides"><![CDATA[braincloud provides]]></category>
		<category domain="yst_prominent_words" nicename="brainclouds-gamification"><![CDATA[braincloud's gamification]]></category>
		<category domain="yst_prominent_words" nicename="cloud-data"><![CDATA[cloud data]]></category>
		<category domain="yst_prominent_words" nicename="data"><![CDATA[data]]></category>
		<category domain="yst_prominent_words" nicename="design-portal"><![CDATA[design portal]]></category>
		<category domain="yst_prominent_words" nicename="entities"><![CDATA[entities]]></category>
		<category domain="yst_prominent_words" nicename="global-data"><![CDATA[global data]]></category>
		<category domain="yst_prominent_words" nicename="global-entities"><![CDATA[global entities]]></category>
		<category domain="yst_prominent_words" nicename="global-properties"><![CDATA[global properties]]></category>
		<category domain="yst_prominent_words" nicename="global-statistics"><![CDATA[global statistics]]></category>
		<category domain="yst_prominent_words" nicename="keyvalue-pairs"><![CDATA[key+value pairs]]></category>
		<category domain="yst_prominent_words" nicename="player-xp"><![CDATA[player xp]]></category>
		<category domain="yst_prominent_words" nicename="provides"><![CDATA[provides]]></category>
		<category domain="yst_prominent_words" nicename="provides-support"><![CDATA[provides support]]></category>
		<category domain="yst_prominent_words" nicename="statistics"><![CDATA[statistics]]></category>
		<category domain="yst_prominent_words" nicename="support"><![CDATA[support]]></category>
		<category domain="yst_prominent_words" nicename="user"><![CDATA[user]]></category>
		<category domain="yst_prominent_words" nicename="user-entities"><![CDATA[user entities]]></category>
		<category domain="yst_prominent_words" nicename="user-statistics"><![CDATA[user statistics]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[page-templates/codesamples.php]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Gamification</title>
		<link>https://staging.getbraincloud.com/apidocs/introduction-2/gamification/</link>
		<pubDate>Mon, 08 Sep 2014 18:17:41 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://braincloudapidocs.local/?page_id=10</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>brainCloud has been specifically designed to support <em>Games</em> and <em>Gamified apps</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To facilitate this, brainCloud provides built-in support for common gaming mechanisms, including:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Player XP</strong> and <strong>XP Levels</strong> - brainCloud can directly manage player XP and XP levels, and automatically reward stats, achievements and even virtual currency when a player "level's up"</li><li><strong>Achievements </strong>- brainCloud supports an unlimited number of achievements, and these achievements can be linked to native platform achievements so that they trigger automatically</li><li><strong>Milestones</strong> - milestones are configured to trigger when certain User [Player] Stat levels are achieved.  Milestones can be configured to reward other statistics, virtual currencies, XP and/or achievements.</li><li><strong>Quests</strong> - quests are essentially multi-part milestones, with their own rewards</li><li><strong>Stats Events</strong> - essentially server-side macros that expand into individual stats commands. Useful for creating an abstraction between the triggering of events in code (done by the developer) and their impact on the metagame of the app (controlled by the designer in the portal)</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_achiev.jpg"><img src="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_achiev.jpg" alt="brainCloud Gamification Features"/></a></figure>
<!-- /wp:image -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date><![CDATA[2014-09-08 14:17:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-08 18:17:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gamification]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>73</wp:post_parent>
		<wp:menu_order>15</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="achievements"><![CDATA[achievements]]></category>
		<category domain="yst_prominent_words" nicename="automatically"><![CDATA[automatically]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="configured"><![CDATA[configured]]></category>
		<category domain="yst_prominent_words" nicename="levels"><![CDATA[levels]]></category>
		<category domain="yst_prominent_words" nicename="milestones"><![CDATA[milestones]]></category>
		<category domain="yst_prominent_words" nicename="player"><![CDATA[player]]></category>
		<category domain="yst_prominent_words" nicename="player-xp"><![CDATA[player xp]]></category>
		<category domain="yst_prominent_words" nicename="player-xp-and-xp"><![CDATA[player xp and xp]]></category>
		<category domain="yst_prominent_words" nicename="player-xp-and-xp-levels"><![CDATA[player xp and xp levels]]></category>
		<category domain="yst_prominent_words" nicename="quests"><![CDATA[quests]]></category>
		<category domain="yst_prominent_words" nicename="reward"><![CDATA[reward]]></category>
		<category domain="yst_prominent_words" nicename="stats"><![CDATA[stats]]></category>
		<category domain="yst_prominent_words" nicename="support"><![CDATA[support]]></category>
		<category domain="yst_prominent_words" nicename="trigger"><![CDATA[trigger]]></category>
		<category domain="yst_prominent_words" nicename="virtual"><![CDATA[virtual]]></category>
		<category domain="yst_prominent_words" nicename="xp"><![CDATA[xp]]></category>
		<category domain="yst_prominent_words" nicename="xp-and-xp"><![CDATA[xp and xp]]></category>
		<category domain="yst_prominent_words" nicename="xp-and-xp-levels"><![CDATA[xp and xp levels]]></category>
		<category domain="yst_prominent_words" nicename="xp-levels"><![CDATA[xp levels]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Multiplayer</title>
		<link>https://staging.getbraincloud.com/apidocs/introduction-2/multiplayer/</link>
		<pubDate>Mon, 08 Sep 2014 18:18:01 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://braincloudapidocs.local/?page_id=12</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>Mobile Multiplayer</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>brainCloud provides <em>built-in</em> support for mobile-friendly, non-realtime multiplayer.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Full APIs for the following multiplayer types are provided:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Turn-by-Turn Async</strong> - made popular by games like Words with Friends, Draw Something, etc.</li><li><strong>One-way Offline</strong> - made popular by games like Clash of Clans, Boom Beach, etc.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>brainCloud also provides customizable <em>offline matchmaking</em> support (perfect for the above multiplayer options).</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Online Multiplayer via RTT</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>brainCloud RTT adds support for <em>Online Matchmaking</em> and <em>Lobbies,</em>&nbsp;and the development of custom <em>Room Experiences</em> to meet the needs for today's most competitive online experiences.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For more information, see the&nbsp;<a href="https://staging.getbraincloud.com/apidocs/api-modules/multiplayer/lobbies/">Lobby Concepts</a> page.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Third Party Multiplayer</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Finally, brainCloud famously plays nicely with third-party real-time multiplayer SDKs, such as Photon, Unity, Steam, Unreal and more.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For more information:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="/apidocs/apiref/#capi-asyncmatch">Turn-by-Turn Async API</a></li><li><a href="/apidocs/apiref/#capi-oneway">One-way Offline API</a></li><li><a href="/apidocs/apiref/#capi-matchmaking">Matchmaking API</a></li><li><a href="https://staging.getbraincloud.com/apidocs/apiref/#capi-lobby">Lobby API</a></li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date><![CDATA[2014-09-08 14:18:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-08 18:18:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[multiplayer]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>73</wp:post_parent>
		<wp:menu_order>16</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="api"><![CDATA[api]]></category>
		<category domain="yst_prominent_words" nicename="async"><![CDATA[async]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="experiences"><![CDATA[experiences]]></category>
		<category domain="yst_prominent_words" nicename="games"><![CDATA[games]]></category>
		<category domain="yst_prominent_words" nicename="information"><![CDATA[information]]></category>
		<category domain="yst_prominent_words" nicename="lobby"><![CDATA[lobby]]></category>
		<category domain="yst_prominent_words" nicename="matchmaking"><![CDATA[matchmaking]]></category>
		<category domain="yst_prominent_words" nicename="multiplayer"><![CDATA[multiplayer]]></category>
		<category domain="yst_prominent_words" nicename="offline"><![CDATA[offline]]></category>
		<category domain="yst_prominent_words" nicename="one-way"><![CDATA[one-way]]></category>
		<category domain="yst_prominent_words" nicename="one-way-offline"><![CDATA[one-way offline]]></category>
		<category domain="yst_prominent_words" nicename="online"><![CDATA[online]]></category>
		<category domain="yst_prominent_words" nicename="popular"><![CDATA[popular]]></category>
		<category domain="yst_prominent_words" nicename="popular-by-games"><![CDATA[popular by games]]></category>
		<category domain="yst_prominent_words" nicename="provides"><![CDATA[provides]]></category>
		<category domain="yst_prominent_words" nicename="rtt"><![CDATA[rtt]]></category>
		<category domain="yst_prominent_words" nicename="support"><![CDATA[support]]></category>
		<category domain="yst_prominent_words" nicename="turn-by-turn"><![CDATA[turn-by-turn]]></category>
		<category domain="yst_prominent_words" nicename="turn-by-turn-async"><![CDATA[turn-by-turn async]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Currency and Payments</title>
		<link>https://staging.getbraincloud.com/apidocs/introduction-2/currency-and-payments/</link>
		<pubDate>Mon, 08 Sep 2014 18:18:21 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://braincloudapidocs.local/?page_id=14</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>brainCloud provides rich support for Free-to-Play Monetization, including:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Virtual Currencies</strong> - games (apps) can be configured with an unlimited number of virtual currencies</li><li><strong>Products</strong> - brainCloud can be used to define the virtual currency bundles that are purchasable via IAP</li><li><strong>Pricing</strong> - brainCloud supports multiple price-points per product, with linkages to the pricing entries in the various platform app stores. This allows for pricing across all platforms to be centrally controlled and changed with a "click".</li><li><strong>Promotions</strong> - brainCloud also provides a robust Promotions API, which can allow product management to dynamically apply promotion pricing according to established schedules or via advanced targeting of player segments</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_product.jpg" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_product.jpg" alt="brainCloud"/></a></figure>
<!-- /wp:image -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date><![CDATA[2014-09-08 14:18:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-08 18:18:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[currency-and-payments]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>73</wp:post_parent>
		<wp:menu_order>17</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="currencies"><![CDATA[currencies]]></category>
		<category domain="yst_prominent_words" nicename="pricing"><![CDATA[pricing]]></category>
		<category domain="yst_prominent_words" nicename="product"><![CDATA[product]]></category>
		<category domain="yst_prominent_words" nicename="promotions"><![CDATA[promotions]]></category>
		<category domain="yst_prominent_words" nicename="provides"><![CDATA[provides]]></category>
		<category domain="yst_prominent_words" nicename="virtual"><![CDATA[virtual]]></category>
		<category domain="yst_prominent_words" nicename="virtual-currencies"><![CDATA[virtual currencies]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Leaderboards and Tournaments</title>
		<link>https://staging.getbraincloud.com/apidocs/introduction-2/leaderboards-and-tournaments/</link>
		<pubDate>Mon, 08 Sep 2014 18:18:40 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://braincloudapidocs.local/?page_id=16</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>Leaderboards</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>brainCloud provides support for&nbsp;both <em>global</em> and <em>social</em> leaderboards.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>brainCloud leaderboards support the following:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Games can have an unlimited number of leaderboards</li><li>Single score entry for both global and social leaderboards</li><li>Supported score types include "High Value", "Low Value", "Cumulative" and "Last Entry"</li><li>Leaderboard entries can include additional "developer-defined" data</li><li>Leaderboards can be configured to automatically reset daily, weekly, monthly or yearly</li><li>brainCloud provides rich&nbsp;APIs for dynamically creating leaderboards, retrieving data for social maps, and more</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>brainCloud also supports Pacers to make leaderboards more compelling for players that are not connected to social networks. &nbsp;Pacers are "canned" score entries that are automatically populated on a leaderboard with set score values. &nbsp;These can be used to give the player a crew of game-provided avatars to compete against.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For more information, check out the <a href="https://staging.getbraincloud.com/apidocs/apiref/#capi-leaderboard" target="_blank" rel="noreferrer noopener" aria-label=" (opens in a new tab)">Leaderboard API</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_lbConfig.jpg" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_lbConfig.jpg" alt="brainCloud"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>Tournaments</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>brainCloud’s new <em>Global Tournaments</em> feature is an entirely new system designed to amplify player engagement in your games.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Global Tournaments are suitable for any game where competition centers around leaderboards. In fact, in their simplest form, global tournaments can be thought of simply as prize rules added to a leaderboard.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The power of brainCloud’s tournament system comes from how flexible they are, coupled with how much they do for you. Features include:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Free or Paid – brainCloud collects the entry fee for you</li><li>Flexible Prizes – award any combination of currencies, XP, stats and achievements – brainCloud handles it all</li><li>Tournament Cycles – set your tournament to daily, weekly, monthly or an arbitrary number of days</li><li>Tournament Phases – optionally have an exclusive registration vs. play phase – and set up downtime between tournaments</li><li>Notifications – both Push and Email-based notifications – automatically sent by brainCloud throughout the tournament cycle</li><li>Portal Support – configure tournament templates and attach them to leaderboards. And then view tournament results straight from the Leaderboard monitoring screens</li><li>New Tournaments API – for fine control of displaying tournament information, handling player enrollment, recording player scores, and claiming awarded prizes</li><li>And of course, you can use brainCloud Global Tournament features as building blocks for more advanced tournament variations – for example, tournaments brackets.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>For more information on Global Tournaments,&nbsp;check out our <a href="https://staging.getbraincloud.com/apidocs/apiref/#capi-tournament" target="_blank" rel="noreferrer noopener" aria-label=" (opens in a new tab)">Tournament API</a>.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date><![CDATA[2014-09-08 14:18:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-08 18:18:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[leaderboards-and-tournaments]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>73</wp:post_parent>
		<wp:menu_order>18</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="automatically"><![CDATA[automatically]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-provides"><![CDATA[braincloud provides]]></category>
		<category domain="yst_prominent_words" nicename="daily-weekly"><![CDATA[daily weekly]]></category>
		<category domain="yst_prominent_words" nicename="daily-weekly-monthly"><![CDATA[daily weekly monthly]]></category>
		<category domain="yst_prominent_words" nicename="entry"><![CDATA[entry]]></category>
		<category domain="yst_prominent_words" nicename="global"><![CDATA[global]]></category>
		<category domain="yst_prominent_words" nicename="global-and-social"><![CDATA[global and social]]></category>
		<category domain="yst_prominent_words" nicename="global-and-social-leaderboards"><![CDATA[global and social leaderboards]]></category>
		<category domain="yst_prominent_words" nicename="global-tournaments"><![CDATA[global tournaments]]></category>
		<category domain="yst_prominent_words" nicename="include"><![CDATA[include]]></category>
		<category domain="yst_prominent_words" nicename="leaderboard"><![CDATA[leaderboard]]></category>
		<category domain="yst_prominent_words" nicename="leaderboards"><![CDATA[leaderboards]]></category>
		<category domain="yst_prominent_words" nicename="player"><![CDATA[player]]></category>
		<category domain="yst_prominent_words" nicename="score"><![CDATA[score]]></category>
		<category domain="yst_prominent_words" nicename="social"><![CDATA[social]]></category>
		<category domain="yst_prominent_words" nicename="social-leaderboards"><![CDATA[social leaderboards]]></category>
		<category domain="yst_prominent_words" nicename="support"><![CDATA[support]]></category>
		<category domain="yst_prominent_words" nicename="tournaments"><![CDATA[tournaments]]></category>
		<category domain="yst_prominent_words" nicename="weekly-monthly"><![CDATA[weekly monthly]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Cloud Code</title>
		<link>https://staging.getbraincloud.com/apidocs/introduction-2/cloud-code/</link>
		<pubDate>Mon, 08 Sep 2014 18:19:02 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://braincloudapidocs.local/?page_id=18</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><em>If brainCloud doesn't support a feature you need? Write it!</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>brainCloud allows&nbsp;developers to write custom code in JavaScript, and call it from a&nbsp;client, another server, or trigger it automatically as a pre-condition or post-condition of a standard brainCloud API call.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>More information on Cloud Code is available <a href="/apidocs/apiref/#cc">here</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_scriptEdit.jpg" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_scriptEdit.jpg" alt="brainCloud"/></a></figure>
<!-- /wp:image -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>18</wp:post_id>
		<wp:post_date><![CDATA[2014-09-08 14:19:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-08 18:19:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cloud-code]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>73</wp:post_parent>
		<wp:menu_order>19</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="call"><![CDATA[call]]></category>
		<category domain="yst_prominent_words" nicename="code"><![CDATA[code]]></category>
		<category domain="yst_prominent_words" nicename="write"><![CDATA[write]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Key Concepts</title>
		<link>https://staging.getbraincloud.com/apidocs/api-modules/</link>
		<pubDate>Mon, 08 Sep 2014 18:27:43 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://braincloudapidocs.local/?page_id=21</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image -->
<figure class="wp-block-image"><img src="/apidocs/wp-content/uploads/2016/08/BrainCloud-architecture-boxes.jpg" alt="brainCloud Architecture"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The API documentation is organized by topic:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Authentication</li><li>Player Statistics</li><li>Global Statistics</li><li>Deep Entity</li><li>Shared Data</li><li>Player XP</li><li>Achievements</li><li>Milestones</li><li>Leaderboards</li><li>Match-making</li><li>Async Turn-by-turn multiplayer</li><li>One-way Offline Multiplayer</li><li>Cloud Code</li><li>Events</li><li>Push Notifications</li><li>Virtual Currencies</li><li>Products and Payments
&nbsp;
</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>You'll find that each API has</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>C# - for C# examples that work from Unity</li><li>C++ - for C++ examples, relevant for platform-native and especially Cocos2d-x projects on iOS, Android, Windows, etc.</li><li>JS - for web-based JavaScript example code</li><li>AS - for Flash-based ActionScript API examples</li><li>Java - for Java-based versions of the API</li><li>CC - for Cloud Code versions fo the API</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date><![CDATA[2014-09-08 14:27:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-08 18:27:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[api-modules]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>19</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="api"><![CDATA[api]]></category>
		<category domain="yst_prominent_words" nicename="c"><![CDATA[c#]]></category>
		<category domain="yst_prominent_words" nicename="cloud"><![CDATA[cloud]]></category>
		<category domain="yst_prominent_words" nicename="cloud-code"><![CDATA[cloud code]]></category>
		<category domain="yst_prominent_words" nicename="code"><![CDATA[code]]></category>
		<category domain="yst_prominent_words" nicename="examples"><![CDATA[examples]]></category>
		<category domain="yst_prominent_words" nicename="multiplayer"><![CDATA[multiplayer]]></category>
		<category domain="yst_prominent_words" nicename="player"><![CDATA[player]]></category>
		<category domain="yst_prominent_words" nicename="statistics"><![CDATA[statistics]]></category>
		<category domain="yst_prominent_words" nicename="versions"><![CDATA[versions]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Authentication</title>
		<link>https://staging.getbraincloud.com/apidocs/api-modules/authentication/</link>
		<pubDate>Mon, 08 Sep 2014 18:28:18 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://braincloudapidocs.local/?page_id=23</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>A BaaS&nbsp;is only as flexible as its identity system - and brainCloud is very flexible indeed. The brainCloud authentication and identity APIs have been designed with the following goals in mind:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Allow developers to include both anonymous and authenticated access to their apps</li><li>Allow access to multiple authentication mechanisms - so as not to alienate any significant user bases</li><li>Include support for merging accounts (which is commonly needed when games are offered across various device platforms)</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>brainCloud supports the following types of identities:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Anonymous</li><li>Authenticated
<ul><li>Facebook</li><li>Twitter</li><li>Game Center (iOS)</li><li>Google Play Services</li><li>E-mail + Password</li><li>Universal Userid + Password <em>(meant for development primarily - has limitations)</em></li><li>Steam</li></ul>
</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>And we're always adding new ones! &nbsp;(Indeed, we've recently added support for <a href="/apidocs/api-modules/authentication/external-authentication/">External Authentication</a> and <a href="/apidocs/api-modules/authentication/shared-accounts/">Shared Accounts</a> as well!)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>Important note - there are no global brainCloud&nbsp;Accounts for end-users. &nbsp;All end-user accounts (profiles) are local to the app they are associated with - we do this so that you completely&nbsp;</em><em>own&nbsp;</em><em>your end-user data, and there is no branding-confusion regarding the accounts.</em></p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:image {"id":147,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="http://apidocs.braincloudservers.com/wp-content/uploads/2014/09/brainCloud_api_diagrams.png"><img src="http://apidocs.braincloudservers.com/wp-content/uploads/2014/09/brainCloud_api_diagrams.png" alt="brainCloud_api_diagrams" class="wp-image-147"/></a></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":1} -->
<h1>Key Concepts</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>These key concepts are essential to understanding brainCloud authentication:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><strong>Profile</strong> - all the key information about a user in your game or app is stored in the <strong>Profile</strong>. &nbsp;The profile is the key record for locating a users stats, entities, achievements, currency balances, etc.</li><li><strong>Identities</strong>&nbsp;- brainCloud uses identities to locate profiles. &nbsp;Every brainCloud profile has at least *one* identity (the anonymous identity) associated with it - but it may have others (including a Facebook identity, Game Center identity, etc.)</li><li><strong>Logging in</strong> - when your app starts, it logs into brainCloud by providing an identity for brainCloud to use to locate the appropriate profile.</li><li><strong>Advanced operations</strong> - brainCloud provides advanced APIs to allow you to add additional identities to a profile after it's been created - and can even allow you to merge profiles where necessary.</li></ol>
<!-- /wp:list -->

<!-- wp:heading {"level":1} -->
<h1>Creating Profiles</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>There is no explicit <em>Create()</em>&nbsp;and <em>Delete()</em> methods for brainCloud profiles</strong> - instead, they are automatically created during authentication if an existing profile cannot be found.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Essentially, the client attempts to log into brainCloud using the selected authentication mechanism - and if an existing profile is not located, a new one will automatically be created. &nbsp;<em>[Technically speaking, the developer&nbsp;*can* choose to override this behavior by passing a FALSE to the forceCreate parameter, but that's not common usage.]&nbsp;</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here's an example using anonymous authentication.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">// Authenticate with brainCloud anonymously
// - if a profile for this anonymous id isn't found, create it
BrainCloudWrapper.GetInstance().AuthenticateAnonymous(
     true,
     OnSuccess_Authenticate,
     OnError_Authenticate);</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":1} -->
<h1>Anonymous Identity and Profile Ids</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As we mentioned above, <strong>Identities</strong> are used to&nbsp;lookup <strong>Profiles</strong>. &nbsp;A key feature of brainCloud is that it supports user anonymity&nbsp;- so that even if users choose not to identify themselves, we can still associate them with their profile in our system.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To support this, brainCloud generates completely random (GUID-based) ids that are used to identify the device that a profile is connected to. &nbsp;We generate (and have the client store) this id so that we're not breaking any rules about identifying users without their permission - e.g. the same reason developers are no longer allowed to use UDIDs in iOS.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To keep things secure, the &lt;AnonymousIdentity&gt; must be used in conjunction with the &lt;ProfileId&gt; to look up the profile. Yes, you got that right - to look up a profile anonymously, you need to *already* have the profile's id - which you get when the profile is first created. Honestly, this isn't as crazy as it sounds - by requiring these two pieces of information we're preventing folks from hacking into our system and accessing any arbitrary user profile via a single identifier.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The nice thing is that&nbsp;the <strong>BrainCloudWrapper</strong>&nbsp;class stores both the &lt;AnonymousIdentity&gt; and the &lt;ProfileId&gt;&nbsp;for you - so you don't normally have to worry about it.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":665,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2014/09/brainCloud-Anonymous-Identity.png"><img src="/apidocs/wp-content/uploads/2014/09/brainCloud-Anonymous-Identity-1024x536.png" alt="brainCloud Anonymous Identity" class="wp-image-665"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Anonymous identities are convenient - you don't need to bother your user with a login, yet can still persist their data on the cloud - but there are some significant disadvantages.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Cons of Anonymous&nbsp;Identification</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>The user's cloud data will become inaccessible if they lose or wipe their device</li><li>The user cannot access their profile from multiple devices (we're working on that)</li><li>It is more difficult to participate in social features (i.e. friends, invites, etc.)</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":1} -->
<h1>Authenticated Identities</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>brainCloud also supports a variety of authenticated identities - including Facebook, E-mail + Password, etc. &nbsp;With authentication comes significant advantages:</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Pros of Authenticated Identification</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>The user's data is accessible across devices</li><li>The user's data is&nbsp;restorable&nbsp;even if they wipe or lose their device</li><li>Depending upon the authentication type, the user will be able to use social features</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":1} -->
<h1>E-mail Authentication</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>E-mail authentication is&nbsp;convenient and ubiquitous - and a great addition to most apps.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The e-mail authentication flow&nbsp;allows the app to prompt the user for an e-mail and password to use for an account. &nbsp;The e-mail and password (which is one-way scrambled) will be stored on the server.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":666} -->
<figure class="wp-block-image"><img src="/apidocs/wp-content/uploads/2014/09/brainCloud-E-mail-Authentication-1024x573.png" alt="brainCloud E-mail Authentication" class="wp-image-666"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>During the initial authentication, if the e-mail identity doesn't exist in the system, it will be created, along with the user's profile. &nbsp;brainCloud will also send an e-mail to the user at the address provided, to confirm that they have indeed entered the correct e-mail address. This is important for invoking the "forgot password" flow in the future, should it be needed.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The e-mail validation feature is recommended, but optional (the developer can turn it off). &nbsp;The developer can also choose whether or not the e-mail address must be validated before we allow the user into the app (that depends upon the type of app - for games, we recommend not enforcing validation).</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1>Universal Authentication</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Universal Authentication is a lot like E-mail Authentication, except that the userid doesn't have to be an e-mail address. &nbsp;As a result, however, end-users have no recourse if they forget their password (or at least we haven't designed on yet - I suppose we could add security questions).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But for now, this form of authentication can be useful during development - but <strong>we do&nbsp;not&nbsp;recommend it for production</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1>Facebook, Google Play, Twitter and&nbsp;Steam Authentication</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>brainCloud also supports authentication with third-party services, such as Facebook, Twitter, Steam, etc.. The advantage of using these identities is better integration with those platforms (of course), plus the fact that the user doesn't need to create and remember the password for yet another account.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Adding third-party authentication to your app requires a bit more work - although brainCloud does everything you need on the server side, we have not wrapped the various SDKs on the client (there are too many, and they change too often - maybe in the future!).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So, for now, the developer is responsible for integrating the platform's client SDK into their app, and for validating the user with the SDK before sending the appropriate identity information to brainCloud (where it will once-again be validated server-side).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For example, the steps for Facebook look like this:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Initialize Facebook SDK</li><li>Authenticate with Facebook</li><li>Call the brainCloud <strong>AuthenticateFacebook()</strong> method, passing in the Facebook &lt;externalId&gt; and &lt;authenticationToken&gt; (along with the rest of the standard brainCloud authentication parameters)</li><li>the brainCloud&nbsp;servers will re-validate the Facebook identity, and use it to look up the user's profile</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>brainCloud does not store (or even ask for) the password to the third party account.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note - the client app is responsible&nbsp;for persisting&nbsp;the 3rd party's user id info if desired / required (e.g. for Facebook, the &lt;externalId&gt; and &lt;authenticationToken&gt;).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note - when authenticating with Facebook, you must request<em><strong> user_friends</strong></em> among your permissions to make use of social network support (e.g., social leaderboards).</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1>GameCenter Authentication</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Finally, brainCloud also supports GameCenter authentication&nbsp;- on Apple devices only, of course.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>GameCenter authentication works similarly to other Third Party integration, except that the &lt;gameCenterId&gt; is more readily available and has already been validated.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It is recommended that Apple apps use&nbsp;GameCenter Authentication instead of Anonymous Authentication whenever possible - since it has the same pros as anonymous authentication (the user is not bothered with logging in, and doesn't give up any personal data) without most of the cons (the user's data will still be retrievable after a wipe, and will be accessible across multiple <em>Apple</em> devices).</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1>Upgrading Authentication</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Most games/apps will probably want to allow their users to be anonymous initially. &nbsp;Given an upfront account setup when creating an account can be bothersome, and it will cause a portion of your userbase to abandon the app before they start.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Luckily, brainCloud supports this concept directly. &nbsp;brainCloud allows the app to add additional identities to a profile *after* the profile has been created - this is often done by:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>encouraging the user to connect to Facebook to&nbsp;play with friends</li><li>encouraging the user to create an account (e-mail + password) to save their data</li><li>etc.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Adding additional identities to a profile is accomplished via the AttachIdentity() methods, which can be found <a href="/apidocs/apiref/#capi-identity">here</a>. &nbsp;Identities can also be detached (if the user decides to disconnect from Facebook, etc.).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once a user has upgraded from an anonymous account to an authenticated account (because they're now using an authenticated identity), you should switch to retrieving their account via the appropriate authenticated authentication call (instead of the anonymous call).</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date><![CDATA[2014-09-08 14:28:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-08 18:28:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[authentication]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>21</wp:post_parent>
		<wp:menu_order>10</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="additional-identities"><![CDATA[additional identities]]></category>
		<category domain="yst_prominent_words" nicename="additional-identities-to-a-profile"><![CDATA[additional identities to a profile]]></category>
		<category domain="yst_prominent_words" nicename="allows-the-app"><![CDATA[allows the app]]></category>
		<category domain="yst_prominent_words" nicename="anonymous"><![CDATA[anonymous]]></category>
		<category domain="yst_prominent_words" nicename="anonymous-authentication"><![CDATA[anonymous authentication]]></category>
		<category domain="yst_prominent_words" nicename="authentication"><![CDATA[authentication]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-authentication"><![CDATA[braincloud authentication]]></category>
		<category domain="yst_prominent_words" nicename="e-mail"><![CDATA[e-mail]]></category>
		<category domain="yst_prominent_words" nicename="e-mail-address"><![CDATA[e-mail address]]></category>
		<category domain="yst_prominent_words" nicename="e-mail-authentication"><![CDATA[e-mail authentication]]></category>
		<category domain="yst_prominent_words" nicename="e-mail-password"><![CDATA[e-mail password]]></category>
		<category domain="yst_prominent_words" nicename="facebook"><![CDATA[facebook]]></category>
		<category domain="yst_prominent_words" nicename="gamecenter-authentication"><![CDATA[gamecenter authentication]]></category>
		<category domain="yst_prominent_words" nicename="identities"><![CDATA[identities]]></category>
		<category domain="yst_prominent_words" nicename="identities-to-a-profile"><![CDATA[identities to a profile]]></category>
		<category domain="yst_prominent_words" nicename="identity"><![CDATA[identity]]></category>
		<category domain="yst_prominent_words" nicename="profile"><![CDATA[profile]]></category>
		<category domain="yst_prominent_words" nicename="user"><![CDATA[user]]></category>
		<category domain="yst_prominent_words" nicename="users-data"><![CDATA[user's data]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Cloud Data</title>
		<link>https://staging.getbraincloud.com/apidocs/api-modules/data/</link>
		<pubDate>Mon, 08 Sep 2014 18:32:17 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://braincloudapidocs.local/?page_id=33</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>brainCloud provides a very flexible set of APIs for storing and retrieving the data for your app and its users.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7271,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2021/09/Cloud-Data-1024x741.png" alt="" class="wp-image-7271"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>These APIs are organized by scope:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>User (Player) Scope</strong> -&nbsp;the data stored and retrieved using these APIs are local to a single user* of your application.</li><li><strong>Global (App) Scope</strong> - the data stored and retrieved using these APIs are accessible to all users of the application</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>* Note, as a special case, the <strong>Shared Data APIs</strong> allow users to access the data of other users. Example uses are multiplayer in games, shared document or list access, etc.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Within each scope, the data APIs are organized according to the type of data to be managed.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Entities</strong> - Entities (sometimes called <em>Deep Entities</em>) in brainCloud are full JSON objects - and can be as simple or complex as you'd like.  Entity objects have a unique id (generated by brainCloud), together with a developer-defined <em>entity type</em> - which is useful for organizing the objects (and doing specific retrievals).  Entity objects are generally retrieved in bulk when an app starts and then updated in real-time while the user interacts with it. Entities updates can be protected using a version number mechanic - where updates are only allowed if the version # in the update matches the one in the cloud (which is then automatically incremented after the update).<em> Entities are created and edited at run-time only</em>.</li><li><strong>Statistics</strong> - Statistics are atomic numeric values that are manipulated via a special concurrency safe API.  Statistics rules must be <em>pre-defined at design-time</em> in brainCloud - and are managed in real-time by brainCloud.  Statistics are not set directly - they are initialized to a starting value (defined in the rule), and then operated upon by special increment, decrement, etc. methods.  In this way, statistics are concurrency-safe both at the user and global level. Another key feature of Statistics is that they are tightly integrated into the metagame (Gamification) systems of brainCloud.  Statistics can be used to trigger the completion of milestones and quests.  They can also be rewarded for leveling up and completing milestones and quests.  They can be used as criteria for defining Segments for promotions.  Finally, they are very visible in the User (Player) Monitoring screens.</li><li><strong>Attributes</strong> - Attributes are somewhat similar to statistics, but the "value" portion of the key + value pair does not have to be numeric.  In addition, attributes do not have rules - your app is free to create and assign attributes to users in any variety at any time.  Note that brainCloud currently only supports attributes at the user level.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Finally, there are two additional data APIs&nbsp;available to the developer:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Friend Data (User Scope)</strong>&nbsp;- Friend data is used primarily to publish information about the current user (to be viewable by other users). &nbsp;This is most commonly used for social leaderboards, where key information about the player (name, xp level, etc.) provides a better context for competition. &nbsp;The structure of this data is completely under the control of the app.</li><li><strong>Global Properties (App Scope)</strong> - Global properties are set at design-time (using the portal), and available to all users of the app. &nbsp;These are a convenient (and dynamic) replacement for global constants or a properties file. &nbsp;They are generally read when the app first starts - making it easy to tweak the behavior of your app in the field (without deploying an updated build).</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Related Information:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Custom Entities</strong> - API accessed via <a rel="noreferrer noopener" href="/apidocs/apiref/#capi-customentity" target="_blank">CustomEntity</a>. Custom Entity collections can be defined in the Portal under <strong>Design | Cloud Data | Custom Entities</strong> and viewed and edited in <strong>Global Monitoring</strong> and <strong>User Monitoring</strong> sections.</li><li><strong>User Entities</strong> - API accessed via <a rel="noreferrer noopener" href="/apidocs/apiref/#capi-entity" target="_blank">BrainCloudEntity</a>. User Entities can be viewed and edited in the Portal under <strong>User (Player) Monitoring</strong> section.</li><li><strong>Global Entities</strong> - API accessed via <a rel="noreferrer noopener" href="/apidocs/apiref/#capi-globalentity" target="_blank">BrainCloudGlobalEntity</a>. Global Entities can be viewed and edited in the Portal in the <strong>Global Monitoring </strong>section.</li><li><strong>Shared Data API</strong> - API accessed via <a rel="noreferrer noopener" href="/apidocs/apiref/#capi-entity" target="_blank">BrainCloudEntity</a> -- set GetSharedEntitiesForPlayerId().</li><li><strong>User (Player) Statistics</strong> - API accessed via <a rel="noreferrer noopener" href="/apidocs/apiref/#capi-playerstats" target="_blank">BrainCloudPlayerStatistics</a>.  Statistics rules are defined in the Portal in the <strong>Design | Statistics Rules</strong> section.</li><li><strong>Global Statistics</strong> - API accessed via <a rel="noreferrer noopener" href="/apidocs/apiref/#capi-globalstats" target="_blank">BrainCloudGlobalStatistics</a>.  Statistics rules are defined in the Portal in the <strong>Design | Statistics Rules</strong> section.</li><li><strong>User Attributes</strong> - API accessed via <a rel="noreferrer noopener" href="/apidocs/apiref/#capi-playerstate" target="_blank">BrainCloudPlayerState</a>.  User attributes can be viewed and edited in the <strong>User (Player) Monitoring | Attributes</strong> section of the Portal.</li><li><strong>Friend Data</strong> - API accessed via <a rel="noreferrer noopener" href="/apidocs/apiref/#capi-friend" target="_blank">BrainCloudFriend</a>.  Not currently viewable via the player monitor.</li><li><strong>Global Properties</strong> - API accessed via <a rel="noreferrer noopener" href="/apidocs/apiref/#capi-globalapp" target="_blank">BrainCloudGlobalApp</a>.  Global properties can be viewed and edited in the <strong>Design | Custom Config | Global Properties</strong> section of the Portal.</li><li><strong>Groups</strong> - API accessed via <a rel="noreferrer noopener" href="/apidocs/apiref/#capi-group" target="_blank">BrainCloudGroup</a> and <a rel="noreferrer noopener" href="/apidocs/apiref/#capi-group" target="_blank">BrainCloudGroupEntities</a>. Data can be viewed and edited in the <strong>Monitoring | Group Monitoring</strong> sections of the Portal.</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>33</wp:post_id>
		<wp:post_date><![CDATA[2014-09-08 14:32:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-08 18:32:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[data]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>21</wp:post_parent>
		<wp:menu_order>14</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="api-accessed"><![CDATA[api accessed]]></category>
		<category domain="yst_prominent_words" nicename="api-accessed-via-braincloudentity"><![CDATA[api accessed via braincloudentity]]></category>
		<category domain="yst_prominent_words" nicename="data"><![CDATA[data]]></category>
		<category domain="yst_prominent_words" nicename="data-stored-and-retrieved"><![CDATA[data stored and retrieved]]></category>
		<category domain="yst_prominent_words" nicename="defined-in-the-portal"><![CDATA[defined in the portal]]></category>
		<category domain="yst_prominent_words" nicename="edited-in-the-portal"><![CDATA[edited in the portal]]></category>
		<category domain="yst_prominent_words" nicename="entities-api-accessed"><![CDATA[entities api accessed]]></category>
		<category domain="yst_prominent_words" nicename="global-properties"><![CDATA[global properties]]></category>
		<category domain="yst_prominent_words" nicename="portal-in-the-design"><![CDATA[portal in the design]]></category>
		<category domain="yst_prominent_words" nicename="retrieved-using-these-apis"><![CDATA[retrieved using these apis]]></category>
		<category domain="yst_prominent_words" nicename="scope-the-data"><![CDATA[scope the data]]></category>
		<category domain="yst_prominent_words" nicename="scope-the-data-stored"><![CDATA[scope the data stored]]></category>
		<category domain="yst_prominent_words" nicename="section-of-the-portal"><![CDATA[section of the portal]]></category>
		<category domain="yst_prominent_words" nicename="statistics"><![CDATA[statistics]]></category>
		<category domain="yst_prominent_words" nicename="statistics-api-accessed"><![CDATA[statistics api accessed]]></category>
		<category domain="yst_prominent_words" nicename="statistics-rules"><![CDATA[statistics rules]]></category>
		<category domain="yst_prominent_words" nicename="statistics-rules-section"><![CDATA[statistics rules section]]></category>
		<category domain="yst_prominent_words" nicename="user"><![CDATA[user]]></category>
		<category domain="yst_prominent_words" nicename="user-player"><![CDATA[user player]]></category>
		<category domain="yst_prominent_words" nicename="viewed-and-edited"><![CDATA[viewed and edited]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[page-templates/codesamples.php]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>SDK Tutorials</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/</link>
		<pubDate>Tue, 09 Sep 2014 16:22:50 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://braincloudapidocs.local/?page_id=63</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Welcome to the brainCloud SDK tutorials.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>brainCloud is a big system, with a very comprehensive set of features, APIs and tools.  These tutorials aim to de-mystify the system and get you up-and-running as quickly as possible.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And yeah, we are aware that these tutorials (and the docs themselves) don't yet have the full coverage that they should. &nbsp;We realize and are working hard to address that. If you're confused or can't find some information, please reach out via the chat button in the portal&nbsp;- we'll answer any questions immediately, and&nbsp;work to quickly address the documentation issue&nbsp;as well!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We're committed to aggressively adding and improving our tutorial&nbsp;library (and our documentation in general) as we grow the&nbsp;system&nbsp;- thanks for bearing with us!</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Available tutorials:</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>General API Tutorials
<ul><li><a href="https://staging.getbraincloud.com/apidocs/tutorials/general-api-tutorials/file-upload-api/">File Upload API</a></li><li><a href="https://staging.getbraincloud.com/apidocs/tutorials/general-api-tutorials/error-handling/">Error Handling</a></li><li><a href="https://staging.getbraincloud.com/apidocs/tutorials/general-api-tutorials/network-error-message-caching/">Network Error Message Caching</a></li></ul>
</li><li>Android Java Tutorials
<ul><li><a href="https://staging.getbraincloud.com/apidocs/tutorials/android-java-tutorials/getting-started-with-android-java/">Getting Started with Android Java</a></li></ul>
</li><li>Cocos2d-X Tutorials
<ul><li><a href="https://staging.getbraincloud.com/apidocs/tutorials/cocos2d-x-tutorials/cocos-2dx-example-1-getting-started/">Getting Started with Cocos2d-x</a></li><li><a href="https://staging.getbraincloud.com/apidocs/tutorials/cocos2d-x-tutorials/facebook-authentication/">Facebook authentication (using Cocos2d-x)</a></li></ul>
</li><li>JavaScript Tutorials
<ul><li><a href="https://staging.getbraincloud.com/apidocs/tutorials/javascript-tutorials/javascript-example-game/">JavaScript Example Game</a></li></ul>
</li><li>Objective-C Tutorials
<ul><li><a href="https://staging.getbraincloud.com/apidocs/tutorials/objective-c-tutorials/getting-started-with-objective-c/">Getting Started With Objective-C</a></li></ul>
</li><li>Unity Tutorials
<ul><li><a href="https://staging.getbraincloud.com/apidocs/tutorials/unity-tutorials/unity-tutorial-1-getting-started/">Getting Started with Unity (Video)</a></li><li><a href="https://staging.getbraincloud.com/apidocs/tutorials/unity-tutorials/unity-authentication-example/">Unity Authentication Example</a></li><li><a href="/apidocs/tutorials/unity-tutorials/braincloud-bombers-example-game/">brainCloud Bombers Example Game</a></li><li><a href="https://staging.getbraincloud.com/apidocs/tutorials/unity-tutorials/about-braincloud-bombers/">About brainCloud Bombers</a></li><li><a href="https://staging.getbraincloud.com/apidocs/tutorials/unity-tutorials/building-the-braincloud-bombers-project/">Building brainCloud Bombers</a></li></ul>
</li><li>Unreal Tutorials
<ul><li><a href="https://staging.getbraincloud.com/apidocs/tutorials/unreal-tutorials/setting-up-the-braincloud-plugin/">Setting up the brainCloud plugin</a></li><li><a href="https://staging.getbraincloud.com/apidocs/tutorials/unreal-tutorials/getting-started-with-blueprints/">Getting Started With Blueprints</a></li><li><a href="https://staging.getbraincloud.com/apidocs/tutorials/unreal-tutorials/getting-started-with-c/">Getting Started With C++</a></li><li><a href="https://staging.getbraincloud.com/apidocs/tutorials/unreal-tutorials/getting-started-with-the-online-subsystem/">Getting Started With OnlineSubsystem</a></li></ul>
</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>63</wp:post_id>
		<wp:post_date><![CDATA[2014-09-09 12:22:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-09 16:22:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[tutorials]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>34</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="address"><![CDATA[address]]></category>
		<category domain="yst_prominent_words" nicename="android"><![CDATA[android]]></category>
		<category domain="yst_prominent_words" nicename="android-java"><![CDATA[android java]]></category>
		<category domain="yst_prominent_words" nicename="api"><![CDATA[api]]></category>
		<category domain="yst_prominent_words" nicename="authentication"><![CDATA[authentication]]></category>
		<category domain="yst_prominent_words" nicename="bombers"><![CDATA[bombers]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-bombers"><![CDATA[braincloud bombers]]></category>
		<category domain="yst_prominent_words" nicename="cocos2d-x"><![CDATA[cocos2d-x]]></category>
		<category domain="yst_prominent_words" nicename="documentation"><![CDATA[documentation]]></category>
		<category domain="yst_prominent_words" nicename="error"><![CDATA[error]]></category>
		<category domain="yst_prominent_words" nicename="example"><![CDATA[example]]></category>
		<category domain="yst_prominent_words" nicename="example-game"><![CDATA[example game]]></category>
		<category domain="yst_prominent_words" nicename="game"><![CDATA[game]]></category>
		<category domain="yst_prominent_words" nicename="general"><![CDATA[general]]></category>
		<category domain="yst_prominent_words" nicename="java"><![CDATA[java]]></category>
		<category domain="yst_prominent_words" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="yst_prominent_words" nicename="quickly"><![CDATA[quickly]]></category>
		<category domain="yst_prominent_words" nicename="system"><![CDATA[system]]></category>
		<category domain="yst_prominent_words" nicename="unity"><![CDATA[unity]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pprredirect_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[301]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pprredirect_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[/tutorials/unity-tutorial-1-getting-started/]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Introduction</title>
		<link>https://staging.getbraincloud.com/apidocs/introduction-2/</link>
		<pubDate>Tue, 09 Sep 2014 16:32:59 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://braincloudapidocs.local/?page_id=73</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"id":3230,"align":"center","width":768,"height":576,"linkDestination":"custom"} -->
<div class="wp-block-image"><figure class="aligncenter is-resized"><a href="/apidocs/wp-content/uploads/2014/09/BC_TechStack_05.png"><img src="/apidocs/wp-content/uploads/2014/09/BC_TechStack_05.png" alt="brainCloud Stack" class="wp-image-3230" width="768" height="576"/></a></figure></div>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>What is brainCloud?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>brainCloud</strong>&nbsp;is a ready-made<strong>&nbsp;back-end platform</strong>&nbsp;for the development of feature-rich&nbsp;<strong>mobile+social games</strong>&nbsp;and&nbsp;<strong>gamified apps</strong>. brainCloud provides the features you need – along with&nbsp;<strong>comprehensive tools</strong>&nbsp;to support your team during development, testing, and user support.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>brainCloud consists of:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Cloud Service</strong>&nbsp;– an advanced,&nbsp;Backend-as-a-Service (BaaS)</li><li><strong>Client Libraries</strong>&nbsp;– local client libraries (SDKs)</li><li><strong>Design&nbsp;Portal</strong>&nbsp;– a portal that allows you to design and debug your apps</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>SDK libraries</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There are custom brainCloud libraries for:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>C#&nbsp;</strong>–&nbsp;for Unity <g class="gr_ gr_687 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace" id="687" data-gr-id="687">and .</g>Net developers</li><li><strong>C++&nbsp;</strong>–&nbsp;for&nbsp;platform-native&nbsp;apps,&nbsp;on&nbsp;iOS Android,&nbsp;Windows,&nbsp;etc.</li><li><strong>JS&nbsp;</strong>–&nbsp;for&nbsp;web-based&nbsp;JavaScript&nbsp;apps</li><li><strong>AS3&nbsp;</strong>–&nbsp;for&nbsp;Flash-based&nbsp;ActionScript&nbsp;apps</li><li><strong>Java</strong> –&nbsp;for&nbsp;Java-based&nbsp;and native&nbsp;Android&nbsp;apps</li><li><strong>Objective-C</strong>&nbsp;– for&nbsp;native Mac and iOS&nbsp;apps</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Engine Support</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>brainCloud&nbsp;supports the most popular gaming engines, including:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Unity</strong>&nbsp;– brainCloud provides C# libraries, examples and tutorials for integration with Unity</li><li><strong>Unreal</strong>&nbsp;– we have support for the latest versions of the Unreal Engine</li><li><strong>Cocos2d-x</strong>&nbsp;– Cocos is supported natively using the C++ libraries</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Understanding the APIs</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>brainCloud has a very broad feature-set – you can use as much or as little of it as you like.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This section gives some background on how the brainCloud APIs work, in terms of concepts and structure. The details on API usage can be found in the <a href="https://staging.getbraincloud.com/apidocs/api-reference-new/">API Reference</a> section.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This introduction is organized into the following sections:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong><a href="/apidocs/introduction-2/design-portal/">Design&nbsp;Portal</a></strong>&nbsp;– getting started in the system</li><li><a href="/apidocs/introduction-2/braincloud-api/"><strong>brainCloud</strong> <strong>API</strong></a> – connecting your app to brainCloud</li><li><strong><a href="/apidocs/introduction-2/braincloud-rtt/">brainCloud RTT</a></strong> – listen and react to events in real-time</li><li><strong><a href="/apidocs/introduction-2/profiles-and-identity/">Profiles and Identity</a></strong>&nbsp;– how brainCloud identifies&nbsp;end-users</li><li><strong><a href="/apidocs/introduction-2/cloud-data/">Cloud Data</a></strong>&nbsp;–&nbsp;overview of the brainCloud data APIs</li><li><strong><a href="/apidocs/introduction-2/gamification/">Gamification</a></strong>&nbsp;– discussion of the brainCloud gamification features</li><li><strong><a href="/apidocs/introduction-2/multiplayer/">Multiplayer</a></strong>&nbsp;–&nbsp;overview of brainCloud’s multiplayer capabilities</li><li><strong><a href="/apidocs/introduction-2/notifications/">Push Notifications</a></strong>&nbsp;– sending push notifications (programmatically) in brainCloud</li><li><strong><a href="/apidocs/introduction-2/currency-and-payments/">Currency, Payments, <g class="gr_ gr_1276 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep" id="1276" data-gr-id="1276">and</g> Promotions</a></strong>&nbsp;– dealing with virtual currencies, products, pricing and promotions</li><li><strong><a href="/apidocs/introduction-2/leaderboards-and-tournaments/">Leaderboards and Tournaments</a> –&nbsp;</strong>discussion of leaderboards, pacers, and tournaments</li><li><strong><a href="/apidocs/introduction-2/cloud-code/">Cloud Code</a></strong><a href="/apidocs/introduction-2/cloud-code/">&nbsp;</a>– writing your own cloud code</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>73</wp:post_id>
		<wp:post_date><![CDATA[2014-09-09 12:32:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-09 16:32:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[introduction-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>16</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="api"><![CDATA[api]]></category>
		<category domain="yst_prominent_words" nicename="apis"><![CDATA[apis]]></category>
		<category domain="yst_prominent_words" nicename="apps"><![CDATA[apps]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-provides"><![CDATA[braincloud provides]]></category>
		<category domain="yst_prominent_words" nicename="c"><![CDATA[c#]]></category>
		<category domain="yst_prominent_words" nicename="client"><![CDATA[client]]></category>
		<category domain="yst_prominent_words" nicename="client-libraries"><![CDATA[client libraries]]></category>
		<category domain="yst_prominent_words" nicename="cloud"><![CDATA[cloud]]></category>
		<category domain="yst_prominent_words" nicename="cloud-code"><![CDATA[cloud code]]></category>
		<category domain="yst_prominent_words" nicename="design"><![CDATA[design]]></category>
		<category domain="yst_prominent_words" nicename="design-portal"><![CDATA[design portal]]></category>
		<category domain="yst_prominent_words" nicename="development"><![CDATA[development]]></category>
		<category domain="yst_prominent_words" nicename="features"><![CDATA[features]]></category>
		<category domain="yst_prominent_words" nicename="ios"><![CDATA[ios]]></category>
		<category domain="yst_prominent_words" nicename="libraries"><![CDATA[libraries]]></category>
		<category domain="yst_prominent_words" nicename="portal"><![CDATA[portal]]></category>
		<category domain="yst_prominent_words" nicename="provides"><![CDATA[provides]]></category>
		<category domain="yst_prominent_words" nicename="push-notifications"><![CDATA[push notifications]]></category>
		<category domain="yst_prominent_words" nicename="support"><![CDATA[support]]></category>
		<category domain="yst_prominent_words" nicename="unity"><![CDATA[unity]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[page-templates/codesamples.php]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Cloud Code</title>
		<link>https://staging.getbraincloud.com/apidocs/api-modules/cloud-code/</link>
		<pubDate>Tue, 09 Sep 2014 16:59:45 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://braincloudapidocs.local/?page_id=88</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>brainCloud allows developers to write custom <a href="/apidocs/apiref/#cc" target="_blank" rel="noreferrer noopener" aria-label=" (opens in a new tab)">Cloud Code</a> routines in JavaScript, that reside and run on the brainCloud servers, allowing execution of code more securely and efficiently than if it were run client-side.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Advantages of Cloud Code scripts include:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Better performance when calling multiple API calls in a row</li><li>Lower brainCloud costs (the first 3 API calls are free, and each one after is 1/2 a count)</li><li>More secure</li><li>Ability to change logic server-side without a client update</li><li>Ability to call out to <a href="/apidocs/apiref/#cc-httpclient" target="_blank" rel="noreferrer noopener" aria-label=" (opens in a new tab)">external web services</a></li><li>Ability to perform certain operations that are not enabled in the client API</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Cloud Code scripts can be called from:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>client apps - via the <a rel="noreferrer noopener" aria-label=" (opens in a new tab)" href="/apidocs/apiref/#capi-script" target="_blank">Script Service</a> APIs</li><li>developer-operated servers - via the <a rel="noreferrer noopener" aria-label=" (opens in a new tab)" href="/apidocs/apiref/#s2s" target="_blank">Server-to-Server</a> API</li><li>third-party services - via brainCloud's <a rel="noreferrer noopener" aria-label=" (opens in a new tab)" href="/apidocs/apiref/#cc-ccscripts-webhooks" target="_blank">WebHooks</a> interface</li><li>triggered via other operations (<a rel="noreferrer noopener" aria-label=" (opens in a new tab)" href="/apidocs/apiref/#cc-ccscripts-apihooks" target="_blank">API Hooks</a>) - scripts can be configured to be triggered automatically as pre- or post- conditions for other API operations</li><li>scheduled - scripts <a href="/apidocs/apiref/#cc-ccscripts-scheduledscripts" target="_blank" rel="noreferrer noopener" aria-label=" (opens in a new tab)">scheduled</a> to execute in the future</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Cloud Code scripts are written using brainCloud's web-based script editor, located in the Portal under <strong>Design | Cloud Code | Scripts</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For more information, check out:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" aria-label=" (opens in a new tab)" href="/apidocs/apiref/#cc-ccscripts" target="_blank">Writing Scripts</a> section of the API Reference</li><li><a href="/apidocs/tutorials/cloud-code-tutorials/">Cloud Code Tutorials</a> section of SDK Tutorials</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>88</wp:post_id>
		<wp:post_date><![CDATA[2014-09-09 12:59:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-09 16:59:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cloud-code]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>21</wp:post_parent>
		<wp:menu_order>24</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="ability"><![CDATA[ability]]></category>
		<category domain="yst_prominent_words" nicename="api"><![CDATA[api]]></category>
		<category domain="yst_prominent_words" nicename="api-calls"><![CDATA[api calls]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="calls"><![CDATA[calls]]></category>
		<category domain="yst_prominent_words" nicename="client"><![CDATA[client]]></category>
		<category domain="yst_prominent_words" nicename="cloud"><![CDATA[cloud]]></category>
		<category domain="yst_prominent_words" nicename="cloud-code"><![CDATA[cloud code]]></category>
		<category domain="yst_prominent_words" nicename="cloud-code-scripts"><![CDATA[cloud code scripts]]></category>
		<category domain="yst_prominent_words" nicename="code"><![CDATA[code]]></category>
		<category domain="yst_prominent_words" nicename="code-scripts"><![CDATA[code scripts]]></category>
		<category domain="yst_prominent_words" nicename="operations"><![CDATA[operations]]></category>
		<category domain="yst_prominent_words" nicename="run"><![CDATA[run]]></category>
		<category domain="yst_prominent_words" nicename="scheduled"><![CDATA[scheduled]]></category>
		<category domain="yst_prominent_words" nicename="script"><![CDATA[script]]></category>
		<category domain="yst_prominent_words" nicename="scripts"><![CDATA[scripts]]></category>
		<category domain="yst_prominent_words" nicename="section"><![CDATA[section]]></category>
		<category domain="yst_prominent_words" nicename="servers"><![CDATA[servers]]></category>
		<category domain="yst_prominent_words" nicename="services"><![CDATA[services]]></category>
		<category domain="yst_prominent_words" nicename="triggered"><![CDATA[triggered]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pprredirect_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[301]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pprredirect_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[/apidocs/api-modules/cloud-code/braincloudscript/]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Monetization</title>
		<link>https://staging.getbraincloud.com/apidocs/api-modules/monetization/</link>
		<pubDate>Tue, 09 Sep 2014 17:02:12 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://braincloudapidocs.local/?page_id=98</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>The Three P's - Products, Pricing, and Promotions</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>brainCloud is not an e-commerce platform itself - but it integrates with the various platform stores (iOS AppStore, Google Play, Facebook Store, Steam Store, Windows Store, etc.) to facilitate and secure the purchasing process - while providing advanced support for pricing and promotions.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Products</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>brainCloud's monetization support centers around the purchase of products. &nbsp;Products are the&nbsp;IAP&nbsp;purchases that a user may make in your app. &nbsp;For example, in Clash of Clans, the products would be the bundles of coins, elixir, and gems that the user purchases for real money in the store&nbsp;-- not the Cannons&nbsp;and&nbsp;Archer Towers that can be purchased with those products.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Products are often associated with Virtual Currencies, which brainCloud also provides support for -- but they don't have to be.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":3385,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2016/08/brainCloud_Dashboard_prodEdit.jpg"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2016/08/brainCloud_Dashboard_prodEdit-1024x588.jpg" alt="" class="wp-image-3385"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>Pricing</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Products in brainCloud can have multiple price&nbsp;points (called Price Entries) - just like in a physical retail store.&nbsp; The regular or default price is called the <strong>List Price</strong>, while the other prices are defined and available for use in <strong>Promotional Sales</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Price Entries are&nbsp;used to tie brainCloud Products to the product/pricing info of the Platform Stores (like the iOS App Store).</p>
<!-- /wp:paragraph -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_Dashboard_prodPriceEdit.jpg" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2016/08/brainCloud_Dashboard_prodPriceEdit.jpg" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2014/09/iTunes_Connect.png" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2014/09/iTunes_Connect.png" alt="Price entry details in iTunes Connect"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><br>Each AppStore works differently - in iOS, all price points must be defined ahead of time in iTunes Connect.  Google Play and Windows Store work this way too.  In Facebook and Steam, however, the product prices are controlled directly by brainCloud and provided to the store upon request.  Although the exact details vary by store - brainCloud allows you to manage the pricing of your products centrally across all platforms.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Promotions</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Building upon Products and Pricing are the Promotions features - which&nbsp;allow you to present your users with "special offers" of preferred pricing of products, or even exclusive products that aren't normally available.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>brainCloud provides two forms of promotions:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Scheduled Promotions - promotions that are to be offered during specific calendar dates - such as a "Christmas Holiday Sale"</li><li>Automated Promotions - promotions that are offered to a specific target segment of users, and triggered as each individual user enters that segment (i.e. "New User" promotion for users who activated the game less than 5 days ago)</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>More Information</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>For more information, consult the brainCloud <a href="/apidocs/apiref/#capi-product" target="_blank" rel="noreferrer noopener">Product</a> API.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>98</wp:post_id>
		<wp:post_date><![CDATA[2014-09-09 13:02:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-09 17:02:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[monetization]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>21</wp:post_parent>
		<wp:menu_order>19</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="appstore"><![CDATA[appstore]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="google"><![CDATA[google]]></category>
		<category domain="yst_prominent_words" nicename="google-play"><![CDATA[google play]]></category>
		<category domain="yst_prominent_words" nicename="ios"><![CDATA[ios]]></category>
		<category domain="yst_prominent_words" nicename="platform"><![CDATA[platform]]></category>
		<category domain="yst_prominent_words" nicename="platform-stores"><![CDATA[platform stores]]></category>
		<category domain="yst_prominent_words" nicename="price"><![CDATA[price]]></category>
		<category domain="yst_prominent_words" nicename="price-entries"><![CDATA[price entries]]></category>
		<category domain="yst_prominent_words" nicename="price-points"><![CDATA[price points]]></category>
		<category domain="yst_prominent_words" nicename="pricing"><![CDATA[pricing]]></category>
		<category domain="yst_prominent_words" nicename="pricing-and-promotions"><![CDATA[pricing and promotions]]></category>
		<category domain="yst_prominent_words" nicename="promotions"><![CDATA[promotions]]></category>
		<category domain="yst_prominent_words" nicename="promotions-promotions"><![CDATA[promotions promotions]]></category>
		<category domain="yst_prominent_words" nicename="store"><![CDATA[store]]></category>
		<category domain="yst_prominent_words" nicename="stores"><![CDATA[stores]]></category>
		<category domain="yst_prominent_words" nicename="support"><![CDATA[support]]></category>
		<category domain="yst_prominent_words" nicename="user"><![CDATA[user]]></category>
		<category domain="yst_prominent_words" nicename="users"><![CDATA[users]]></category>
		<category domain="yst_prominent_words" nicename="windows-store"><![CDATA[windows store]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Multiplayer</title>
		<link>https://staging.getbraincloud.com/apidocs/api-modules/multiplayer/</link>
		<pubDate>Tue, 09 Sep 2014 17:03:06 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://braincloudapidocs.local/?page_id=102</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>brainCloud directly supports the most common types of mobile multiplayer <em>right out-of-the-box</em>. &nbsp;And with RTT, adds support for custom multiplayer experiences of any flavor (using custom or third-party tech).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>brainCloud's multiplayer support is organized along the following definitions:</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Turn-by-Turn Async Multiplayer</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Turn-by-Turn Async Multiplayer is arguably the most common form of mobile multiplayer - made popular by games such as <strong><em>Words With Friends</em></strong>, <strong><em>Draw Something</em></strong>, <strong><em>Trivia Crack</em></strong>, etc. &nbsp;This multiplayer is very popular because it supports very casual + social types of games - and because&nbsp;it doesn't require the players to be online at the same time.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>brainCloud has a full implementation of Turn-by-Turn Async Multiplayer, enabled via our <a href="https://staging.getbraincloud.com/apidocs/apiref/#capi-asyncmatch">BrainCloudAsyncMatch</a> APIs, that works across all device types, and even supports anonymous matchmaking via the <a href="https://staging.getbraincloud.com/apidocs/apiref/#capi-matchmaking">BrainCloudMatchMaking</a> service. &nbsp;Players can also start matches with Facebook friends (by retrieving their profileID via the <a href="https://staging.getbraincloud.com/apidocs/apiref/#capi-friend">BrainCloudFriend</a> API).</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>One-Way Offline Multiplayer</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Another very popular form of mobile multiplayer is what we call One-Way Offline Multiplayer. It's our name for the form of multiplayer popularized by games like <strong><em>Clash of Clans</em></strong>, <strong><em>Boom Beach</em></strong>, etc. &nbsp;In it, an Attacker attacks the settlement (base, camp, fort, etc.) that has been set up by the Defender. Once again, the great thing about this form of multiplayer is that the Defender does not have to be online during the attack.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>brainCloud has a full implementation of One-Way Offline Multiplayer, enabled via our <a href="https://staging.getbraincloud.com/apidocs/apiref/#capi-oneway">BrainCloudOneWayMatch</a> APIs. Opponents to attack can be found using the <a rel="noopener" href="/apidocs/apiref/#capi-matchmaking">BrainCloudMatchMaking</a> service, or via the <a href="https://staging.getbraincloud.com/apidocs/apiref/#capi-friend">BrainCloudFriend</a> API.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Refer to our <a href="https://staging.getbraincloud.com/apidocs/api-modules/multiplayer/one-way-offline-multiplayer-example/">One-Way Offline Multiplayer Example</a> for more information.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Real-time Multiplayer</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This is our name for the form of multiplayer commonly used in Arena Shooters, MOBA's, MMOs, etc. Examples include <em><strong>Team Fortress 2</strong></em>, <em><strong>League of Legends</strong></em>, <em><strong>World of Warcraft</strong></em>, etc.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>brainCloud provides all the building blocks necessary to build great multiplayer experiences - and easily integrates with third-party tech as well.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>brainCloud provides built-in <em>Online Matchmaking</em> and <em>Lobby Services</em> - and our own <em>Relay Servers</em> for simple, peer-to-peer multiplayer. Be sure to check out our multiplayer demo game, <a href="https://staging.getbraincloud.com/apidocs/tutorials/unity-tutorials/bombers-rtt-example-game/">brainCloud</a><a href="https://staging.getbraincloud.com/apidocs/tutorials/unity-tutorials/braincloud-bombers-example-game/"> Bombers</a>, for more info!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For more competitive multiplayer, brainCloud can now host your custom Room/Game Servers - automatically launching them after users ready-up in lobbies. <em><strong>And as of release 4.9, brainCloud can now launch custom AWS GameLift servers as well!</strong></em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Of course, brainCloud customers can also use other third-party multiplayer tech such as Photon from Exit Games, Steam Multiplayer, etc.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Games using these services still benefit from the rest of brainCloud's features, including player accounts, cloud data, push notifications, gamification, in-app purchase, monetization, leaderboards, tournaments, groups, etc.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Semi-Realtime Multiplayer</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Semi-Realtime Multiplayer is very similar to Realtime Multiplayer regarding technology - though the gameplay itself is less "twitch" based, and does not normally require physics, etc. Examples of this multiplayer would include online card games, like <em><strong>Uno</strong></em> or <em><strong>Hearthstone</strong></em>. All players must be online at the same time, and the interactions *are* still in real-time, though the gameplay isn't as sensitive to latency issues.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This form of multiplayer is perfect for brainCloud's new Real-time Tech (RTT) infrastructure. RTT allows you to integrate custom Game or Room Servers with brainCloud - which will be served up by brainCloud's online matchmaking and lobby services.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>Check out our <a rel="noopener noreferrer" href="https://github.com/getbraincloud/examples-javascript" target="_blank">Warstone</a> example game for more info. </em></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>102</wp:post_id>
		<wp:post_date><![CDATA[2014-09-09 13:03:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-09 17:03:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[multiplayer]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>21</wp:post_parent>
		<wp:menu_order>18</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="async-multiplayer"><![CDATA[async multiplayer]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="form-of-mobile"><![CDATA[form of mobile]]></category>
		<category domain="yst_prominent_words" nicename="form-of-mobile-multiplayer"><![CDATA[form of mobile multiplayer]]></category>
		<category domain="yst_prominent_words" nicename="form-of-multiplayer"><![CDATA[form of multiplayer]]></category>
		<category domain="yst_prominent_words" nicename="full-implementation"><![CDATA[full implementation]]></category>
		<category domain="yst_prominent_words" nicename="matchmaking-and-lobby"><![CDATA[matchmaking and lobby]]></category>
		<category domain="yst_prominent_words" nicename="matchmaking-and-lobby-services"><![CDATA[matchmaking and lobby services]]></category>
		<category domain="yst_prominent_words" nicename="mobile-multiplayer"><![CDATA[mobile multiplayer]]></category>
		<category domain="yst_prominent_words" nicename="multiplayer-experiences"><![CDATA[multiplayer experiences]]></category>
		<category domain="yst_prominent_words" nicename="name-for-the-form"><![CDATA[name for the form]]></category>
		<category domain="yst_prominent_words" nicename="offline-multiplayer"><![CDATA[offline multiplayer]]></category>
		<category domain="yst_prominent_words" nicename="one-way-offline"><![CDATA[one-way offline]]></category>
		<category domain="yst_prominent_words" nicename="one-way-offline-multiplayer"><![CDATA[one-way offline multiplayer]]></category>
		<category domain="yst_prominent_words" nicename="online-at-the-same-time"><![CDATA[online at the same time]]></category>
		<category domain="yst_prominent_words" nicename="online-matchmaking-and-lobby"><![CDATA[online matchmaking and lobby]]></category>
		<category domain="yst_prominent_words" nicename="online-matchmaking-and-lobby-services"><![CDATA[online matchmaking and lobby services]]></category>
		<category domain="yst_prominent_words" nicename="third-party-tech"><![CDATA[third-party tech]]></category>
		<category domain="yst_prominent_words" nicename="turn-by-turn-async"><![CDATA[turn-by-turn async]]></category>
		<category domain="yst_prominent_words" nicename="turn-by-turn-async-multiplayer"><![CDATA[turn-by-turn async multiplayer]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Gamification</title>
		<link>https://staging.getbraincloud.com/apidocs/api-modules/gamification/</link>
		<pubDate>Tue, 09 Sep 2014 17:04:55 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://braincloudapidocs.local/?page_id=112</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>brainCloud's Gamification features provide server-side support common metagame elements, including:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Experience Points (XP) and Levels</li><li>Achievements</li><li>Milestones</li><li>Quests</li><li>Stats Events</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>These&nbsp;features build upon the&nbsp;Statistics APIs and a concept of Player Rewards.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em><strong>Player Rewards</strong></em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>brainCloud provides an ability to reward players for completing meta-goals: leveling up, completing a milestone and/or completing quests. &nbsp;Rewards can consist of:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Achievements</li><li>Experience Points</li><li>Currencies</li><li>User Statistics</li><li>Global Statistics</li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>XP&nbsp;Levels</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>brainCloud can manage experience points (XP) and levels, and reward the player for leveling up.
A player's XP starts at 0 and is incremented using methods of the&nbsp;<a href="/apidocs/apiref/#capi-playerstats">Player Statistics</a>&nbsp;service.&nbsp;A list of player XP levels can be read from the client using&nbsp;<a href="/apidocs/apiref/#capi-gamification-readxplevelsmetadata">ReadXPLevelsMetaData()</a>.
&nbsp;
</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>Achievements</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Achievements can be triggered manually, or as the result of player rewards. Achievements can be data filled with the ids for platform achievements (on iOS, Steam, etc.) so that they may automatically be triggered in sync with brainCloud achievements.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Achievements can be awarded directly using the <a href="/apidocs/apiref/#capi-gamification-awardachievements">AwardAchievements()</a> API. &nbsp;There are also API calls for retrieving the full list of achievements, and the list of achievements that have already been awarded for the player.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>Milestones</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Milestones are used to define conditions under which rewards are to be delivered. &nbsp;Milestones must first be unlocked before they can be completed and then awarded.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1242,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2014/09/brainCloud-Milestone.png"><img src="/apidocs/wp-content/uploads/2014/09/brainCloud-Milestone-1024x798.png" alt="brainCloud Milestone" class="wp-image-1242"/></a></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>Quests</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Quests are essentially compound Milestones. The completion status of the Quest&nbsp;is derived from the completion status of the Milestones (Tasks) that it is composed of.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1243,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2014/09/brainCloud-Quest.png"><img src="/apidocs/wp-content/uploads/2014/09/brainCloud-Quest-174x300.png" alt="brainCloud Quest" class="wp-image-1243"/></a></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>Stats Events</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Stats Events are essentially Stats Macros. &nbsp;The Macro is defined on the server and triggered by id from the client.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For the same flexibility, but controlled directly from the client, try using the <a href="/apidocs/apiref/#capi-playerstats-processstatistics">ProcessStatistics()</a> API.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>112</wp:post_id>
		<wp:post_date><![CDATA[2014-09-09 13:04:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-09 17:04:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gamification]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>21</wp:post_parent>
		<wp:menu_order>17</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="completion-status"><![CDATA[completion status]]></category>
		<category domain="yst_prominent_words" nicename="experience"><![CDATA[experience]]></category>
		<category domain="yst_prominent_words" nicename="experience-points"><![CDATA[experience points]]></category>
		<category domain="yst_prominent_words" nicename="experience-points-xp"><![CDATA[experience points xp]]></category>
		<category domain="yst_prominent_words" nicename="experience-points-xp-and-levels"><![CDATA[experience points xp and levels]]></category>
		<category domain="yst_prominent_words" nicename="levels"><![CDATA[levels]]></category>
		<category domain="yst_prominent_words" nicename="list-of-achievements"><![CDATA[list of achievements]]></category>
		<category domain="yst_prominent_words" nicename="milestones"><![CDATA[milestones]]></category>
		<category domain="yst_prominent_words" nicename="player"><![CDATA[player]]></category>
		<category domain="yst_prominent_words" nicename="player-rewards"><![CDATA[player rewards]]></category>
		<category domain="yst_prominent_words" nicename="points-xp"><![CDATA[points xp]]></category>
		<category domain="yst_prominent_words" nicename="points-xp-and-levels"><![CDATA[points xp and levels]]></category>
		<category domain="yst_prominent_words" nicename="quests"><![CDATA[quests]]></category>
		<category domain="yst_prominent_words" nicename="rewards"><![CDATA[rewards]]></category>
		<category domain="yst_prominent_words" nicename="statistics"><![CDATA[statistics]]></category>
		<category domain="yst_prominent_words" nicename="stats"><![CDATA[stats]]></category>
		<category domain="yst_prominent_words" nicename="stats-events"><![CDATA[stats events]]></category>
		<category domain="yst_prominent_words" nicename="xp"><![CDATA[xp]]></category>
		<category domain="yst_prominent_words" nicename="xp-and-levels"><![CDATA[xp and levels]]></category>
		<category domain="yst_prominent_words" nicename="xp-levels"><![CDATA[xp levels]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>brainCloud Docs</title>
		<link>https://staging.getbraincloud.com/apidocs/</link>
		<pubDate>Fri, 12 Sep 2014 01:26:46 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://newapi.braincloudservers.com/?page_id=347</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>Welcome</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Welcome to the <a rel="noopener" href="http://getbraincloud.com" target="_blank">brainCloud BaaS</a> documentation.  Here you will find the latest details on developing with brainCloud - including feature overviews, how-to's, <a href="/apidocs/api-reference-new/">API references</a> and video tutorials.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>brainCloud has a very broad&nbsp;feature-set - you can use as much or as little of it as you like!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2><figure><a href="/apidocs/wp-content/uploads/2014/09/BC_TechStack_05.png"><img class="aligncenter wp-image-3230" src="/apidocs/wp-content/uploads/2014/09/BC_TechStack_05-1024x768.png" alt="brainCloud Stack" width="640" height="480"></a></figure></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The brainCloud Docs&nbsp;are organized as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a title="Introduction" href="https://staging.getbraincloud.com/apidocs/introduction-2/"><strong>Introduction</strong></a> - introduces the key&nbsp;concepts that are important to understanding the workings and organization of the APIs</li><li><strong><a href="https://staging.getbraincloud.com/apidocs/api-reference-new/">Key Concepts</a></strong> - key concepts that programmers will need to understand</li><li><strong><a href="https://staging.getbraincloud.com/apidocs/client-libraries/">Client Libraries</a> </strong>- links to the client libs</li><li><a href="https://staging.getbraincloud.com/apidocs/apiref/#capi-auth"><strong>API Reference</strong></a>&nbsp;- usage details for the API methods themselves&nbsp;(now in a separate <a href="https://staging.getbraincloud.com/apidocs/apiref/#introduction">doc!</a>)</li><li><strong><a href="https://staging.getbraincloud.com/apidocs/cloud-code-central/">Cloud Code Central</a> </strong>- cloud code tips and examples</li><li><a href="https://staging.getbraincloud.com/apidocs/portal-usage/"><strong>Portal Tutorials</strong></a> - how to use the&nbsp;Design Portal</li><li><a href="https://staging.getbraincloud.com/apidocs/tutorials/"><strong>SDK&nbsp;Tutorials</strong></a> - tutorials on various aspects of the API</li><li><strong><a href="https://staging.getbraincloud.com/apidocs/support/">Support</a></strong> - answers to frequently asked questions</li><li><strong><a href="https://staging.getbraincloud.com/apidocs/releases/">Release History</a></strong> - view the latest&nbsp;platform updates</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><em>We're continuously improving our documentation&nbsp;- so be sure to check back often. &nbsp;And if you can't find what you're looking for - don't hesitate&nbsp;to reach out&nbsp;by clicking the <span style="color: #008000;">green&nbsp;<strong>Help </strong>widget</span>&nbsp;on any of our pages.</em></p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":448,"align":"left","linkDestination":"custom"} -->
<div class="wp-block-image"><figure class="alignleft"><a href="/apidocs/wp-content/uploads/2014/09/unityLogo.png"><img src="/apidocs/wp-content/uploads/2014/09/unityLogo-150x150.png" alt="Unity Logo" class="wp-image-448"/></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><em><strong>Using Unity?</strong></em><em> Be sure to check out our&nbsp;<a href="https://staging.getbraincloud.com/apidocs/tutorials/unity-tutorials/">Unity Tutorials</a> and our&nbsp;<a href="https://staging.getbraincloud.com/apidocs/tutorials/unity-tutorials/braincloud-bombers-example-game/">brainCloud Bombers</a>&nbsp;example game!</em></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Not registered yet? What are you waiting for?!!</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To get started, all you need to do is:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a title="Register" href="https://portal.braincloudservers.com/signup#/" target="_blank" rel="noopener">Register</a> - it's free! *</li><li><a title="Download Client Libs" href="https://staging.getbraincloud.com/apidocs/client-libraries/" target="_blank" rel="noopener">Download</a>&nbsp;your preferred SDK</li><li>Get coding! &nbsp;Good luck!</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>* Free during development,&nbsp;and super reasonably priced thereafter. &nbsp;Details&nbsp;on our <a href="http://getbraincloud.com/pricing-overview/" target="_blank" rel="noopener">pricing</a> page.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>347</wp:post_id>
		<wp:post_date><![CDATA[2014-09-11 21:26:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-12 01:26:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[overview]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>13</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="api"><![CDATA[api]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="check"><![CDATA[check]]></category>
		<category domain="yst_prominent_words" nicename="client"><![CDATA[client]]></category>
		<category domain="yst_prominent_words" nicename="cloud"><![CDATA[cloud]]></category>
		<category domain="yst_prominent_words" nicename="cloud-code"><![CDATA[cloud code]]></category>
		<category domain="yst_prominent_words" nicename="code"><![CDATA[code]]></category>
		<category domain="yst_prominent_words" nicename="concepts"><![CDATA[concepts]]></category>
		<category domain="yst_prominent_words" nicename="documentation"><![CDATA[documentation]]></category>
		<category domain="yst_prominent_words" nicename="find"><![CDATA[find]]></category>
		<category domain="yst_prominent_words" nicename="free"><![CDATA[free]]></category>
		<category domain="yst_prominent_words" nicename="key"><![CDATA[key]]></category>
		<category domain="yst_prominent_words" nicename="key-concepts"><![CDATA[key concepts]]></category>
		<category domain="yst_prominent_words" nicename="portal"><![CDATA[portal]]></category>
		<category domain="yst_prominent_words" nicename="sdk"><![CDATA[sdk]]></category>
		<category domain="yst_prominent_words" nicename="tutorials"><![CDATA[tutorials]]></category>
		<category domain="yst_prominent_words" nicename="unity"><![CDATA[unity]]></category>
		<category domain="yst_prominent_words" nicename="welcome"><![CDATA[welcome]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>API Explorer</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/api-explorer/</link>
		<pubDate>Tue, 02 Apr 2019 18:21:11 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=6064</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>When getting started with brainCloud, the API Explorer is one of the best pages to start on. It allows you to run API calls as if your a user using your app, without having to write any code!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The API Explorer simulates a client application talking to the brainCloud servers. So you will be able to test the various APIs and confirm their behaviors and JSON return formats.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":5731,"className":"add-border"} -->
<figure class="wp-block-image add-border"><img src="/apidocs/wp-content/uploads/2019/02/image-17.png" alt="" class="wp-image-5731"/><figcaption><em>Using the API reference to run various API calls on brainCloud.</em></figcaption></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>To get started, find the API Explorer on the <a href="https://portal.braincloudservers.com/admin/dashboard#/development/serverscripts-apitest"><em><strong>dashboard</strong></em></a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The first call you are going to run on on your App is the <a href="/apidocs/apiref/#wrapper-initialize">Initialize</a> call, to pair your app client with your app on brainCloud. Since your already in the context of your app from your dashboard, you need to perform the next step you user would, Authentication.</p>
<!-- /wp:paragraph -->

<!-- wp:spacer {"height":20} -->
<div style="height:20px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:image {"id":5719,"align":"right","className":"add-border"} -->
<div class="wp-block-image add-border"><figure class="alignright"><img src="/apidocs/wp-content/uploads/2019/02/image-16.png" alt="" class="wp-image-5719"/></figure></div>
<!-- /wp:image -->

<!-- wp:heading {"level":4} -->
<h4>API Explorer</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Choose the Service and Operation you wish to run. As mentioned earlier, you will always start with the <strong>Authenticate </strong>service and the <strong>Authenticate </strong>operation to first create a session. Click <strong>[Run]</strong> to authenticate</li><li>After you Authenticate, the Profile ID and Session ID values will be filled in with the user's profileId and sessionId values connected to that authentication.</li><li>The [su_tooltip style="blue" position=<g class="gr_ gr_9 gr-alert gr_gramm gr_inline_cards gr_run_anim Style replaceWithoutSep" id="9" data-gr-id="9">"north</g>" shadow="yes" close="no" behavior="hover" content="If you have the need to disable your app to fix a critical bug, you can use this check to give yourself access to API calls via the API Explorer."]<strong><em>Bypass App Enabled check</em></strong>[/su_tooltip] will allow you to continue to run API calls should you have disabled your app on the <strong>Design | Core App Info | Advanced Settings</strong> page.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":5757,"align":"left","className":"add-border"} -->
<div class="wp-block-image add-border"><figure class="alignleft"><img src="/apidocs/wp-content/uploads/2019/02/image-19.png" alt="" class="wp-image-5757"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>For each selected Operation, you would see a <strong>description</strong> of what the service does, along with an API Reference link.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Below that are the parameters the API call takes. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Wow! Authentication takes a lot of parameters. Don't worry, if you clicked on that <strong>View API</strong> link seen in the description, you will see in your client code, the API calls are much more streamlined and cleaned up. This authentication call in the API explorer shows what the raw server takes.</p>
<!-- /wp:paragraph -->

<!-- wp:spacer -->
<div style="height:100px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:image {"id":5686,"align":"center","width":667,"height":301,"className":"add-border"} -->
<div class="wp-block-image add-border"><figure class="aligncenter is-resized"><img src="/apidocs/wp-content/uploads/2019/02/image-13.png" alt="" class="wp-image-5686" width="667" height="301"/><figcaption><em>Screen capture from the API Reference, where the Authenticate call only takes three parameters.</em><br></figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p><em>Did you know? You can click on the link in the Profile Id to go directly to the user monitoring page for that user.</em></p></blockquote>
<!-- /wp:quote -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:spacer {"height":50,"className":"add-border"} -->
<div style="height:50px" aria-hidden="true" class="wp-block-spacer add-border"></div>
<!-- /wp:spacer -->

<!-- wp:heading {"level":4} -->
<h4>After Authentication</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Okay, your are authenticated.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Go to the <strong>Entity </strong>service and <strong>CreateEntity</strong> operation, which will allow you to create data objects connected to the current user profile.</li><li>Change the <strong>entityType</strong> parameter value to <strong>myEntityType</strong>. Example:</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":5799,"align":"right","width":298,"height":433,"className":"add-border"} -->
<div class="wp-block-image add-border"><figure class="alignright is-resized"><img src="/apidocs/wp-content/uploads/2019/02/image-22.png" alt="" class="wp-image-5799" width="298" height="433"/><figcaption><em> JSON response of running GetEntitiesByType</em></figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
  "entityType": "myEntityType",
  "data": {
    "street": "1309 Carling"
  },
  "acl": {
    "other": 0
  }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:list -->
<ul><li> Now click <strong>[Run]</strong>!</li><li>After running, you will see the JSON response from the server on the right of the screen of the object you just created. Click run a few more times to create additional objects.</li><li>Now change the operation to <strong>GetEntitiesByType</strong>, and change the entityType parameter to <g class="gr_ gr_13 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace" id="13" data-gr-id="13">myEntityType</g>. Run it again.</li><li>See all the entities you made now appear in a list? Copy one of the <strong><g class="gr_ gr_16 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace" id="16" data-gr-id="16">entityId</g> </strong>values, and change the operation to <strong>DeleteEntity</strong></li><li>Enter your copied entity id as the <g class="gr_ gr_17 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace" id="17" data-gr-id="17">entityId</g> value in parameters, and run it one final time. </li></ul>
<!-- /wp:list -->

<!-- wp:spacer {"height":60} -->
<div style="height:60px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>You authenticated as a user, created several entities, queried them from the server, and deleted one! </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Try other aspects of the API Explorer to try out the API. Reference these docs and the API reference to gain additional understanding on how to use each service and operation!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6064</wp:post_id>
		<wp:post_date><![CDATA[2019-04-02 14:21:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-02 18:21:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[api-explorer]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>24</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="api-calls"><![CDATA[api calls]]></category>
		<category domain="yst_prominent_words" nicename="api-explorer"><![CDATA[api explorer]]></category>
		<category domain="yst_prominent_words" nicename="api-reference"><![CDATA[api reference]]></category>
		<category domain="yst_prominent_words" nicename="app"><![CDATA[app]]></category>
		<category domain="yst_prominent_words" nicename="authentication"><![CDATA[authentication]]></category>
		<category domain="yst_prominent_words" nicename="call"><![CDATA[call]]></category>
		<category domain="yst_prominent_words" nicename="change-the-entitytype"><![CDATA[change the entitytype]]></category>
		<category domain="yst_prominent_words" nicename="change-the-entitytype-parameter"><![CDATA[change the entitytype parameter]]></category>
		<category domain="yst_prominent_words" nicename="change-the-operation"><![CDATA[change the operation]]></category>
		<category domain="yst_prominent_words" nicename="entitytype-parameter"><![CDATA[entitytype parameter]]></category>
		<category domain="yst_prominent_words" nicename="explorer"><![CDATA[explorer]]></category>
		<category domain="yst_prominent_words" nicename="json-response"><![CDATA[json response]]></category>
		<category domain="yst_prominent_words" nicename="operation"><![CDATA[operation]]></category>
		<category domain="yst_prominent_words" nicename="profile-id"><![CDATA[profile id]]></category>
		<category domain="yst_prominent_words" nicename="reference"><![CDATA[reference]]></category>
		<category domain="yst_prominent_words" nicename="run"><![CDATA[run]]></category>
		<category domain="yst_prominent_words" nicename="run-api"><![CDATA[run api]]></category>
		<category domain="yst_prominent_words" nicename="run-api-calls"><![CDATA[run api calls]]></category>
		<category domain="yst_prominent_words" nicename="service-and-operation"><![CDATA[service and operation]]></category>
		<category domain="yst_prominent_words" nicename="user"><![CDATA[user]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Bundling API Calls</title>
		<link>https://staging.getbraincloud.com/apidocs/bundling-api-calls/</link>
		<pubDate>Tue, 13 Aug 2019 19:37:43 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=6444</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>brainCloud track's most API calls with brainCloud as +1 API call.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Some API calls that involve communicating with external systems are an additional +1's - like sending a mail is +1 API, and +1 Emails Sent. Sending a request to an external server is +1 API and +1 Outgoing Web Service.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This following document will explain how brainCloud client bundles API calls, and how you can use cloud code to reduce API counts.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>Performing separate API calls</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>After your end-user authenticates, let's say your app wishes to set the user's attributes, name, and get their current user state.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">var attributes = BrainCloud.JsonFx.Json.JsonWriter.Serialize(
	new Dictionary&lt;string, object>
	{
		{"favoriteCoffee", "darkRoast"}
	});
var wipeExisting = false;
var displayName = "John Doe";

Task.Delay(100).ContinueWith(_ =>
	_bc.PlayerStateService.ReadUserState(successCallback, failureCallback));
Task.Delay(300).ContinueWith(_ =>
	_bc.PlayerStateService.UpdateAttributes(attributes, wipeExisting, successCallback,
		failureCallback));
Task.Delay(500).ContinueWith(_ =>
	_bc.PlayerStateService.UpdateUserName(displayName, successCallback, failureCallback));

</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>These actions count as +3 API calls.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":6450,"align":"right","className":"add-border"} -->
<div class="wp-block-image add-border"><figure class="alignright"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/08/SeparateApiCalls.png" alt="" class="wp-image-6450"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>You will be able to review each an every API call made on the brainCloud portal.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>Merging API calls into one packet</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In cases where multiple API calls occur at the same time, the brainCloud client will automatically bundle them into one packet.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">_bc.PlayerStateService.ReadUserState(successCallback, failureCallback);
_bc.PlayerStateService.UpdateAttributes(attributes, wipeExisting, successCallback, failureCallback);
_bc.PlayerStateService.UpdateUserName(displayName, successCallback, failureCallback);</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:image {"id":6452,"align":"right","className":"add-border"} -->
<div class="wp-block-image add-border"><figure class="alignright"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/08/BundledApiCalls.png" alt="" class="wp-image-6452"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>On the brainCloud Monitoring dashboard, a bundle packet will look like the following.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The brainCloud server will also respond in one packet. The client library will automatically split the packet responses for the appropriate success and failure callbacks.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that this bundling does not affect the tracking of API counts. Each API call is still executed separately on the server, and the above example will always count as +3 API calls.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>Using cloud code to merge API calls together</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Let's say in your example, you are always going to be calling ReadUserState, UpdateAttributes, and UpdateUserName at the same time. There is a method of bundling these three API calls, that will allow us to <em>reduce the API count</em>, and that method is cloud code.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you are new to cloud code, getting started tutorials can be found <a href="https://staging.getbraincloud.com/apidocs/cloud-code-central/cloud-code-tutorials/">here</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So on the brainCloud portal, you are going to create the following cloud code script call <code>SetUserStateData</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"js"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="js" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">var response = {};

var playerStateProxy = bridge.getPlayerStateServiceProxy();

var attributes = data.attributes;
var wipeExisting = data.wipeExisting;
var playerStateProxy = bridge.getPlayerStateServiceProxy();
response.updateAttributesResponse = playerStateProxy.updateAttributes(attributes, wipeExisting);

var displayName = data.displayName;
var playerStateProxy = bridge.getPlayerStateServiceProxy();
response.updateUserNameResponse = playerStateProxy.updateUserName(displayName);

response.userState = playerStateProxy.readUserState();

response;</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>This script will handle the <code>updateAttributes</code> and <code>updateUserName</code> functions, while also returning the user read <code>userState</code>.<br>In your app, you can now merge those three processes into one single method that calls the cloud code script.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">string scriptName = "SetUserStateData";
var userStateData = BrainCloud.JsonFx.Json.JsonWriter.Serialize(
    new Dictionary&lt;string, object>
    {
        {
            "attributes", new Dictionary&lt;string, object>
            {
                {"favoriteCoffee", "darkRoast"}
            }
        },
        {"wipeExisting", false},
        {"displayName", "John Doe"}
    });

_bc.ScriptService.RunScript(scriptName, userStateData, successCallback, failureCallback);</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>The first three API calls made in a cloud code script are free, and future API calls can occur at 1/2+ API count. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Find additional information on pricing rules related rules <a href="http://help.getbraincloud.com/en/articles/82325-how-does-braincloud-pricing-work">here</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So besides neatly packaging related logic together into one cloud code script, you have successfully reduced your ongoing API counts by +2!</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>Concluding thoughts</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Before releasing your app, you should check which API calls brainCloud is merging together into one packet, and use that as a starting point of where you should start merging API calls into one cloud code script.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Merge similar logic when applicable, to bundle logic, but also to reduce overall API counts when the bulk of your end-users start using your app.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Happy coding!<br></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6444</wp:post_id>
		<wp:post_date><![CDATA[2019-08-13 15:37:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-13 19:37:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bundling-api-calls]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="1-api"><![CDATA[1 api]]></category>
		<category domain="yst_prominent_words" nicename="1-api-and-1"><![CDATA[1 api and 1]]></category>
		<category domain="yst_prominent_words" nicename="3-api"><![CDATA[3 api]]></category>
		<category domain="yst_prominent_words" nicename="3-api-calls"><![CDATA[3 api calls]]></category>
		<category domain="yst_prominent_words" nicename="api-and-1"><![CDATA[api and 1]]></category>
		<category domain="yst_prominent_words" nicename="api-call"><![CDATA[api call]]></category>
		<category domain="yst_prominent_words" nicename="api-counts"><![CDATA[api counts]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-client"><![CDATA[braincloud client]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-portal"><![CDATA[braincloud portal]]></category>
		<category domain="yst_prominent_words" nicename="cloud"><![CDATA[cloud]]></category>
		<category domain="yst_prominent_words" nicename="cloud-code"><![CDATA[cloud code]]></category>
		<category domain="yst_prominent_words" nicename="cloud-code-script"><![CDATA[cloud code script]]></category>
		<category domain="yst_prominent_words" nicename="code"><![CDATA[code]]></category>
		<category domain="yst_prominent_words" nicename="code-script"><![CDATA[code script]]></category>
		<category domain="yst_prominent_words" nicename="count-as-3"><![CDATA[count as 3]]></category>
		<category domain="yst_prominent_words" nicename="count-as-3-api"><![CDATA[count as 3 api]]></category>
		<category domain="yst_prominent_words" nicename="count-as-3-api-calls"><![CDATA[count as 3 api calls]]></category>
		<category domain="yst_prominent_words" nicename="merging-api"><![CDATA[merging api]]></category>
		<category domain="yst_prominent_words" nicename="merging-api-calls"><![CDATA[merging api calls]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Authentication -Google - Archived</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/authentication-google-2/</link>
		<pubDate>Mon, 12 Apr 2021 20:32:26 +0000</pubDate>
		<dc:creator><![CDATA[jasonl]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=7153</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 id="AndroidGoogleSetupandAuth(v4)-AppCreation">App Creation</h1>
<!-- /wp:heading -->

<!-- wp:heading -->
<h2>Step 1</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Go to the Google Play Console and create your app:<br><a href="https://play.google.com/apps/publish/" target="_blank" rel="noreferrer noopener" aria-label="https://play.google.com/apps/publish/ (opens in a new tab)">https://play.google.com/apps/publish/</a> </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":4211,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2018/01/1.png"><img src="/apidocs/wp-content/uploads/2018/01/1.png" alt="" class="wp-image-4211"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><em>Fill in the rest of the page as required.</em></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Step 2</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>With <g class="gr_ gr_9 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Punctuation only-ins replaceWithoutSep" id="9" data-gr-id="9">you</g>r app selected, navigate to <strong>Services &amp; APIs</strong> section of the left sidebar.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Click the <strong>[USE GOOGLE PLAY GAME SERVICES IN THIS APP] </strong>button.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":4212,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2018/01/2.png"><img src="/apidocs/wp-content/uploads/2018/01/2.png" alt="" class="wp-image-4212"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Click <strong>[Add New Game]</strong>, and enter the <em>name</em> of <em>type</em> of the app</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Step 3</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Go to the <strong>Google Cloud Console</strong> (<a href="https://console.cloud.google.com">https://console.cloud.google.com</a>) and select your app from the drop-down at the top of the page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you don't see your app, ensure you're on the All tab, or search for the app's name</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":4213,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2018/01/3.png"><img src="/apidocs/wp-content/uploads/2018/01/3.png" alt="" class="wp-image-4213"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3 id="AndroidGoogleSetupandAuth(v4)-SetupforGooglePlayServices">Step 4</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In the left-hand menu, choose <strong>APIs &amp; Services &gt; Dashboard</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You should see that Google Play Game Services is enabled, along with some other stock services.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":4214,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2018/01/4.png"><img src="/apidocs/wp-content/uploads/2018/01/4-1024x360.png" alt="" class="wp-image-4214"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>If you don't see Google Player Services, click <strong>[ + ENABLE APIS AND SERVICES ]</strong> and enable it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now in the Google Cloud Console Window, under <strong>APIs &amp; Services</strong> choose <strong>Credentials</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Click the <strong>OAuth</strong> Consent tab.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Set the <strong>Application Name</strong></li><li>Set the <strong>Support Email</strong></li><li>Set the Privacy policy URL. You do not have to do this for development, but you will run into problems if you don't add one in production!</li><li>Fill in any other required fields</li><li>Hit <strong>[ Save ]</strong></li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":4215,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2018/01/5.png"><img src="/apidocs/wp-content/uploads/2018/01/5.png" alt="" class="wp-image-4215"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Click the&nbsp;<strong>Credentials</strong> tab</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Click the <strong>[ Create Credentials ]</strong> drop-down, and choose <g class="gr_ gr_96 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Grammar only-ins replaceWithoutSep" id="96" data-gr-id="96">"</g><strong><g class="gr_ gr_96 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Grammar only-ins replaceWithoutSep" id="96" data-gr-id="96">OAuth</g> client ID</strong>" option</li><li>Choose <strong>"Web Application"</strong> as the <strong>Application type</strong></li><li>Give it a name - maybe "brainCloud web access"</li><li>Click <strong>[ Create ]</strong></li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":4216,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2018/01/6.png"><img src="/apidocs/wp-content/uploads/2018/01/6.png" alt="" class="wp-image-4216"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>This will give you a <strong>client Id</strong> and <strong>client secret</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":6081} -->
<figure class="wp-block-image"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/05/2019-05-14_16-14-43.png" alt="" class="wp-image-6081"/></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>Step 5</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Go to your app in the <strong>brainCloud Portal</strong>:&nbsp;<a href="https://portal.braincloudservers.com/">https://portal.braincloudservers.com/</a></li><li>In <strong>Design | Core App Info | Application Ids</strong> &gt; Select the <strong>Google</strong> Tab in "Configure Platforms"</li><li>Enter the <strong>Google Client Id</strong> and the <strong>Google Client Secret</strong>.</li><li>Enter the <strong>Google App Id</strong> (the numbers right before the dash in the Google Client Id)</li><li>Enter the <strong>Google Package Name</strong></li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":4217,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2018/01/7.png"><img src="/apidocs/wp-content/uploads/2018/01/7.png" alt="" class="wp-image-4217"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>Step 6</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Back on the Google Cloud Console "Credentials" tab</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Click <strong>"Create credentials"</strong> &gt; <strong>"Service account key"</strong></li><li>For <strong>Service account</strong>, select "<strong>New Service Account</strong>"</li><li>Give it a <strong>name</strong>, and an "<strong>Owner</strong>" role &lt;- probably <strong>Project | Owner</strong></li><li>For <strong>Key type</strong>, select "P12"</li><li>Click <strong>[ Create ]</strong></li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":4218,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2018/01/8.png"><img src="/apidocs/wp-content/uploads/2018/01/8.png" alt="" class="wp-image-4218"/></a></figure>
<!-- /wp:image -->

<!-- wp:image {"id":6084} -->
<figure class="wp-block-image"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/05/2019-05-14_16-24-03.png" alt="" class="wp-image-6084"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Keep that P12 Key!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Step 7</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>On that same page...</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Click "<strong>Manage Service Accounts</strong>"</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>You should see your new service account on this page, and have a P12 file saved locally from earlier</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Copy the Service Account <strong>Email</strong> -  eg. &nbsp;"authentication@authencation-69372532.iam.gserviceaccount.com"</li><li>Go back to the brainCloud Portal, <strong>Design | Core App Info | Application Ids</strong> page - <strong>Google Tab</strong> under <em>Configure Platforms</em></li><li>Enter the <strong>Google Service Account Email</strong> that you had copied</li><li>Click "Select a certificate file" and add the saved P12</li><li>Save your changes!</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":4219,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2018/01/9.png"><img src="/apidocs/wp-content/uploads/2018/01/9.png" alt="" class="wp-image-4219"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":1} -->
<h1 id="AndroidGoogleSetupandAuth(v4)-CreateaKeyStore">Create a KeyStore</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Create a key store. View this document to find out how:&nbsp;<a href="https://developer.android.com/studio/publish/app-signing.html">https://developer.android.com/studio/publish/app-signing.html</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now in the Google Cloud Console Window, go to APIs &amp; Services &gt; Credentials</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Click "Create Credentials" &gt; "OAuth client ID"</li><li>Select "Android" as Application type (this will be used to pair your app with Google Play Services!)</li><li>Give it a name</li><li>Enter your SHA1 from your keystore. To get the SHA1, use the listed command on your saved keystore<br>ex. keytool -exportcert -keystore authentication-shared.keystore -list -v</li><li>Enter the package name you defined earlier<br>ex. com.brainCloud.Authenication</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":4220,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2018/01/10.png"><img src="/apidocs/wp-content/uploads/2018/01/10.png" alt="" class="wp-image-4220"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Then in Game Services of the Google Play Console</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Select your app</li><li>Select "Linked Apps"&nbsp;on the left sidebar</li><li>Click Android</li><li>Enter your package name</li><li>Click "Save and Continue"</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>It should say it has been&nbsp;successfully linked, and display your client id.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Use this paired keystore when&nbsp;signing your app in the "Configuring Google Play Services in Code" section</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1 id="AndroidGoogleSetupandAuth(v4)-EnablingTesters">Enabling Testers</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you set up your app like above, you may still run into problems with the Google Auth. This is because testers need to be enabled on the Google Play Console</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In Game Services of the Google Play Console</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Select your app</li><li>Select "Testing" on the left sidebar</li><li>Click "Add Testers"</li><li>Add the email addresses&nbsp;associated with the Google Play accounts you plan to test with</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>If you skip this step, you may see the Google Play popup on authentication with your android device, but while your app is in development, you will get not the Google Tokens needed to authenticate.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":4221,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2018/01/11.png"><img src="/apidocs/wp-content/uploads/2018/01/11.png" alt="" class="wp-image-4221"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":1} -->
<h1 id="AndroidGoogleSetupandAuth(v4)-ConfiguringGooglePlayServicesinCode">Configuring Google Play Services in Code</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Get the Unity Package from this GitHub repo, and follow the instructions: <a href="https://github.com/playgameservices/play-games-plugin-for-unity">https://github.com/playgameservices/play-games-plugin-for-unity﻿</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The above link will inform you to create an achievement on the Google Play Console, so you can export a similar XML example to pair the plugin with.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"xml"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="xml" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">&lt;?xml version="1.0" encoding="utf-8"?> &lt;!-- Google Play game services IDs. Save this file as res/values/games-ids.xml in your project. --> &lt;resources> &lt;!-- app_id --> &lt;string name="app_id" translatable="false">1074452757487&lt;/string> &lt;!-- package_name --> &lt;string name="package_name" translatable="false">com.brainCloud.Authentication&lt;/string> &lt;!-- achievement Welcome --> &lt;string name="achievement_welcome" translatable="false">CgkI7_f_0qIfEAIQAw&lt;/string> &lt;/resources></pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>In Unity's Player Settings for Android, you'll need to add the keystore file and package name created earlier.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can see our GitHub&nbsp;Authentication project example for reference.<br><a href="https://github.com/getbraincloud/UnityExamples/tree/master/Authentication">https://github.com/getbraincloud/UnityExamples/tree/master/Authentication</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>Note that because of the&nbsp;Enabling Testers step, you will not be able to authenticate with brainCloud Authenticate example, as is.&nbsp;</em>You will need to alter the current setup for your own test app.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You'll be able to log in via Google Play Services and brainCloud with the following code</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">if (GUILayout.Button("Google Signin + brainCloud Authenticate", GUILayout.ExpandWidth(false)))
            {
                PlayGamesClientConfiguration config = new PlayGamesClientConfiguration.Builder()
                    .RequestIdToken()
                    .RequestServerAuthCode(false)
                    .Build();
                
                PlayGamesPlatform.InitializeInstance (config);
                PlayGamesPlatform.Activate().Authenticate((bool success) => {

                    if (success)
                    {
                        m_googleId = PlayGamesPlatform.Instance.GetUserId();
                        m_serverAuthCode = PlayGamesPlatform.Instance.GetServerAuthCode();    
                        
                        BrainCloudWrapper.GetInstance().AuthenticateGoogle(m_googleId, m_serverAuthCode, true, OnSuccess_Authenticate, OnError_Authenticate);
                    }
                    else
                    {
                       // Handle Error State
                    }
                });
            }</pre>
<!-- /wp:enlighter/codeblock -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7153</wp:post_id>
		<wp:post_date><![CDATA[2021-04-12 16:32:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-04-12 20:32:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[authentication-google-2]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>49</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Getting started with Unity (Video)</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/unity-tutorials/unity-tutorial-1-getting-started/</link>
		<pubDate>Wed, 29 Oct 2014 02:46:45 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://apidocs.braincloudservers.com/?page_id=409</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>In this tutorial, brainCloud Development Manager Preston Jennings describes how to&nbsp;quickly get&nbsp;your Unity project working with brainCloud.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Topics covered include:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>The "brainCloud Example" Unity Project</li><li>The brainCloud Design Portal</li><li>Connecting to the brainCloud Platform (Authentication)</li><li>Using and defining brainCloud Player Statistics</li></ul>
<!-- /wp:list -->

<!-- wp:shortcode -->
[embed]https://youtu.be/g9cnUx1rZdI[/embed]
<!-- /wp:shortcode -->

<!-- wp:paragraph -->
<p>You can download the SpaceShooter example from <a href="https://github.com/getbraincloud/UnityExamples" target="_blank" rel="noopener">here</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The brainCloud Unity stand-alone library can be found <a href="https://github.com/getbraincloud/Unity-Csharp" target="_blank" rel="noopener">here</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Stay tuned for more tutorial videos!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>409</wp:post_id>
		<wp:post_date><![CDATA[2014-10-28 22:46:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-10-29 02:46:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[unity-tutorial-1-getting-started]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>572</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="example"><![CDATA[example]]></category>
		<category domain="yst_prominent_words" nicename="project"><![CDATA[project]]></category>
		<category domain="yst_prominent_words" nicename="tutorial"><![CDATA[tutorial]]></category>
		<category domain="yst_prominent_words" nicename="unity"><![CDATA[unity]]></category>
		<category domain="yst_prominent_words" nicename="unity-project"><![CDATA[unity project]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_7a554120d6050419ecd3a00af8e78dc2]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_c7df46526aee48eeedb6d4fe56ab354b]]></wp:meta_key>
		<wp:meta_value><![CDATA[<iframe width="474" height="356" src="http://www.youtube.com/embed/YTb92oHHSLA?feature=oembed" frameborder="0" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_c7df46526aee48eeedb6d4fe56ab354b]]></wp:meta_key>
		<wp:meta_value><![CDATA[1414550252]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_94c1f2a216ecadfe4e8f33fc67cab9c6]]></wp:meta_key>
		<wp:meta_value><![CDATA[<iframe width="474" height="356" src="https://www.youtube.com/embed/YTb92oHHSLA?feature=oembed" frameborder="0" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_94c1f2a216ecadfe4e8f33fc67cab9c6]]></wp:meta_key>
		<wp:meta_value><![CDATA[1414785124]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_45cda0b10eb87c6f69728995fd80a961]]></wp:meta_key>
		<wp:meta_value><![CDATA[<iframe width="474" height="356" src="https://www.youtube.com/embed/hvgaJ74fFLo?feature=oembed" frameborder="0" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_45cda0b10eb87c6f69728995fd80a961]]></wp:meta_key>
		<wp:meta_value><![CDATA[1447962339]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_2342e4c9f7b1495475d2696d85e3c805]]></wp:meta_key>
		<wp:meta_value><![CDATA[<iframe width="474" height="356" src="https://www.youtube.com/embed/g9cnUx1rZdI?feature=oembed" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_2342e4c9f7b1495475d2696d85e3c805]]></wp:meta_key>
		<wp:meta_value><![CDATA[1550013217]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_b24e3b40689e58623578d8becc30e38f]]></wp:meta_key>
		<wp:meta_value><![CDATA[<iframe title="Getting started with brainCloud in Unity" width="640" height="480" src="https://www.youtube.com/embed/g9cnUx1rZdI?feature=oembed" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_b24e3b40689e58623578d8becc30e38f]]></wp:meta_key>
		<wp:meta_value><![CDATA[1558141624]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Design Portal</title>
		<link>https://staging.getbraincloud.com/apidocs/introduction-2/design-portal/</link>
		<pubDate>Wed, 26 Nov 2014 06:57:35 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://apidocs.braincloudservers.com/?page_id=488</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>The brainCloud Design Portal is 4 powerful tools in one:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><strong>Design Tool</strong>&nbsp;– it’s a design tool that allows you to create, configure and define your applications.</li><li><strong>API Explorer</strong>&nbsp;– it includes an expansive API Explorer that allows you to query your configured application dynamically without writing code! &nbsp;Super handy for debugging and exploring the brainCloud API</li><li><strong>Monitoring Tool</strong>&nbsp;–&nbsp;the monitoring features provide easy debugging of global and user data – and are also very useful in supporting your app once it goes live.</li><li><strong>Reporting</strong>&nbsp;– brainCloud’s reporting features provide cross-platform analytics, as well as&nbsp;an API usage report that is useful for understanding the usage and performance of your application.</li></ol>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_Dashboard_portal_2.jpg"><img src="/apidocs/wp-content/uploads/2016/08/brainCloud_Dashboard_portal_2.jpg" alt="brainCloud Dashboard"/></a></figure>
<!-- /wp:image -->

<!-- wp:spacer {"height":50} -->
<div style="height:50px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:paragraph -->
<p>The brainCloud portal is used by developers, designers, and product managers to configure, design and publish a game. Each role has a different set of everyday tasks that they will use the portal to achieve.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4><strong><g class="gr_ gr_6 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace replaceWithoutSep replaceWithoutSep" id="6" data-gr-id="6">Developers</g></strong></h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><g class="gr_ gr_6 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace replaceWithoutSep replaceWithoutSep" id="6" data-gr-id="6">Developers</g> use the Portal to perform the following actions:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Create new applications</li><li>Download client libraries</li><li>Test brainCloud API calls using the API Explorer</li><li>Create persistent data either in the form of player statistics, game statistics or global data</li><li>Debug an application by checking the application logs</li><li>Upload asset files used in the app or game</li><li>Create API Hooks and scripts for cloud code</li><li>Configure push notifications</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4><strong>Designers</strong></h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Designers use the Portal to design and tweak the game experience by defining:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>XP Levels</li><li>Achievements</li><li>Milestones</li><li>Quests</li><li>Statistics Events</li><li>Define game leaderboards and leaderboard pacers.</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4><strong>Product Managers</strong></h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Product managers use the Portal to:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Define Products</li><li>Define Promotions</li><li>View Analytics</li><li>Define Market Segments for promotions</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>488</wp:post_id>
		<wp:post_date><![CDATA[2014-11-26 01:57:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-26 06:57:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[design-portal]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>73</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="api"><![CDATA[api]]></category>
		<category domain="yst_prominent_words" nicename="api-explorer"><![CDATA[api explorer]]></category>
		<category domain="yst_prominent_words" nicename="application"><![CDATA[application]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-api"><![CDATA[braincloud api]]></category>
		<category domain="yst_prominent_words" nicename="configure"><![CDATA[configure]]></category>
		<category domain="yst_prominent_words" nicename="create"><![CDATA[create]]></category>
		<category domain="yst_prominent_words" nicename="data"><![CDATA[data]]></category>
		<category domain="yst_prominent_words" nicename="define"><![CDATA[define]]></category>
		<category domain="yst_prominent_words" nicename="design"><![CDATA[design]]></category>
		<category domain="yst_prominent_words" nicename="design-tool"><![CDATA[design tool]]></category>
		<category domain="yst_prominent_words" nicename="designers"><![CDATA[designers]]></category>
		<category domain="yst_prominent_words" nicename="developers"><![CDATA[developers]]></category>
		<category domain="yst_prominent_words" nicename="explorer"><![CDATA[explorer]]></category>
		<category domain="yst_prominent_words" nicename="features-provide"><![CDATA[features provide]]></category>
		<category domain="yst_prominent_words" nicename="game"><![CDATA[game]]></category>
		<category domain="yst_prominent_words" nicename="portal"><![CDATA[portal]]></category>
		<category domain="yst_prominent_words" nicename="product"><![CDATA[product]]></category>
		<category domain="yst_prominent_words" nicename="product-managers"><![CDATA[product managers]]></category>
		<category domain="yst_prominent_words" nicename="tool"><![CDATA[tool]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Getting Started with Cocos2d-x</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/cocos2d-x-tutorials/cocos-2dx-example-1-getting-started/</link>
		<pubDate>Fri, 28 Nov 2014 20:00:28 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://apidocs.braincloudservers.com/?page_id=531</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This tutorial&nbsp;will get you started with integrating the brainCloud library in your Cocos2d-x game. We've included an example project that runs through some basic brainCloud operations. Please excuse the lackluster UI.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The example project has been tested using the iOS simulator and device (32 and 64-bit architectures) as well as the Android simulator and device (using a mac build environment). The rest of the platforms (windows etc) haven't been tested at all so likely they will fail to compile and/or run. We will be updating the example project soon to provide support for these additional platforms.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Assumptions</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Before starting you should make sure you've done the following:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Created a brainCloud Portal account</li><li>Created a game in the brainCloud Portal. If you need help with this step refer to the Unity tutorial #1 video.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Onwards!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Download the Example Project</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="http://d28b58vufdqdih.cloudfront.net/brainCloudExamples/cpp/brainCloudExample_Cocos2dx_0.11.3_165242.zip">Download the example</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Version History</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>0.11.3 - Updated to latest 2.14 brainCloud library</li><li>0.11.2 - Minor update</li><li>0.11.1 - Added support for Android</li><li>0.10.1 - Integrated Cocos2d-x 3.3 and added Facebook authentication support</li><li>0.9.2 - Integrated Cocos2d-x 3.3 rc1 which fixed 32-bit targets failing to link.</li><li>0.9.1 - Fixed hardcoded library path</li><li>0.9.0 - Initial Release</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Create&nbsp;initial Cocos2d-x project</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you haven't already created your basic game folder structure, follow the Cocos2d-x steps to do so. See the "How To Start A New Game" section here:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://github.com/cocos2d/cocos2d-x">https://github.com/cocos2d/cocos2d-x</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In our examples below we will assume our game is called "MyGame".</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Download the latest brainCloud libraries</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Log into the brainCloud portal and grab the latest brainCloud client libraries. When you first log in you will see a link to the client libraries in the left hand nav bar. Click this link and grab the appropriate library for your development platform.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":542,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="http://apidocs.braincloudservers.com/wp-content/uploads/2014/11/brainCloud_Dashboard_Project_Cyber.png"><img src="http://apidocs.braincloudservers.com/wp-content/uploads/2014/11/brainCloud_Dashboard_Project_Cyber.png" alt="brainCloud_Dashboard_Project_Cyber" class="wp-image-542"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Note that if you are already logged into the portal you can return to the Home page/Administration area by clicking the gear icon in the upper right.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Project Configuration</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>&nbsp;</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3><figure><img class="alignnone size-full wp-image-780" src="/apidocs/wp-content/uploads/2014/11/1423795127_16-apple-64.png" alt="1423795127_16-apple-64" width="64" height="64"></figure></h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>iOS</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":4} -->
<h4>Add brainCloud library to the project</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Open the XCode project in <em>proj.ios_mac/MyGame.xcodeproj</em></li><li>Because I'm paranoid I hit run just to make sure the project Cocos2d-x generated actually compiles and runs</li><li>Unzip the brainCloud libraries into a platform specific folder in your game project. I ended up creating a path that looks like this:<em>MyGame/libs/ios/brainCloud.</em>Underneath this folder would be include, libs, src and thirdparty.</li><li>Add the brainCloud folder to the project by right clicking on the project and select "Add Files to MyGame..."<figure><a href="http://apidocs.braincloudservers.com/wp-content/uploads/2014/11/Fullscreen_2014-12-02__9_02_AM.png"><img class="alignnone size-full wp-image-543" src="http://apidocs.braincloudservers.com/wp-content/uploads/2014/11/Fullscreen_2014-12-02__9_02_AM.png" alt="Fullscreen_2014-12-02__9_02_AM" width="295" height="233"></a></figure></li></ul>
<!-- /wp:list -->

<!-- wp:list -->
<ul><li>Point to the libs folder you just created and make sure the "Create Groups" option is selected. You should now see a folder structure like the image below:<figure><a href="http://apidocs.braincloudservers.com/wp-content/uploads/2014/11/MyGame_xcodeproj.png"><img class="alignnone wp-image-544 size-full" src="http://apidocs.braincloudservers.com/wp-content/uploads/2014/11/MyGame_xcodeproj.png" alt="MyGame_xcodeproj" width="224" height="225"></a></figure></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4>Build Settings</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In order to compile we need to set up a few include and link paths. Open up build settings and execute the following steps:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>In "Header Search Paths", add the following include:<em><em>$(SRCROOT)/../libs/ios/brainCloud/thirdparty/jsoncpp-1.0.0</em></em><figure><a href="http://apidocs.braincloudservers.com/wp-content/uploads/2014/11/MyGame_xcodeproj-2.png"><img class="alignnone wp-image-545 size-full" src="http://apidocs.braincloudservers.com/wp-content/uploads/2014/11/MyGame_xcodeproj-2.png" alt="MyGame_xcodeproj 2" width="478" height="238"></a></figure></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4>Build Phases</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Execute the following steps under the "Build Phases" menu:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Under "Link Binary With Libraries" add the following Frameworks:
<ul>
<li>GameKit.framework</li>
<li>Security.framework</li>
</ul>
</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Your iOS project is now setup!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>&nbsp;</h2>
<!-- /wp:heading -->

<!-- wp:heading -->
<h2><figure><img class="alignnone size-full wp-image-781" src="/apidocs/wp-content/uploads/2014/11/1423795117_android-64.png" alt="1423795117_android-64" width="64" height="64"></figure></h2>
<!-- /wp:heading -->

<!-- wp:heading -->
<h2>Android</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>Prerequisites</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Install Android Studio (the important part is the <a href="http://developer.android.com/tools/help/sdk-manager.html">SDK manager</a>)</li><li>Install the Android SDK using the SDK Manager. I used 4.0 aka android-14</li><li>Install&nbsp;the <a href="https://developer.android.com/tools/sdk/ndk/index.html">Android NDK </a>- I used r10d</li><li>Install <a href="https://eclipse.org/">Eclipse</a></li><li>Install the Eclipse <a href="http://developer.android.com/tools/sdk/eclipse-adt.html">ADT Plugin</a></li><li>Set your NDK path in Eclipse properties</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Quickstart guide to running the example Android project</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The example project needs a few extra steps before you can run it properly. Namely you will need to:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Open Eclipse and import the project using the "Existing Projects into Workspace" option.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":782,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2014/11/Import_and_Java_EE_-_Eclipse_-__Users_prestonjennings_Documents_workspace.png"><img src="/apidocs/wp-content/uploads/2014/11/Import_and_Java_EE_-_Eclipse_-__Users_prestonjennings_Documents_workspace.png" alt="Import_and_Java_EE_-_Eclipse_-__Users_prestonjennings_Documents_workspace" class="wp-image-782"/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Select the "brainCloudExample/proj.android" folder</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":783,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2014/11/Import_and_Java_EE_-_Eclipse_-__Users_prestonjennings_Documents_workspace-2.png"><img src="/apidocs/wp-content/uploads/2014/11/Import_and_Java_EE_-_Eclipse_-__Users_prestonjennings_Documents_workspace-2.png" alt="Import_and_Java_EE_-_Eclipse_-__Users_prestonjennings_Documents_workspace 2" class="wp-image-783"/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Once the project is imported, right click on the project and select properties</li><li>In the Android section, select the appropriate Build Target. I'm using Google API 4.0</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":784,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2014/11/Properties_for_brainCloudExample.png"><img src="/apidocs/wp-content/uploads/2014/11/Properties_for_brainCloudExample.png" alt="Properties_for_brainCloudExample" class="wp-image-784"/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Next, go to C/C++ Build | Environment. Add a new environment variable "NDK_ROOT" and point it to your NDK folder. Make sure to check "Add to all configurations".</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":785,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2014/11/New_variable_and_Properties_for_brainCloudExample.png"><img src="/apidocs/wp-content/uploads/2014/11/New_variable_and_Properties_for_brainCloudExample.png" alt="New_variable_and_Properties_for_brainCloudExample" class="wp-image-785"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>You should now be setup to build the example project. To test things out, try setting the active build target to debug and doing a "Debug As | Android Native Application"</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Setting up your own Android project</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>After creating the cocos2d-x project skeleton, you can add brainCloud to your project by doing the following:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Unzip the Android library into a libs folder. I chose to put them in a top level folder (same level as the Classes directory). My folder structure looks like the following:<figure><a href="/apidocs/wp-content/uploads/2014/11/libs.png"><img class="alignnone size-full wp-image-818" src="/apidocs/wp-content/uploads/2014/11/libs.png" alt="libs" width="750" height="213"></a></figure></li></ul>
<!-- /wp:list -->

<!-- wp:list -->
<ul><li>Add the static library modules to your <g class="gr_ gr_4 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling" id="4" data-gr-id="4">jni</g>/Android.mk file. Note these should be before your main project definition (ie before the CLEAR_VARS) </li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">include $(CLEAR_VARS)
LOCAL_MODULE := braincloud
LOCAL_SRC_FILES := ../../libs/android/brainCloud/libs/$(TARGET_ARCH_ABI)/libbraincloud.a
include $(PREBUILT_STATIC_LIBRARY)

include $(CLEAR_VARS)
LOCAL_MODULE := curl
LOCAL_SRC_FILES := ../../cocos2d/external/curl/prebuilt/android/$(TARGET_ARCH_ABI)/libcurl.a
include $(PREBUILT_STATIC_LIBRARY)

include $(CLEAR_VARS)
LOCAL_MODULE := crypto
LOCAL_SRC_FILES := ../../cocos2d/external/curl/prebuilt/android/$(TARGET_ARCH_ABI)/libcrypto.a
include $(PREBUILT_STATIC_LIBRARY)

include $(CLEAR_VARS)
LOCAL_MODULE := ssl
LOCAL_SRC_FILES := ../../cocos2d/external/curl/prebuilt/android/$(TARGET_ARCH_ABI)/libssl.a
include $(PREBUILT_STATIC_LIBRARY)</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:list -->
<ul><li>Add the includes to&nbsp;<g class="gr_ gr_3 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling" id="3" data-gr-id="3">jni</g>/Android.mk: </li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">LOCAL_C_INCLUDES += $(LOCAL_PATH)/../../libs/android/brainCloud/include
LOCAL_C_INCLUDES += $(LOCAL_PATH)/../../libs/android/brainCloud/src
LOCAL_C_INCLUDES += $(LOCAL_PATH)/../../libs/android/brainCloud/thirdparty/jsoncpp-1.0.0</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:list -->
<ul><li>Add the source files to <g class="gr_ gr_3 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling" id="3" data-gr-id="3">jni</g>/Android.mk: </li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">define all-cpp-files-under
$(patsubst ./%,%, \
  $(shell cd $(LOCAL_PATH) ; \
    find $(1) -name "*.cpp" -and -not -name ".*") \
 )
endef

define all-subdir-braincloud-cpp-files
$(call all-cpp-files-under,../../libs/android/brainCloud/src)
endef

define all-subdir-json-cpp-files
$(call all-cpp-files-under,../../libs/android/brainCloud/thirdparty/jsoncpp-1.0.0)
endef

LOCAL_SRC_FILES += $(call all-subdir-braincloud-cpp-files)</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:list -->
<ul><li>Add the static library and c++ exception rule to jni/Android.mk:</li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">LOCAL_STATIC_LIBRARIES := cocos2dx_static braincloud curl crypto ssl

LOCAL_CPP_FEATURES += exceptions</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:list -->
<ul><li>Copy the AndroidBridge.java file from the brainCloud <g class="gr_ gr_6 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling" id="6" data-gr-id="6">javasrc</g> directory into your project's <g class="gr_ gr_5 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace" id="5" data-gr-id="5">java</g> source code directory</li><li>In the AppActivity.java file of your cocos project, add a call to AndroidBridge.initializeLocale(). We override the init method to accomplish this: <br></li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">@Override
public void init() 
{
	super.init();	
	AndroidBridge.initializeLocale();
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":4} -->
<h4>Optional - &nbsp;if you're creating a project from scratch you will probably need to do the following extra steps:</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Add the NDK_ROOT variable to your Project properties (C/C++ Build | Environment)</li><li>Add the minimum Android SDK variable to your AndroidManifest.xml file (we used 14 in the example project)</li><li>Add the minimum Android SDK to your Application.mk (APP_PLATFORM := android-14)</li><li>Set the minimum Android SDK in your Project properties (Android | Project Build Target)</li><li>Add the ABI to your Application.mk (APP_ABI := x86 armeabi)</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4>Windows 8.1 (TBD)</h4>
<!-- /wp:heading -->

<!-- wp:heading {"level":4} -->
<h4>Windows Phone (TBD)</h4>
<!-- /wp:heading -->

<!-- wp:heading {"level":4} -->
<h4>Windows 32 (TBD)</h4>
<!-- /wp:heading -->

<!-- wp:heading -->
<h2>Initialize brainCloud</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Now that you have your project setup, you will need to initialize the brainCloud client with your game id/secret and a few other items. For this we'll use the included "BrainCloudWrapper" class (in the src directory of the brainCloud client).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are a number of places where this can be done. We're going to use the AppDelegate class but you're welcome to put this initialization code wherever makes the most sense for your project.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Open AppDelegate.cpp</li><li>Add an include for BrainCloudWrapper to the top of the file:<br></li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">#include "BrainCloudWrapper.h"</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:list -->
<ul><li>Initialize BrainCloudWrapper with the appropriate parameters. </li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">const char * url = "https://sharedprod.braincloudservers.com/dispatcher"; 
const char * secretKey = "7014fb94-41e6-49cd-9a77-e50233d40133"; 
const char * gameId = "10068"; 
const char * gameVersion = "2.0"; 
const char * companyName = "bitHeads"; 
const char * gameName = "cocosExample"; 

BrainCloudWrapper::getInstance()->initialize(url, secretKey, gameId, gameVersion, companyName, gameName);
 
 </pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading -->
<h2>&nbsp;</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You will want to substitute the correct parameters for your game.&nbsp;The secretKey and gameId need to correspond to the values for your game in the portal (see the Unity Tutorial #1 video for more details).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The gameVersion, companyName, and gameName are up to you.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Hook up the Callback</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The next step is to ensure that the BrainCloudWrapper update method is being called&nbsp;regularly. This method is what triggers the brainCloud callback methods to execute (and sends/reads from the network pipe). In the cocos 2d-x example, you'll notice that the "MainScene" class includes an "update(float)" method which calls the BrainCloudWrapper update method:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">void MainScene::update(float dt)
{
    BrainCloudWrapper::getInstance()->update(dt);
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>MainScene kicks off the update method using this code in the init function:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">Director::getInstance()->getScheduler()->schedule(schedule_selector(MainScene::update), this, 0.1f, false);</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>So in the example, there is nothing to add. However it is important to note that when implementing brainCloud for your game you will have to ensure the BrainCloudWrapper update method is being called regularly.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Authentication</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Now that the&nbsp;brainCloud client library is initialized and the callback routine is hooked up, you can begin authentication with the server. There are various authentication methods available but for this simple example, we will use Universal authentication. This allows us to specify a username and password and automatically have the account created if it doesn't already exist.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a title="BrainCloudAuthentication" href="/apidocs/apiref/#capi-auth">See more details on Authentication here</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In our example project, you can navigate to "ConnectUniversalLayer.h/cpp" to follow along.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Universal Authenticate</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In order to authenticate we use the following code:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">// grab the username and password from the cocos edit box
const char * user = m_usernameDisplay->getEditBox()->getText();
const char * pwd = m_pwdDisplay->getEditBox()->getText();

// and the call authenticate passing in this pointer as the callback object
BrainCloudWrapper::getInstance()->authenticateUniversal(user, pwd, this);</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph {"className":"p1"} -->
<p class="p1">Note that we pass in a this variable as our callback handler. The callback interface is defined in BrainCloud::IServerCallback</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3,"className":"p1"} -->
<h3 class="p1">Handling Callbacks (IServerCallback)</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>IServerCallback&nbsp;is the interface&nbsp;used for all requests to the server. You'll notice there are three methods to implement (see IServerCallback.h in the brainCloud include directory):</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"className":"p1"} -->
<p class="p1"><span class="s1">virtual</span> <span class="s1">void</span><span class="s2"> serverCallback( </span><span class="s3">ServiceName</span><span class="s2"> serviceName, </span><span class="s3">ServiceOperation</span><span class="s2"> serviceOperation, </span><span class="s4">std</span><span class="s2">::</span><span class="s4">string</span> <span class="s1">const</span><span class="s2"> &amp; jsonData) = </span><span class="s5">0</span><span class="s2">;</span></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"className":"p1"} -->
<p class="p1"><span class="s1">virtual</span> <span class="s1">void</span><span class="s2"> serverError( </span><span class="s3">ServiceName</span><span class="s2"> serviceName, </span><span class="s3">ServiceOperation</span><span class="s2"> serviceOperation, </span><span class="s1">int</span><span class="s2"> returnCode, </span><span class="s1">const</span> <span class="s4">std</span><span class="s2">::</span><span class="s4">string</span><span class="s2"> &amp; jsonData) = </span><span class="s5">0</span><span class="s2">;</span></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"className":"p1"} -->
<p class="p1"><span class="s1">virtual</span> <span class="s1">void</span><span class="s2"> serverWarning( </span><span class="s3">ServiceName</span><span class="s2"> serviceName, </span><span class="s3">ServiceOperation</span><span class="s2"> serviceOperation, </span><span class="s1">int</span><span class="s2"> returnCode, </span><span class="s1">int</span><span class="s2"> numRetries, </span><span class="s1">const</span> <span class="s4">std</span><span class="s2">::</span><span class="s4">string</span><span class="s2"> &amp; jsonData) = </span><span class="s5">0</span><span class="s2">;</span></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"className":"p1"} -->
<p class="p1"><strong>serverCallback</strong> is called when a request is processed successfully. <strong>serverError</strong> is called when an error occurs, and <strong>serverWarning</strong> is called primarily when requests are retried due to a timeout (you can safely ignore this one).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"className":"p1"} -->
<p class="p1"><strong>ServiceName</strong> defines the server-side service that was invoked</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"className":"p1"} -->
<p class="p1"><strong>ServiceOperation</strong> defines the server-side operation that was invoked</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"className":"p1"} -->
<p class="p1"><strong>ServiceName</strong> and <strong>ServiceOperation</strong> come into significance when you have a single callback handler for multiple operations. You'll notice in the brainCloud method documentation (and in the brainCloud apidocs website) that all methods describe their <strong>ServiceName</strong> and <strong>ServiceOperation</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"className":"p1"} -->
<p class="p1">So in order to implement the handler we do the following in our ConnectUniversalLayer class:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li> Implement the public interface </li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">class ConnectUniversalLayer : public Layer, public BrainCloud::IServerCallback</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:list -->
<ul><li>Implement the success callback </li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">void ConnectUniversalLayer::serverCallback( BrainCloud::ServiceName serviceName, BrainCloud::ServiceOperation serviceOperation, std::string const &amp; jsonData)
{
    if (serviceName == BrainCloud::ServiceName::AuthenticateV2 &amp;&amp; serviceOperation == BrainCloud::ServiceOperation::Authenticate)
    {
        m_logBox->addText("Authenticate was successful!");
        if (m_mainScene != NULL)
        {
            // add short delay before switching scenes
            Action *sequence = Sequence::createWithTwoActions(DelayTime::create(0.7f), CallFunc::create( CC_CALLBACK_0(MainScene::switchToMainLayer, m_mainScene)));
            runAction(sequence);
        }
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:list -->
<ul><li class="p1">Implement the failure and warning callbacks</li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">void ConnectUniversalLayer::serverError( BrainCloud::ServiceName serviceName, BrainCloud::ServiceOperation serviceOperation, int returnCode, const std::string &amp; jsonData)
{
    __String* errorString = String::createWithFormat("Server Error: %d  %s", returnCode, jsonData.c_str());
    m_logBox->addText(errorString->getCString());
}

void ConnectUniversalLayer::serverWarning( BrainCloud::ServiceName serviceName, BrainCloud::ServiceOperation serviceOperation, int returnCode, int numRetries, const std::string &amp; jsonData)
{
    __String* warningString = String::createWithFormat("Server Warning: %d  %s  attempt %d", returnCode, jsonData.c_str(), numRetries);
    m_logBox->addText(warningString->getCString());
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading -->
<h2>Player Statistics</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>brainCloud allows you to store statistics for a player. Below we show you how to set this up.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Add Statistics to the brainCloud Portal</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The first step is to add your player statistics to your game in the brainCloud Portal. Navigate to the Player Statistics section</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":553,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="http://apidocs.braincloudservers.com/wp-content/uploads/2014/11/brainCloud_Dashboard_-_Simple_Example.png"><img src="http://apidocs.braincloudservers.com/wp-content/uploads/2014/11/brainCloud_Dashboard_-_Simple_Example.png" alt="brainCloud_Dashboard_-_Simple_Example" class="wp-image-553"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Click the + icon on the right hand of the screen to add a Player Statistic</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":556,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="http://apidocs.braincloudservers.com/wp-content/uploads/2014/11/brainCloud_Dashboard_-_Simple_Example-4.png"><img src="http://apidocs.braincloudservers.com/wp-content/uploads/2014/11/brainCloud_Dashboard_-_Simple_Example-4.png" alt="brainCloud_Dashboard_-_Simple_Example 4" class="wp-image-556"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>In this case I've added a statistic called "gamesWon".</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Incrementing Player Statistics</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Now we can add the code which increments and retrieves statistics. In this case refer to the "PlayerStatsLayer" class in the example project.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">Json::Value stats;
stats[statName] = valueString;
                
Json::FastWriter fastWriter;
string jsonToSend = fastWriter.write(stats);
                
BrainCloudWrapper::getInstance()->getBCClient()->getPlayerStatisticsService()->incrementPlayerStats(jsonToSend, this);</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>A success message will be returned in the callback handler if everything is ok.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Retrieving Player Statistics</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To retrieve player statistics we first call ReadAllPlayerStatistics:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">BrainCloudWrapper::getInstance()->getBCClient()->getPlayerStatisticsService()->readAllPlayerStats(this);</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>And then in our callback handler we can iterate through the player statistics as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">Json::Value jsonValue = BrainCloudWrapper::getInstance()->getBCClient()->jsonStringToValue(jsonData);
Json::Value statMap = jsonValue["data"]["statistics"];
	
auto memberNames = statMap.getMemberNames();
for (int i = 0; i &lt; memberNames.size(); i++)
{
    const char * statName = memberNames[i].c_str();
    long statValue = statMap[memberNames[i]].asInt64();
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There are many brainCloud APIs available to use. This guide should have familiarized you with the basic callback flow we use in the brainCloud client, as well as basic authentication and player statistics. As always, if you have any support questions, log into the brainCloud portal and click the green help icon on the bottom right. We will be glad to point you in the right direction!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>531</wp:post_id>
		<wp:post_date><![CDATA[2014-11-28 15:00:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-28 20:00:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cocos-2dx-example-1-getting-started]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>574</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-portal"><![CDATA[braincloud portal]]></category>
		<category domain="yst_prominent_words" nicename="braincloudwrapper-update-method"><![CDATA[braincloudwrapper update method]]></category>
		<category domain="yst_prominent_words" nicename="const-std-string-jsondata-2"><![CDATA[const std string jsondata]]></category>
		<category domain="yst_prominent_words" nicename="const-std-string-jsondata"><![CDATA[const std string jsondata =]]></category>
		<category domain="yst_prominent_words" nicename="example-project"><![CDATA[example project]]></category>
		<category domain="yst_prominent_words" nicename="jsondata-0"><![CDATA[jsondata = 0]]></category>
		<category domain="yst_prominent_words" nicename="minimum-android-sdk"><![CDATA[minimum android sdk]]></category>
		<category domain="yst_prominent_words" nicename="player-statistics"><![CDATA[player statistics]]></category>
		<category domain="yst_prominent_words" nicename="project"><![CDATA[project]]></category>
		<category domain="yst_prominent_words" nicename="servicename-servicename-serviceoperation"><![CDATA[servicename servicename serviceoperation]]></category>
		<category domain="yst_prominent_words" nicename="servicename-servicename-serviceoperation-serviceoperation"><![CDATA[servicename servicename serviceoperation serviceoperation]]></category>
		<category domain="yst_prominent_words" nicename="servicename-servicename-serviceoperation-serviceoperation-int"><![CDATA[servicename servicename serviceoperation serviceoperation int]]></category>
		<category domain="yst_prominent_words" nicename="servicename-serviceoperation-serviceoperation"><![CDATA[servicename serviceoperation serviceoperation]]></category>
		<category domain="yst_prominent_words" nicename="servicename-serviceoperation-serviceoperation-int"><![CDATA[servicename serviceoperation serviceoperation int]]></category>
		<category domain="yst_prominent_words" nicename="servicename-serviceoperation-serviceoperation-int-returncode"><![CDATA[servicename serviceoperation serviceoperation int returncode]]></category>
		<category domain="yst_prominent_words" nicename="std-string-jsondata"><![CDATA[std string jsondata =]]></category>
		<category domain="yst_prominent_words" nicename="std-string-jsondata-0"><![CDATA[std string jsondata = 0]]></category>
		<category domain="yst_prominent_words" nicename="string-jsondata-0"><![CDATA[string jsondata = 0]]></category>
		<category domain="yst_prominent_words" nicename="unity-tutorial-1-video"><![CDATA[unity tutorial #1 video]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_1617d171739324fc87041cb3d4366ccb]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Unity Tutorials</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/unity-tutorials/</link>
		<pubDate>Wed, 03 Dec 2014 18:41:09 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://apidocs.braincloudservers.com/?page_id=572</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>brainCloud is designed to work great with Unity.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As part of our Unity package we include:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Unity&nbsp;C# libraries</li><li>Unity IDE plug-in for quick access to common settings and the brainCloud portal</li><li>Great example games</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The following tutorials are available:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Our <a href="/apidocs/tutorials/unity-tutorials/unity-tutorial-1-getting-started/">Getting Started</a>&nbsp;video tutorial will get you up and running in no time!</li><li>Learn all about <a href="/apidocs/tutorials/unity-tutorials/unity-authentication-example/">brainCloud Authentication</a> with this example</li><li>Check out <a href="/apidocs/tutorials/unity-tutorials/braincloud-bombers-example-game/">brainCloud bombers</a> - our real-time multiplayer example</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>572</wp:post_id>
		<wp:post_date><![CDATA[2014-12-03 13:41:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-03 18:41:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[unity-tutorials]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>63</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Cocos2d-x Tutorials</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/cocos2d-x-tutorials/</link>
		<pubDate>Wed, 03 Dec 2014 18:43:58 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://apidocs.braincloudservers.com/?page_id=574</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>brainCloud's native C++ libraries make it easy to integrate with Cocos2d-x (and other C++-based engines).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The following tutorials walk you through the process of getting brainCloud working in your Cocos2d-x projects:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="/apidocs/tutorials/cocos2d-x-tutorials/cocos-2dx-example-1-getting-started/">Getting Started with Cocos2d-x</a></li><li><a href="/apidocs/tutorials/cocos2d-x-tutorials/facebook-authentication/">Facebook Authentication with Cocos2d-x</a></li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>574</wp:post_id>
		<wp:post_date><![CDATA[2014-12-03 13:43:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-03 18:43:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cocos2d-x-tutorials]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>63</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="cocos2d-x"><![CDATA[cocos2d-x]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Portal Tutorials</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/</link>
		<pubDate>Wed, 03 Dec 2014 18:47:31 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://apidocs.braincloudservers.com/?page_id=576</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>These pages will help&nbsp;you to get the most out of the Design Portal.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Basics</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><a href="https://staging.getbraincloud.com/apidocs/portal-usage/introduction-to-the-portal">Introducing the Portal</a>&nbsp;- introduction to the brainCloud Design Portal</li><li><a href="https://staging.getbraincloud.com/apidocs/portal-usage/two-factor-authentication-for-team-members/">Enabling 2FA</a> - enabling two-factor authentication for your team member account</li><li><a href="https://staging.getbraincloud.com/apidocs/portal-usage/managing-apps/">Managing Apps</a> - managing your applications</li><li><a href="https://staging.getbraincloud.com/apidocs/portal-usage/publishing-apps/">Publishing Apps</a> - includes configuring billing / payment settings</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Backing Up Your Data</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><a href="https://staging.getbraincloud.com/apidocs/portal-usage/importexport-game-data/">Import/Export Game Data</a> - how to backup and restore your game data</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Marketplace</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><a href="https://staging.getbraincloud.com/apidocs/portal-usage/marketplace-configuration/">Marketplace Configuration</a> - how to create virtual currencies, products and add prices</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Connecting To Third Party Systems</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><a href="https://staging.getbraincloud.com/apidocs/portal-usage/basic-configuration-facebook/">Authentication - Facebook </a>- how to configure your app for authenticating with Facebook<br></li><li><a href="https://staging.getbraincloud.com/apidocs/portal-usage/authentication-google/">Authentication - Google</a> - how to configure your app for authenticating with Google</li><li><a href="https://staging.getbraincloud.com/apidocs/portal-usage/email-integration-sendgrid/">Email Integration - Sendgrid</a> - how to configure your app to send emails via Sendgrid</li><li><a href="https://staging.getbraincloud.com/apidocs/portal-usage/push-notification-setup-firebase/">Push Notification Setup Firebase</a> - how to set up push notifications for Firebase (Google)</li><li><a href="https://staging.getbraincloud.com/apidocs/portal-usage/push-notification-setup-ios/">Push Notification Setup iOS</a> - how to set up push notifications for iOS</li><li><a href="https://staging.getbraincloud.com/apidocs/portal-usage/store-integration-facebook/">Store Integration - Facebook</a> - configuring your app to make purchases with Facebook</li><li><a href="https://staging.getbraincloud.com/apidocs/portal-usage/store-integration-google/">Store Integration - Google</a> - configuring your app to make purchases with the Google Play store</li><li><a href="https://staging.getbraincloud.com/apidocs/portal-usage/store-integration-ios/">Store Integration - iOS</a> - configuring your app to make a <g class="gr_ gr_15 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins doubleReplace replaceWithoutSep gr-progress" id="15" data-gr-id="15">purchase</g> with the  iTunes store</li><li>Store Integration - Steam - coming soon!</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Multiplayer</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><a href="https://staging.getbraincloud.com/apidocs/portal-usage/matchmaking-how-to-find-players/">MatchMaking - How To Find Players</a> - describes how to setup MatchMaking and find players</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>User Monitoring</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><a href="https://staging.getbraincloud.com/apidocs/portal-usage/user-monitoring/">User Monitoring</a> - using brainCloud's User&nbsp;Monitor</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>576</wp:post_id>
		<wp:post_date><![CDATA[2014-12-03 13:47:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-03 18:47:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[portal-usage]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>34</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="app"><![CDATA[app]]></category>
		<category domain="yst_prominent_words" nicename="app-for-authenticating"><![CDATA[app for authenticating]]></category>
		<category domain="yst_prominent_words" nicename="configure-your-app"><![CDATA[configure your app]]></category>
		<category domain="yst_prominent_words" nicename="configure-your-app-for-authenticating"><![CDATA[configure your app for authenticating]]></category>
		<category domain="yst_prominent_words" nicename="configuring"><![CDATA[configuring]]></category>
		<category domain="yst_prominent_words" nicename="configuring-your-app"><![CDATA[configuring your app]]></category>
		<category domain="yst_prominent_words" nicename="design-portal"><![CDATA[design portal]]></category>
		<category domain="yst_prominent_words" nicename="find-players"><![CDATA[find players]]></category>
		<category domain="yst_prominent_words" nicename="game-data"><![CDATA[game data]]></category>
		<category domain="yst_prominent_words" nicename="google"><![CDATA[google]]></category>
		<category domain="yst_prominent_words" nicename="integration"><![CDATA[integration]]></category>
		<category domain="yst_prominent_words" nicename="notification-setup"><![CDATA[notification setup]]></category>
		<category domain="yst_prominent_words" nicename="push-notification"><![CDATA[push notification]]></category>
		<category domain="yst_prominent_words" nicename="push-notification-setup"><![CDATA[push notification setup]]></category>
		<category domain="yst_prominent_words" nicename="push-notifications"><![CDATA[push notifications]]></category>
		<category domain="yst_prominent_words" nicename="set-up-push"><![CDATA[set up push]]></category>
		<category domain="yst_prominent_words" nicename="set-up-push-notifications"><![CDATA[set up push notifications]]></category>
		<category domain="yst_prominent_words" nicename="store"><![CDATA[store]]></category>
		<category domain="yst_prominent_words" nicename="store-integration"><![CDATA[store integration]]></category>
		<category domain="yst_prominent_words" nicename="user-monitoring"><![CDATA[user monitoring]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>brainCloud API</title>
		<link>https://staging.getbraincloud.com/apidocs/introduction-2/braincloud-api/</link>
		<pubDate>Fri, 06 Feb 2015 17:20:18 +0000</pubDate>
		<dc:creator><![CDATA[roger.masse]]></dc:creator>
		<guid isPermaLink="false">http://apidocs.braincloudservers.com/?page_id=611</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/08/BrainCloud-architecture-boxes.jpg"><img src="/apidocs/wp-content/uploads/2016/08/BrainCloud-architecture-boxes.jpg" alt="brainCloud API Architecture"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The brainCloud API is implemented as a REST-based protocol for communicating with the&nbsp;brainCloud servers.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>brainCloud provides libraries, written in a number of languages, that hide the details of the REST mechanism as well as organize the API into separate functional modules. The libraries can be <a href="https://portal.braincloudservers.com/admin/dashboard#/support/libs" target="_blank" rel="noopener">downloaded</a> from the brainCloud Portal.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>While the client libraries provide a standard API in the form of classes and methods to make the server requests, the server responses are served up to callback objects passed into the methods as JSON formatted strings. These strings must be parsed by the client application code.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here is an example of a successful response:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
  "status": 200,
  "data": {
    "vcPurchased": 0,
    "playerSessionExpiry": 600,
    "sessionId": "vaa5qv2gt1tqvpp22av1dme5ni",
    "profileId": "8e8edaeb-08f5-4acc-834d-a815fcc58225",
    "rewards": {
      "rewardDetails": {},
      "rewards": {},
      "currency": {
        "coin": {
          "purchased": 0,
          "balance": 0,
          "consumed": 0,
          "awarded": 0
        },
        "coinMultiplier": {
          "purchased": 0,
          "balance": 0,
          "consumed": 0,
          "awarded": 0
        },
        "bar": {
          "purchased": 0,
          "balance": 0,
          "consumed": 0,
          "awarded": 0
        }
      }
    },
    "abTestingId": 58,
    "newUser": "false"

  }
}
</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Success and failures:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>The Status field indicates the overall&nbsp;success or failure of the operation - 200 is success</li><li>Non-success (!= 200) return values will include a <a title="Processing Exception Reason Codes" href="/apidocs/apiref/#appendix-reasoncodes" target="_blank" rel="noopener">reason code</a> and message</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>611</wp:post_id>
		<wp:post_date><![CDATA[2015-02-06 12:20:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-06 17:20:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[braincloud-api]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>73</wp:post_parent>
		<wp:menu_order>11</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="200"><![CDATA[200]]></category>
		<category domain="yst_prominent_words" nicename="api"><![CDATA[api]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="client"><![CDATA[client]]></category>
		<category domain="yst_prominent_words" nicename="code"><![CDATA[code]]></category>
		<category domain="yst_prominent_words" nicename="libraries"><![CDATA[libraries]]></category>
		<category domain="yst_prominent_words" nicename="methods"><![CDATA[methods]]></category>
		<category domain="yst_prominent_words" nicename="server"><![CDATA[server]]></category>
		<category domain="yst_prominent_words" nicename="strings"><![CDATA[strings]]></category>
		<category domain="yst_prominent_words" nicename="success"><![CDATA[success]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Facebook Authentication</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/cocos2d-x-tutorials/facebook-authentication/</link>
		<pubDate>Wed, 14 Jan 2015 17:37:02 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=640</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This tutorial&nbsp;builds on the Getting Started with Cocos 2d-x tutorial by adding Facebook authentication. We use the Cocos 2d-x 3.3 built-in Facebook plugin to interact with the Facebook login and access dialogs.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Assumptions</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Before starting you should make sure you've done the following:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Run&nbsp;through the steps in the <a title="Getting Started with Cocos2d-x" href="/apidocs/tutorials/cocos2d-x-tutorials/cocos-2dx-example-1-getting-started/">Getting Started with Cocos 2d-x tutorial</a> as we will build upon the code in the example project. This would include pointing the example project to your own brainCloud game id etc as described in the tutorial</li><li>Have a current version of the example project from the <a title="Getting Started with Cocos2d-x" href="/apidocs/tutorials/cocos2d-x-tutorials/cocos-2dx-example-1-getting-started/">Getting Started with Cocos 2d-x tutorial</a></li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Links to Facebook Documentation</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You will find the following links useful in understanding how to use Facebook in Cocos 2d-x:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Facebook with Cocos 2d-x starting page<br><a href="https://developers.facebook.com/docs/cocos2d-x" target="_blank" rel="noopener noreferrer">https://developers.facebook.com/docs/cocos2d-x</a></li><li>Reference and setup guide<br><a href="http://cocos2d-x.org/wiki/Facebook_Support_for_Cocos2d-x_Beta" target="_blank" rel="noopener noreferrer">http://cocos2d-x.org/wiki/Facebook_Support_for_Cocos2d-x_Beta</a><br><a href="http://www.cocos2d-x.org/wiki/Facebook_API_Reference_for_Cocos2d-x_and_Cocos2d-x-lua" target="_blank" rel="noopener noreferrer">http://www.cocos2d-x.org/wiki/Facebook_API_Reference_for_Cocos2d-x_and_Cocos2d-x-lua</a></li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Configure Project</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>First step is to follow the setup guide provided by Facebook/Cocos 2d-x:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="http://cocos2d-x.org/wiki/Facebook_integration_instruction_for_Cocos2d-x_and_Cocos2d-x-Lua_on_iOS">http://cocos2d-x.org/wiki/Facebook_integration_instruction_for_Cocos2d-x_and_Cocos2d-x-Lua_on_iOS</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that these steps have been already completed in the example project. You may wish to point to your own Facebook app however which is detailed in the link above.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Add Facebook Configuration to brainCloud Portal</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In order for brainCloud to authenticate your Facebook user, it will need to communicate with the Facebook servers. In order to do this, you will need to configure a few things in the brainCloud Portal. Log into the portal and navigate to the Core Game Info | Application Ids page in the Design tab. Click the Facebook icon to enable Facebook:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":649,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/01/brainCloud_Dashboard_-_Simple_Example.png"><img src="/apidocs/wp-content/uploads/2015/01/brainCloud_Dashboard_-_Simple_Example.png" alt="Enable Facebook" class="wp-image-649"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>And then enter your Facebook App ID and Facebook Secret (both of which can be found on the Facebook developer portal):</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":650,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/01/brainCloud_Dashboard_-_Simple_Example-2.png"><img src="/apidocs/wp-content/uploads/2015/01/brainCloud_Dashboard_-_Simple_Example-2.png" alt="Configure Facebook" class="wp-image-650"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>Get&nbsp;Facebook Auth Token</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The code to log into Facebook and retrieve an authentication token is as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">auto facebook = cocos2d::plugin::FacebookAgent::getInstance();
facebook-&gt;login([=](int returnCode, std::string&amp; jsonResponse) {
    if (returnCode == 0)
    {
        //handle success
        std::string = facebook-&gt;getAccessToken();
    }
    else
    {
         // handle error
     }
});</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>In the example project, we execute more or less the above steps in the ConnectFacebookLayer class under the onFacebookLoginPressed function.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Authenticate with brainCloud</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Once you've successfully logged into Facebook you'll have everything you need to authenticate with brainCloud. If you're using the BrainCloudWrapper class to do authentication you can authenticate by calling this function:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">auto facebook = cocos2d::plugin::FacebookAgent::getInstance();
std::string fbUserId = facebook-&gt;getUserID();
std::string fbToken = facebook-&gt;getAccessToken();

BrainCloudWrapper::getInstance()-&gt;authenticateFacebook(fbUserId.c_str(), fbToken.c_str(), this);</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>In the example project, we authenticate with brainCloud in the ConnectFacebookLayer class onConnectPressed function.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Register Callback Handlers</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As per the example project, you'll need to set up your callback handler functions to deal with success/errors from brainCloud. The ConnectFacebookLayer class handles callbacks in the functions listed below:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">virtual void serverCallback( BrainCloud::ServiceName serviceName, BrainCloud::ServiceOperation serviceOperation, std::string const &amp; jsonData);
virtual void serverError( BrainCloud::ServiceName serviceName, BrainCloud::ServiceOperation serviceOperation, int returnCode, const std::string &amp; jsonData);
virtual void serverWarning( BrainCloud::ServiceName serviceName, BrainCloud::ServiceOperation serviceOperation, int returnCode, int numRetries, const std::string &amp; jsonData);</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>You can also find further documentation that describes the Authentication calls as well as return codes in <a title="Authentication" href="/apidocs/apiref/#capi-auth">Authentication section of the API reference site</a></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>640</wp:post_id>
		<wp:post_date><![CDATA[2015-01-14 12:37:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-01-14 17:37:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[facebook-authentication]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>574</wp:post_parent>
		<wp:menu_order>11</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="2d-x"><![CDATA[2d-x]]></category>
		<category domain="yst_prominent_words" nicename="2d-x-tutorial"><![CDATA[2d-x tutorial]]></category>
		<category domain="yst_prominent_words" nicename="authenticate-with-braincloud"><![CDATA[authenticate with braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-portal"><![CDATA[braincloud portal]]></category>
		<category domain="yst_prominent_words" nicename="cocos"><![CDATA[cocos]]></category>
		<category domain="yst_prominent_words" nicename="cocos-2d-x"><![CDATA[cocos 2d-x]]></category>
		<category domain="yst_prominent_words" nicename="cocos-2d-x-tutorial"><![CDATA[cocos 2d-x tutorial]]></category>
		<category domain="yst_prominent_words" nicename="connectfacebooklayer-class"><![CDATA[connectfacebooklayer class]]></category>
		<category domain="yst_prominent_words" nicename="example"><![CDATA[example]]></category>
		<category domain="yst_prominent_words" nicename="example-project"><![CDATA[example project]]></category>
		<category domain="yst_prominent_words" nicename="facebook-app"><![CDATA[facebook app]]></category>
		<category domain="yst_prominent_words" nicename="getting-started"><![CDATA[getting started]]></category>
		<category domain="yst_prominent_words" nicename="getting-started-with-cocos"><![CDATA[getting started with cocos]]></category>
		<category domain="yst_prominent_words" nicename="getting-started-with-cocos-2d-x"><![CDATA[getting started with cocos 2d-x]]></category>
		<category domain="yst_prominent_words" nicename="project"><![CDATA[project]]></category>
		<category domain="yst_prominent_words" nicename="setup-guide"><![CDATA[setup guide]]></category>
		<category domain="yst_prominent_words" nicename="started-with-cocos"><![CDATA[started with cocos]]></category>
		<category domain="yst_prominent_words" nicename="started-with-cocos-2d-x"><![CDATA[started with cocos 2d-x]]></category>
		<category domain="yst_prominent_words" nicename="started-with-cocos-2d-x-tutorial"><![CDATA[started with cocos 2d-x tutorial]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_aa12c898c0c2b8220d2ac216a1aa8d7a]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_4903d83f5ca93c5b7dd7de1bcbd066d0]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_80f79ea1ac2224ce4d4db04875471df8]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_03ed32c5a90539feaa41c1bf10d6107f]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_ea35c5bf537e2b38252bed13620d8ccb]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Unity Authentication Example</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/unity-tutorials/unity-authentication-example/</link>
		<pubDate>Fri, 13 Feb 2015 20:53:57 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=800</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This example shows how to use several of the authentication types in brainCloud. Specifically, we illustrate how to authenticate using the following authentication types:&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Email and Password</li><li>Universal</li><li>Anonymous</li><li>Advanced&nbsp;</li><li>Google (Android Devices only)</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2><strong>Prerequisites</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In order to get started, you will need Unity installed. Please download the example project by following the link below:&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://github.com/getbraincloud/UnityExamples">Unity Authentication Example Download</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can also download the stand-alone brainCloud Unity library here:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://github.com/getbraincloud/Unity-Csharp">brainCloud Unity Client</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2><strong>Running the Project</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To try out the example project you must:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Download the examples-unity repo.&nbsp;</li><li>Unzip the examples-unity folder.</li><li>Open the “Authentication” project in unity.</li><li>Open the “Main” scene in the “Scenes” folder.</li><li>Follow the steps under “Pointing to your own game” to point to your brainCloud app.</li><li>Click Unity’s play button.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>You should see the following screen.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":7487,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2022/07/AuthPage1-1024x576.jpg" alt="" class="wp-image-7487"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Feel free to test out the various authentication types. Authentication types can be changed by clicking the dropdown menu next to “Select Auth Type”. You can also toggle “Advanced Auth” which allows you to send extra JSON data along with your authentication. This extra JSON data can be used for things like account validation. In this example, we use the extra data to create a user entity of type “player” for new users.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":7488,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2022/07/AuthPage2-1024x575.jpg" alt="" class="wp-image-7488"/></figure></div>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3><strong>Pointing to your own game</strong></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Follow these steps in order to test different authentication methods against your own brainCloud game:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Open the brainCloud settings menu option.</li></ol>
<!-- /wp:list -->

<!-- wp:image {"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://lh5.googleusercontent.com/yaelBFzJm7rpXcrbgRyF7Q0PJvuKgRK0BwdduU2TM9OeMRIuxfMceYI54jw5A6oZgatp6-zn1uLItdsN2-E9y_CsuPehlhJCMF8m4NNf5OFj-LlgYtK0WPEbJ3ItE1BwpR29eioGUMaf6eW8IQ" alt=""/></figure></div>
<!-- /wp:image -->

<!-- wp:list {"ordered":true,"start":2} -->
<ol start="2"><li>Login to brainCloud and select your game.</li></ol>
<!-- /wp:list -->

<!-- wp:gallery {"ids":[7484,7486]} -->
<figure class="wp-block-gallery columns-2 is-cropped"><ul class="blocks-gallery-grid"><li class="blocks-gallery-item"><figure><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2022/07/SignIn2-1.png" alt="" data-id="7484" class="wp-image-7484"/></figure></li><li class="blocks-gallery-item"><figure><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2022/07/SignIn3-2.png" alt="" data-id="7486" data-full-url="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2022/07/SignIn3-2.png" data-link="https://staging.getbraincloud.com/apidocs/tutorials/unity-tutorials/unity-authentication-example/signin3-2/" class="wp-image-7486"/></figure></li></ul></figure>
<!-- /wp:gallery -->

<!-- wp:paragraph {"align":"left"} -->
<p class="has-text-align-left">Ensure that the correct platforms have been enabled in the brainCloud Portal, under <strong>Design | Core App Info | Platforms</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true,"start":4} -->
<ol start="4"><li>Import the app data from the “ImportData” folder.&nbsp;</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>See <a href="https://getbraincloud.com/apidocs/portal-usage/importexport-game-data/">Import/Export Game Data</a> in the portal tutorial section for more information.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The Authentication app also features the following brainCloud functionality:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="https://getbraincloud.com/apidocs/apiref/?cloudcode#capi-entity">User Entities</a></li><li><a href="https://getbraincloud.com/apidocs/apiref/?cloudcode#capi-customentity">Custom Entities</a></li><li><a href="https://getbraincloud.com/apidocs/apiref/?cloudcode#capi-playerstats">Player XP and Player Leveling</a></li><li><a href="https://getbraincloud.com/apidocs/apiref/?cloudcode#capi-virtualcurrency">Virtual Currencies</a></li><li><a href="https://getbraincloud.com/apidocs/apiref/?cloudcode#capi-playerstats">Player Stats</a></li><li><a href="https://getbraincloud.com/apidocs/apiref/?cloudcode#capi-globalstats">Global Stats</a></li><li><a href="https://getbraincloud.com/apidocs/apiref/?cloudcode#capi-script">Cloud Code scripting</a>&nbsp;</li><li><a href="https://getbraincloud.com/apidocs/apiref/?cloudcode#capi-identity">Identity Attaching / Merging</a></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Enjoy interacting with this example project and getting an idea for some of the features brainCloud has to offer.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><strong>Code Overview</strong></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>First, we initialize the brainCloud Wrapper in a script called BCConfig.cs</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">using System.Collections;
using System.Collections.Generic;
using UnityEngine;
 
public class BCConfig : MonoBehaviour {
 
    private BrainCloudWrapper _bc;
 
    public BrainCloudWrapper GetBrainCloud()
    {
        return _bc;
    }
    
    // Use this for initialization
    void Awake ()
    {
        DontDestroyOnLoad(gameObject);
        _bc = gameObject.AddComponent&lt;BrainCloudWrapper>();
        
        _bc.WrapperName = gameObject.name;    // Optional: Set a wrapper name
        _bc.Init();      // Init data is taken from the brainCloud Unity Plugin
    }
}
</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Next, we create a BCConfig GameObject and attach the BCConfig script as a component.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":7489,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2022/07/BCConfig-1024x674.png" alt="" class="wp-image-7489"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>We have a script called BrainCloudInterface.cs which is used to interface between the brainCloud Wrapper and our game-related classes. This script handles all of our brainCloud Authentication methods and all of our calls and callbacks from our brainCloud wrapper.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Email Authentication:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">public void AuthenticateEmail()
{
    m_emailId = DataManager.instance.EmailID;
    m_emailPwd = DataManager.instance.EmailPass; 
 
    _bc.ResetStoredProfileId();
    _bc.ResetStoredAnonymousId();
    _bc.AuthenticateEmailPassword(m_emailId, m_emailPwd, true, OnSuccess_Authenticate, 
                                  OnError_Authenticate);
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Universal Authentication:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">public void AuthenticateUniversal()
{
    m_universalUserId = DataManager.instance.UniversalUserID;
    m_universalPwd = DataManager.instance.UniversalPass;
 
    _bc.ResetStoredProfileId();
    _bc.ResetStoredAnonymousId();
    _bc.AuthenticateUniversal(m_universalUserId, m_universalPwd, true, OnSuccess_Authenticate, 
                              OnError_Authenticate);
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Anonymous Authentication:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">public void AuthenticateAnonymous()
{
    _bc.AuthenticateAnonymous(OnSuccess_Authenticate, OnError_Authenticate);
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Google Authentication</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">public void AuthenticateGoogle()
{
    _bc.AuthenticateGoogle(m_googleId, m_serverAuthCode, true, OnSuccess_Authenticate, OnError_Authenticate);
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Authentication Success and Failure Callbacks</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">public void OnSuccess_Authenticate(string responseData, object cbObject)
{
    m_authStatus = "Authenticate successful!";
    Debug.Log(m_authStatus);
 
    ScreenManager.instance.ActivateMainScreen();
}
public void OnError_Authenticate(int statusCode, int reasonCode, string statusMessage, object cbObject)
{
    Debug.Log(string.Format("Failed | {0}  {1}  {2}", statusCode, reasonCode, statusMessage));
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>This example also features advanced authentication. We are able to send extra Json data in the form of a &lt;string, object&gt; dictionary.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">public void AuthenticateAdvanced(AuthenticationType authType, BrainCloud.AuthenticationIds ids, Dictionary&lt;string, object> extraJson)
{
    SuccessCallback successCallback = (response, cbObject) => 
    { ScreenManager.instance.ActivateMainScreen(); };
 
    FailureCallback failureCallback = (status, code, error, cbObject) => 
    { Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error)); };
 
    _bc.AuthenticateAdvanced(authType, ids, true, extraJson, successCallback, failureCallback);
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading -->
<h2><strong>Further Reading</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You can find more information on the Authentication methods by visiting this section of the API reference:&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://getbraincloud.com/apidocs/apiref/#capi-auth">Authentication APIs</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The code in the example project that deals with authentication is located in “Scripts/BrainCloudInterface.cs”.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>800</wp:post_id>
		<wp:post_date><![CDATA[2015-02-13 15:53:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-13 20:53:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[unity-authentication-example]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>572</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="authentication-methods"><![CDATA[authentication methods]]></category>
		<category domain="yst_prominent_words" nicename="authentication-types"><![CDATA[authentication types]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-unity"><![CDATA[braincloud unity]]></category>
		<category domain="yst_prominent_words" nicename="download"><![CDATA[download]]></category>
		<category domain="yst_prominent_words" nicename="email"><![CDATA[email]]></category>
		<category domain="yst_prominent_words" nicename="example"><![CDATA[example]]></category>
		<category domain="yst_prominent_words" nicename="example-project"><![CDATA[example project]]></category>
		<category domain="yst_prominent_words" nicename="folder"><![CDATA[folder]]></category>
		<category domain="yst_prominent_words" nicename="follow"><![CDATA[follow]]></category>
		<category domain="yst_prominent_words" nicename="game"><![CDATA[game]]></category>
		<category domain="yst_prominent_words" nicename="game-data"><![CDATA[game data]]></category>
		<category domain="yst_prominent_words" nicename="open"><![CDATA[open]]></category>
		<category domain="yst_prominent_words" nicename="order"><![CDATA[order]]></category>
		<category domain="yst_prominent_words" nicename="own-game"><![CDATA[own game]]></category>
		<category domain="yst_prominent_words" nicename="pointing-to-your-own-game"><![CDATA[pointing to your own game]]></category>
		<category domain="yst_prominent_words" nicename="project"><![CDATA[project]]></category>
		<category domain="yst_prominent_words" nicename="steps"><![CDATA[steps]]></category>
		<category domain="yst_prominent_words" nicename="types"><![CDATA[types]]></category>
		<category domain="yst_prominent_words" nicename="unity"><![CDATA[unity]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_elementor_edit_mode]]></wp:meta_key>
		<wp:meta_value><![CDATA[builder]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_elementor_template_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[wp-page]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_elementor_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[3.6.5]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>JavaScript Tutorials</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/javascript-tutorials/</link>
		<pubDate>Thu, 19 Feb 2015 20:20:17 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=822</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Building a web app or game? The brainCloud JavaScript library is what you will need to integrate&nbsp;your amazing app/game with the brainCloud backend!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this section, you will find tutorials related to the use of the brainCloud JavaScript client library.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Check out the&nbsp;<a title="Javascript Example Game" href="/apidocs/tutorials/javascript-tutorials/javascript-example-game/">Example JavaScript Game</a>&nbsp;to get started!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Further tutorials for the JavaScript library are listed below:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="/apidocs/tutorials/javascript-tutorials/js-file-upload/">JS File Upload API</a></li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>822</wp:post_id>
		<wp:post_date><![CDATA[2015-02-19 15:20:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-19 20:20:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[javascript-tutorials]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>63</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-javascript"><![CDATA[braincloud javascript]]></category>
		<category domain="yst_prominent_words" nicename="game"><![CDATA[game]]></category>
		<category domain="yst_prominent_words" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="yst_prominent_words" nicename="javascript-library"><![CDATA[javascript library]]></category>
		<category domain="yst_prominent_words" nicename="library"><![CDATA[library]]></category>
		<category domain="yst_prominent_words" nicename="tutorials"><![CDATA[tutorials]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Acey Deucey Example Game</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/javascript-tutorials/javascript-example-game/</link>
		<pubDate>Thu, 19 Feb 2015 20:21:05 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=824</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><strong>Acey Deucey</strong>, the brainCloud JavaScript example game, helps you get acquainted with using the brainCloud JavaScript client library. The card game is fairly simple - players bet on whether the next card flipped will be between two faceup cards. The game result is calculated as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Win - if your card is between the two faceup cards</li><li>Lose - if your card is outside the range of the two faceup cards</li><li>Lose twice your bet - if your card is the same as either of the two faceup cards (hitting the post)</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Further information about&nbsp;the card game can be found on <a href="http://en.wikipedia.org/wiki/Acey_Deucey_%28card_game%29" target="_blank" rel="noopener noreferrer">wikipedia</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The example game shows off the following brainCloud features:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Email authentication - the user must authenticate using the <a title="BrainCloudAuthentication" href="/apidocs/apiref/#capi-auth">BrainCloudAuthentication</a> AuthenticateEmailPassword API.</li><li>Email verification - the user is sent an email to verify that they own the account (although this does not prevent you from playing the game)</li><li>Player Name - the user's name is stored using the <a title="BrainCloudPlayerState" href="/apidocs/apiref/#capi-playerstate">BrainCloudPlayerState</a> UpdatePlayerName  API.</li><li>Player Statistics - the user's wins/losses are tracked using the <a title="BrainCloudPlayerStatistics" href="/apidocs/apiref/#capi-playerstats">BrainCloudPlayerStatistics</a>  APIs.</li><li>Player Currency - the user's balance is tracked using the <a title="BrainCloudProduct" href="/apidocs/apiref/#capi-product">BrainCloudProduct</a> currency  APIs.</li><li>Global Leaderboards - a list of the top Acey Deucey players using the <a title="BrainCloudSocialLeaderboard" href="/apidocs/apiref/#capi-leaderboard">BrainCloudLeaderboard</a>  APIs.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>All of the code that interacts with the brainCloud js library is located in cardGame.js.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://sharedprod.braincloudservers.com/s3/aceydeucey/cardGame.html" target="_blank" rel="noopener noreferrer">Play the example Acey Deucey game</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="http://d28b58vufdqdih.cloudfront.net/brainCloudExamples/javascript/AceyDeucey-2.15.0_165261_fix.zip">Download the source code</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Check out Acey Deucey in action! &nbsp;<a title="Acey Deucey - JavaScript Example" href="https://sharedprod.braincloudservers.com/s3/aceydeucey/cardGame.html" target="_blank" rel="noopener noreferrer">Click to Play</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":899,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://sharedprod.braincloudservers.com/s3/aceydeucey/cardGame.html"><img src="/apidocs/wp-content/uploads/2015/02/2015-03-02__11_21_AM.png" alt="Acey Deucey" class="wp-image-899"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>824</wp:post_id>
		<wp:post_date><![CDATA[2015-02-19 15:21:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-19 20:21:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[javascript-example-game]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>822</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="acey"><![CDATA[acey]]></category>
		<category domain="yst_prominent_words" nicename="acey-deucey"><![CDATA[acey deucey]]></category>
		<category domain="yst_prominent_words" nicename="apis"><![CDATA[apis]]></category>
		<category domain="yst_prominent_words" nicename="bet"><![CDATA[bet]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-javascript"><![CDATA[braincloud javascript]]></category>
		<category domain="yst_prominent_words" nicename="card"><![CDATA[card]]></category>
		<category domain="yst_prominent_words" nicename="card-game"><![CDATA[card game]]></category>
		<category domain="yst_prominent_words" nicename="cards"><![CDATA[cards]]></category>
		<category domain="yst_prominent_words" nicename="deucey"><![CDATA[deucey]]></category>
		<category domain="yst_prominent_words" nicename="email"><![CDATA[email]]></category>
		<category domain="yst_prominent_words" nicename="example"><![CDATA[example]]></category>
		<category domain="yst_prominent_words" nicename="example-game"><![CDATA[example game]]></category>
		<category domain="yst_prominent_words" nicename="faceup"><![CDATA[faceup]]></category>
		<category domain="yst_prominent_words" nicename="faceup-cards"><![CDATA[faceup cards]]></category>
		<category domain="yst_prominent_words" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="yst_prominent_words" nicename="library"><![CDATA[library]]></category>
		<category domain="yst_prominent_words" nicename="lose"><![CDATA[lose]]></category>
		<category domain="yst_prominent_words" nicename="player"><![CDATA[player]]></category>
		<category domain="yst_prominent_words" nicename="players"><![CDATA[players]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>CC Tutorial5 - External Web Services</title>
		<link>https://staging.getbraincloud.com/apidocs/cloud-code-central/cloud-code-tutorials/http-client-service/</link>
		<pubDate>Wed, 01 Apr 2015 18:32:20 +0000</pubDate>
		<dc:creator><![CDATA[roger.masse]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=944</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>brainCloud provides an HTTP Client&nbsp;proxy object, retrieved via the <a title="Bridge – Client" href="/apidocs/apiref/#cc-bridge">bridge</a>, that allows you to make HTTP GET requests to external 3rd party servers.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The HTTPClientProxyObject currently has a number&nbsp;of public methods. &nbsp;The methods are defined at the bottom of this page. The 'serviceCode' parameter in these methods refers to the value assigned in the portal configuration.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>External Web Service Example</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following is an example script for requesting weather information from <a title="World Weather Online" href="http://www.worldweatheronline.com/api/" target="_blank" rel="noopener noreferrer">World Weather Online</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"js"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="js" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">// GetWeather script - takes the following parameters
// location - location to get the weather for - example "Ottawa, Canada"
// API key from WorldWeatherOnline.com
var key = "ad1c12629a14edf04a8796042206a";
// Path to the api method
var path = "free/v2/weather.ashx";
// Retrieve the HTTP Client proxy
var httpClientService = bridge.getHttpClientServiceProxy();
// Construct the query parameters (they will be automatically encoded in the URL)
var queryMap = {
    "q": data.location,
    "num_of_days": 1,
    "format": "json",
    "key": key
};
// No need to send anything specific in the headers
var headers = {};
// Make the request
var result = httpClientService.getResponseJson("getweather", path, queryMap, headers);
// Log the results (debugging)
bridge.getLogServiceProxy().logInfo("Weather results", JSON.stringify(result));
// Return the results
var retval = null;
if (result.status === 200)
{
    retval = result.data.json.data;
}
retval;</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>In order to access 3rd party servers, it's base URL must be configured in the portal under Design | Cloud Code | Web Services. This example needs a server named "getweather" with an URL of "https://api.worldweatheronline.com" added to list.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>Try it&nbsp;yourself</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Follow these steps to try this for yourself.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Step 1 - <strong>Create the Script</strong></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><em>Via <strong>Design | Cloud Code | Edit Scripts </strong>in the portal.</em></p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":4264,"width":548,"height":474,"linkDestination":"custom"} -->
<div class="wp-block-image"><figure class="aligncenter is-resized"><a href="/apidocs/wp-content/uploads/2018/03/Tut_5_1.png"><img src="/apidocs/wp-content/uploads/2018/03/Tut_5_1.png" alt="" class="wp-image-4264" width="548" height="474"/></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":7366,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2021/12/image-2-1024x573.png" alt="" class="wp-image-7366"/></figure></div>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>Step 2 - <strong>Add the Service to the Whitelist</strong></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><em>Via <strong>Design | Cloud Code | Web Services</strong> in the portal.</em></p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":4266,"linkDestination":"custom"} -->
<div class="wp-block-image"><figure class="aligncenter"><a href="/apidocs/wp-content/uploads/2018/03/Tut_5_3.png"><img src="/apidocs/wp-content/uploads/2018/03/Tut_5_3.png" alt="" class="wp-image-4266"/></a></figure></div>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>Step 3 - <strong>Test from the API Explorer</strong></h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><strong>Go to API Explorer</strong> (<strong>Design | Cloud Code | API Explorer</strong>)</li><li><strong>Authenticate the user</strong> - select the <em>Authenticate</em> service, then <em>Authenticate</em> Operation, and click the <strong>Go</strong>&nbsp;icon (Green Right Triangle). &nbsp;You may have to play with the authentication parameters a bit (to ensure you're specifying a valid platform, etc.)</li><li><strong>Call the Cloud Script</strong> - choose the <em>Script</em> service, then "<em>Run Script GetWeather</em>" for the operation. &nbsp;Customize the parameters if you'd like, and then hit <strong>Go</strong>.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"align":"center","id":4268,"linkDestination":"custom"} -->
<div class="wp-block-image"><figure class="aligncenter"><a href="/apidocs/wp-content/uploads/2018/03/Tut_5_4.png"><img src="/apidocs/wp-content/uploads/2018/03/Tut_5_4-1024x638.png" alt="" class="wp-image-4268"/></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Et voila!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>Note - if you are going to use this service in your app, please go to <strong>WorldWeatherOnline</strong>&nbsp;and <strong>get your own API key</strong>!</em></p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>getResponseJson</h3>
<!-- /wp:heading -->

<!-- wp:enlighter/codeblock {"language":"js"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="js" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">/**
 * Gets a JSON formatted document via HTTP.
 * @param serviceCode Web service service code
 * @param path Resource path.
 * @param query Optional query.
 * @param headers map of extra headers
 * @return Json object.
 *        
 * {
 *    status : 200,
 *    data : {
 *        statusCode : 200,
 *        json : {
 *            "key" : "value"
 *        }
 *    }
 * }
 */
public NativeObject getResponseJson(String serviceCode, String path, NativeObject query, NativeObject headers)
</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":3} -->
<h3>getResponseText</h3>
<!-- /wp:heading -->

<!-- wp:enlighter/codeblock {"language":"js"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="js" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">/**
 * Gets text document via HTTP.
 * @param serviceCode Web service service code
 * @param path Resource path.
 * @param query Optional query.
 * @param headers map of extra headers
 * @return Json object.
 * {
 *    status : 200,
 *    data : {
 *        statusCode : 200,
 *        text : "text string"
 *    }
 * }
 */
public NativeObject getResponseText(String serviceCode, String path, NativeObject query, NativeObject headers)</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":3} -->
<h3>postFormResponseJson</h3>
<!-- /wp:heading -->

<!-- wp:enlighter/codeblock {"language":"js"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="js" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">/**
 * Posts a form encoded document via HTTP and expects a JSON response.
 * @param serviceCode Web service service code
 * @param path Resource path.
 * @param headers map of extra headers
 * @param form form parameters.
 * @return Json object.
 * {
 *    status : 200,
 *    data : {
 *        statusCode : 200,
 *        json : {
 *            "key" : "value"
 *        }
 *    }
 * }
 */
public NativeObject postFormResponseJson(String serviceCode, String path, NativeObject headers, NativeObject form)
</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":3} -->
<h3>postFormResponseText</h3>
<!-- /wp:heading -->

<!-- wp:enlighter/codeblock {"language":"js"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="js" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">/**
 * Posts a form encoded document via HTTP and expects a Text response.
 * @param serviceCode Web service service code
 * @param path Resource path.
 * @param headers map of extra headers
 * @param form form parameters.
 * @return Json object.
 * {
 *    status : 200,
 *    data : {
 *        statusCode : 200,
 *        text : "text string"
 *    }
 * }
 */
public NativeObject postFormResponseText(String serviceCode, String path, NativeObject headers, NativeObject form)
</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":3} -->
<h3>postJsonResponseJson</h3>
<!-- /wp:heading -->

<!-- wp:enlighter/codeblock {"language":"js"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="js" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">/**
 * Posts a JSON formatted document via HTTP and expects a JSON response.
 * @param serviceCode Web service service code
 * @param path Resource path.
 * @param headers map of extra headers
 * @param json JSON formatted data to post.
 * @return Json object.
 * {
 *    status : 200,
 *    data : {
 *        statusCode : 200,
 *        json : {
 *            "key" : "value"
 *        }
 *    }
 * }
 */
public NativeObject postJsonResponseJson(String serviceCode, String path, NativeObject headers, NativeObject json)
</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":3} -->
<h3>postTextResponseText</h3>
<!-- /wp:heading -->

<!-- wp:enlighter/codeblock {"language":"js"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="js" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">/**
 * Posts a text document via HTTP and expects a Text response.
 * @param serviceCode Web service service code
 * @param path Resource path.
 * @param headers map of extra headers
 * @param form form parameters.
 * @return Json object.
 * {
 *    status : 200,
 *    data : {
 *        statusCode : 200,
 *        text : "text string"
 *    }
 * }
 */
public NativeObject postTextResponseText(String serviceCode, String path, NativeObject headers, String text)
</pre>
<!-- /wp:enlighter/codeblock -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>944</wp:post_id>
		<wp:post_date><![CDATA[2015-04-01 14:32:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-01 18:32:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[http-client-service]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>2611</wp:post_parent>
		<wp:menu_order>17</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="3rd-party"><![CDATA[3rd party]]></category>
		<category domain="yst_prominent_words" nicename="3rd-party-servers"><![CDATA[3rd party servers]]></category>
		<category domain="yst_prominent_words" nicename="api"><![CDATA[api]]></category>
		<category domain="yst_prominent_words" nicename="api-explorer"><![CDATA[api explorer]]></category>
		<category domain="yst_prominent_words" nicename="authenticate"><![CDATA[authenticate]]></category>
		<category domain="yst_prominent_words" nicename="cloud"><![CDATA[cloud]]></category>
		<category domain="yst_prominent_words" nicename="cloud-code"><![CDATA[cloud code]]></category>
		<category domain="yst_prominent_words" nicename="code"><![CDATA[code]]></category>
		<category domain="yst_prominent_words" nicename="design"><![CDATA[design]]></category>
		<category domain="yst_prominent_words" nicename="example"><![CDATA[example]]></category>
		<category domain="yst_prominent_words" nicename="explorer"><![CDATA[explorer]]></category>
		<category domain="yst_prominent_words" nicename="http"><![CDATA[http]]></category>
		<category domain="yst_prominent_words" nicename="methods"><![CDATA[methods]]></category>
		<category domain="yst_prominent_words" nicename="party-servers"><![CDATA[party servers]]></category>
		<category domain="yst_prominent_words" nicename="portal"><![CDATA[portal]]></category>
		<category domain="yst_prominent_words" nicename="script"><![CDATA[script]]></category>
		<category domain="yst_prominent_words" nicename="service"><![CDATA[service]]></category>
		<category domain="yst_prominent_words" nicename="step"><![CDATA[step]]></category>
		<category domain="yst_prominent_words" nicename="web"><![CDATA[web]]></category>
		<category domain="yst_prominent_words" nicename="web-services"><![CDATA[web services]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[page-templates/codesamples.php]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Terms of Service</title>
		<link>https://staging.getbraincloud.com/apidocs/tos/</link>
		<pubDate>Tue, 28 Apr 2015 03:18:09 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1016</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>&lt;&lt; Insert brainCloud Terms of Service Here &gt;&gt;</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1016</wp:post_id>
		<wp:post_date><![CDATA[2015-04-27 23:18:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-28 03:18:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[tos]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>11</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pprredirect_active]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pprredirect_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[301]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pprredirect_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[http://getbraincloud.com/terms-of-service/]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>External Authentication</title>
		<link>https://staging.getbraincloud.com/apidocs/api-modules/authentication/external-authentication/</link>
		<pubDate>Wed, 06 May 2015 17:10:10 +0000</pubDate>
		<dc:creator><![CDATA[roger.masse]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1025</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>brainCloud provides support for authenticating users via an external directory. This is done by implementing a custom script that acts as the integration <em>glue</em> between brainCloud and the&nbsp;external directory.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Creating the Script</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The first thing to do is write the script. This is done via the Cloud Code/Edit Scripts tab of the portal. The script must not be client callable. The parameter names for script data input are&nbsp;"externalId" and "authenticationToken". These parameters will be passed to the script by the client API authentication method. The script must return a boolean true or false to indicate success or failure.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here's an example:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"js"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="js" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">// Grab the input parameters

apiToken = data.authenticationToken;
externalId = data.externalId;

// Create a proxy to the service
httpProxy = bridge.getHttpClientServiceProxy();

// Create an empty query object
query = {};
// Setup the header
headers = {};
headers.ExternAPIToken = apiToken;

// make the web call
result = httpProxy.getResponseJson("externServiceName","v1/Users/Me", query, headers);

// Evaluate the result and return
var retval = false;
var bcstatus = result.status;
if (bcstatus === 200)
{
    bcdata = result.data;
    restStatus = bcdata.status;
    if (restStatus == 200)
    {
        jsondata = bcdata.json;
        username = jsondata.UserName;
        retval = (username === externalId);
    }
}
retval;</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":4} -->
<h4>Portal Configuration</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The script to run for a particular external authentication type must be configured via Authentication/External tab in the portal. You must use this area to associate an external authentication name with a script. &nbsp;The previously created script name should appear in the drop-down on this page when you add an entry.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You must also configure&nbsp;the url you want to access in the script via the Cloud Code/Web Services tab in the portal.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Client Call</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Now you can make an authentication call from a client app or via the Cloud Code/API Explorer tab in the portal. You need to set <g class="gr_ gr_22 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace" id="22" data-gr-id="22">the </g><code class="">authenticationType</code><g class="gr_ gr_22 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace" id="22" data-gr-id="22"> parameter</g> to "External" and the <code>externalAuthName</code> parameter to the value you used to identify the script in the Authentication/External tab in the portal.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Advanced</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Beginning with Release 4.2, External Authentication scripts have been enhanced to support returning of a JSON object with additional options:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><code>valid</code>: boolean - indicates whether <g class="gr_ gr_25 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Grammar only-ins replaceWithoutSep" id="25" data-gr-id="25">authentication</g> was successful</li><li><code>externalIdOverride</code>: "<g class="gr_ gr_78 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace" id="78" data-gr-id="78">string</g>" (optional) - tells the system to store the override string provided instead of the contents of the <g class="gr_ gr_56 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace" id="56" data-gr-id="56"><code>externalId</code></g> field passed into the Authenticate call. This is useful for cases where the externalId passed in can change (like an email used for logging in) - so that the system stores a non-changeable id (like an account number)</li><li><code>useProfileId</code>: "<g class="gr_ gr_104 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace" id="104" data-gr-id="104">string</g>" (optional) - tells the system to use the <g class="gr_ gr_49 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace" id="49" data-gr-id="49">specified </g><code>profileId</code><g class="gr_ gr_49 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace" id="49" data-gr-id="49"> to</g> look up the user's account. If specified, the external identity will not be persisted against the user's account</li><li><code>authPayload</code>: JSON map - allows the auth script to return additional information to the client for <em>successful</em> logins</li><li><code>extraErrorJson</code>: JSON map - allows the auth script to return additional error context to the client for <em>unsuccessful</em> logins</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1025</wp:post_id>
		<wp:post_date><![CDATA[2015-05-06 13:10:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-06 17:10:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[external-authentication]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>23</wp:post_parent>
		<wp:menu_order>13</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="account"><![CDATA[account]]></category>
		<category domain="yst_prominent_words" nicename="authentication"><![CDATA[authentication]]></category>
		<category domain="yst_prominent_words" nicename="authentication-external-tab"><![CDATA[authentication/external tab]]></category>
		<category domain="yst_prominent_words" nicename="authentication-external-tab-in-the-portal"><![CDATA[authentication/external tab in the portal]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="call"><![CDATA[call]]></category>
		<category domain="yst_prominent_words" nicename="client"><![CDATA[client]]></category>
		<category domain="yst_prominent_words" nicename="cloud"><![CDATA[cloud]]></category>
		<category domain="yst_prominent_words" nicename="external"><![CDATA[external]]></category>
		<category domain="yst_prominent_words" nicename="external-authentication"><![CDATA[external authentication]]></category>
		<category domain="yst_prominent_words" nicename="external-directory"><![CDATA[external directory]]></category>
		<category domain="yst_prominent_words" nicename="parameter"><![CDATA[parameter]]></category>
		<category domain="yst_prominent_words" nicename="passed"><![CDATA[passed]]></category>
		<category domain="yst_prominent_words" nicename="portal"><![CDATA[portal]]></category>
		<category domain="yst_prominent_words" nicename="string"><![CDATA[string]]></category>
		<category domain="yst_prominent_words" nicename="string-optional"><![CDATA[string optional]]></category>
		<category domain="yst_prominent_words" nicename="system"><![CDATA[system]]></category>
		<category domain="yst_prominent_words" nicename="tab"><![CDATA[tab]]></category>
		<category domain="yst_prominent_words" nicename="tab-in-the-portal"><![CDATA[tab in the portal]]></category>
		<category domain="yst_prominent_words" nicename="users-account"><![CDATA[user's account]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Managing Apps</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/managing-apps/</link>
		<pubDate>Thu, 07 May 2015 13:59:59 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1055</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>The <strong>Apps</strong>&nbsp;page (accessible via <strong>Admin | Apps</strong>) is used to manage your&nbsp;team's&nbsp;brainCloud applications.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It's important to understand that Apps in brainCloud are generally in one of two states:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>In Development</strong> - in development apps are free in brainCloud, but with limitations<br>(i.e. the maximum of 100 users per day, no real in-app purchases, max 1000 users lifetime)</li><li><strong>Live</strong> - live apps have no run-time restrictions and are associated with a brainCloud subscription plan.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Via this page, you can:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>View the <strong>current status</strong> of your apps</li><li><strong>Disable&nbsp;/ Re-Enable</strong>&nbsp;- temporarily disables end-users ability to log into your app.</li><li><strong>Go Live</strong> - publish your app, associating it with a subscription plan</li><li><strong>Apply coupon</strong> - apply a coupon for pricing discounts</li><li><strong>Refresh</strong> - sync&nbsp;with the billing system to refresh the app's status</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Developers can perform an operation on an app by clicking on the Action button and choosing the associated menu option.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_appAdminActions.jpg" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_appAdminActions.jpg" alt="brainCloud"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Important information displayed on this screen:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong># Users</strong> - this is the total number of&nbsp;end-user&nbsp;accounts associated with the game. &nbsp;It is refreshed nightly, so you won't see it update in real-time.</li><li><strong>Publishing</strong>&nbsp;- indicates whether your app is&nbsp;Live or not. &nbsp;Live apps show "Live", with the name of the associated subscription plans. &nbsp;Apps that are still in development display the <strong>[Go Live!] </strong>button.</li><li><strong>Status</strong> - whether the app is Enabled or Not.</li><li><strong>Run Status</strong> - the run-time status of your app. Indicates whether brainCloud is doing any special checks (to enforce limitations) as users log in.</li><li><strong>Discounts</strong> - whether or not any discounts have been applied to the subscription pricing of the app</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>For more information on publishing apps, refer to the <a href="/apidocs/portal-usage/publishing-apps/">Publishing Apps</a> page.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1055</wp:post_id>
		<wp:post_date><![CDATA[2015-05-07 09:59:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-07 13:59:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[managing-apps]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>18</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="app"><![CDATA[app]]></category>
		<category domain="yst_prominent_words" nicename="apply"><![CDATA[apply]]></category>
		<category domain="yst_prominent_words" nicename="apps-page"><![CDATA[apps page]]></category>
		<category domain="yst_prominent_words" nicename="associated"><![CDATA[associated]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="development"><![CDATA[development]]></category>
		<category domain="yst_prominent_words" nicename="discounts"><![CDATA[discounts]]></category>
		<category domain="yst_prominent_words" nicename="limitations"><![CDATA[limitations]]></category>
		<category domain="yst_prominent_words" nicename="live"><![CDATA[live]]></category>
		<category domain="yst_prominent_words" nicename="live-apps"><![CDATA[live apps]]></category>
		<category domain="yst_prominent_words" nicename="log"><![CDATA[log]]></category>
		<category domain="yst_prominent_words" nicename="page"><![CDATA[page]]></category>
		<category domain="yst_prominent_words" nicename="plan"><![CDATA[plan]]></category>
		<category domain="yst_prominent_words" nicename="publishing"><![CDATA[publishing]]></category>
		<category domain="yst_prominent_words" nicename="publishing-apps"><![CDATA[publishing apps]]></category>
		<category domain="yst_prominent_words" nicename="run-time"><![CDATA[run-time]]></category>
		<category domain="yst_prominent_words" nicename="status"><![CDATA[status]]></category>
		<category domain="yst_prominent_words" nicename="subscription"><![CDATA[subscription]]></category>
		<category domain="yst_prominent_words" nicename="subscription-plan"><![CDATA[subscription plan]]></category>
		<category domain="yst_prominent_words" nicename="users"><![CDATA[users]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Publishing Apps</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/publishing-apps/</link>
		<pubDate>Thu, 07 May 2015 13:59:06 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1065</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>brainCloud is free during development. While in development, apps have the following restrictions:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li> 100 users per day </li><li> 1000 users lifetime   </li><li> no live in-app purchases. </li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Publishing your app and associating it with a brainCloud Subscription Plan removes those limitations.  </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To enroll in a Subscription Plan, you'll need to create a billing account, and set up a credit card for payment. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Creating your billing account</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p> brainCloud uses a secure, 3rd party billing system to maintain your payment info and handle monthly invoicing. </p>
<!-- /wp:paragraph -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_goLive.jpg" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_goLive.jpg" alt="brainCloud"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>To create your billing account:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Select the <strong>Team </strong>tab from the top menu</li><li>Select <strong>Manage </strong>from the side menu to view the management page choices</li><li>Select the <strong>Team Info</strong> page </li><li>Go to the <em>Billing Information</em> section at the bottom of the page, and click the <strong>[Edit Billing]</strong> button</li><li><em>An e-mail will be sent to you</em>, with a link to click to create your billing account.  <em>Click the link.</em></li><li><em>Follow the instructions</em> to create a billing account userid and password<br>(Note - this is separate from the brainCloud portal account, and keeps your credit card information private)</li><li>Enter your contact info on the <strong>[Customer Information]</strong> tab</li><li>Enter your payment info on the <strong>[Payment Method]</strong> tab</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/05/Billing_Payment_Method-1024x630.png" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2015/05/Billing_Payment_Method-1024x630.png" alt="brainCloud"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>When you're done entering the information in the billing portal:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Return to the brainCloud portal, returning to the <strong>Team | Manage  |</strong> <strong> Team Info</strong> page</li><li>Review your <em>Account Status</em> displayed at the bottom of the page under <em>Billing Info</em> </li><li>This section should say "Ready to go live".  </li><li>If it doesn't, hit the <strong>[Refresh Billing]</strong> button to update it</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>You're now all set to publish your app.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>Publish Your App</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Once your billing info is set up, publishing an app is&nbsp;very straightforward.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To publish your app:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li> Select the <strong>Team </strong>tab from the top menu</li><li>Select <strong>Manage </strong>from the side menu to view the management page choices</li><li>Select the <strong>Apps</strong> page  </li><li>Find the app in the list, and click the <strong>[Go Live!]</strong> button</li><li>You'll be asked to choose the Subscription Plan to associate with your app.</li><li>Plans have two types: <strong>Basic</strong> and <strong>Plus</strong>. <em>The key benefits of </em><strong><em>Plus</em></strong><em> plans are support for </em><strong><em>RTT </em></strong><em>and </em><strong><em>Hosting</em></strong><em>, which are typically needed in head-to-head real-time games.   </em></li><li>Within Basic and Plus plans, you can select <strong>Lite</strong>, <strong>Standard </strong>or <strong>Business </strong>tiers. <em>Note that in addition to a higher API count, the Business Plan offers additional enterprise and integration features, plus higher base API and storage/download amounts. For full details, see </em><a href="http://getbraincloud.com/pricing-overview/"><em>this page</em></a><em>.)</em></li><li>Select your preferred plan from the list, and click <strong>[Choose Plan]</strong>. </li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":6476} -->
<figure class="wp-block-image"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/08/Basic-Plans.jpg" alt="" class="wp-image-6476"/></figure>
<!-- /wp:image -->

<!-- wp:image {"id":6475} -->
<figure class="wp-block-image"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/08/Plus-Plans.jpg" alt="" class="wp-image-6475"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The Apps page should refresh to reflect the updated status of your app. &nbsp;If it doesn't, choose <strong>Refresh</strong> from the Action menu.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Your app is now live - your first monthly payment will be processed at the end of the month. Note that the flat fee associated with your subscription plan (i.e. the $30 flat fee associated with the Standard plan) will be pro-rated according to how many days are left in the month.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1065</wp:post_id>
		<wp:post_date><![CDATA[2015-05-07 09:59:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-07 13:59:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[publishing-apps]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>20</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="billing-account"><![CDATA[billing account]]></category>
		<category domain="yst_prominent_words" nicename="create-a-billing"><![CDATA[create a billing]]></category>
		<category domain="yst_prominent_words" nicename="create-a-billing-account"><![CDATA[create a billing account]]></category>
		<category domain="yst_prominent_words" nicename="create-your-billing"><![CDATA[create your billing]]></category>
		<category domain="yst_prominent_words" nicename="create-your-billing-account"><![CDATA[create your billing account]]></category>
		<category domain="yst_prominent_words" nicename="flat-fee-associated"><![CDATA[flat fee associated]]></category>
		<category domain="yst_prominent_words" nicename="info-on-the-tab"><![CDATA[info on the tab]]></category>
		<category domain="yst_prominent_words" nicename="manage-from-the-side"><![CDATA[manage from the side]]></category>
		<category domain="yst_prominent_words" nicename="manage-from-the-side-menu"><![CDATA[manage from the side menu]]></category>
		<category domain="yst_prominent_words" nicename="management-page-choices"><![CDATA[management page choices]]></category>
		<category domain="yst_prominent_words" nicename="menu-to-view-the-management"><![CDATA[menu to view the management]]></category>
		<category domain="yst_prominent_words" nicename="publish-your-app"><![CDATA[publish your app]]></category>
		<category domain="yst_prominent_words" nicename="select-manage-from-the-side"><![CDATA[select manage from the side]]></category>
		<category domain="yst_prominent_words" nicename="select-the-team"><![CDATA[select the team]]></category>
		<category domain="yst_prominent_words" nicename="select-the-team-tab"><![CDATA[select the team tab]]></category>
		<category domain="yst_prominent_words" nicename="side-menu-to-view"><![CDATA[side menu to view]]></category>
		<category domain="yst_prominent_words" nicename="subscription-plan"><![CDATA[subscription plan]]></category>
		<category domain="yst_prominent_words" nicename="team-info-page"><![CDATA[team info page]]></category>
		<category domain="yst_prominent_words" nicename="view-the-management-page"><![CDATA[view the management page]]></category>
		<category domain="yst_prominent_words" nicename="view-the-management-page-choices"><![CDATA[view the management page choices]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[25]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Support</title>
		<link>https://staging.getbraincloud.com/apidocs/support/</link>
		<pubDate>Thu, 28 May 2015 18:22:23 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1119</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":4} -->
<h4>Hit a roadblock?&nbsp;Help is right around the corner!</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There are three places to look for brainCloud information:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="/apidocs/">API Docs</a> (this site) - conceptual overviews, tutorials, etc.</li><li><a href="/apidocs/apiref/" target="_blank" rel="noreferrer noopener" aria-label=" (opens in a new tab)">API Reference</a> - detailed method and response signatures across C++, C#, Java, Javascript, etc</li><li><a rel="noreferrer noopener" href="http://help.getbraincloud.com" target="_blank">Knowledge base</a> - frequently asked questions</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>If you can't find what you are looking for,&nbsp;please don't hesitate to contact us using the green help widget in the bottom right-hand corner of the portal and API&nbsp;pages. We'll get back to you as soon as we can!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1119</wp:post_id>
		<wp:post_date><![CDATA[2015-05-28 14:22:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-28 18:22:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[support]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>35</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Error Handling</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/general-api-tutorials/error-handling/</link>
		<pubDate>Tue, 09 Jun 2015 20:23:47 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1216</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>When using brainCloud, your app will need to handle certain error conditions. There are two main types of errors that can occur while using the brainCloud client library:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Network errors - A network error indicates that a packet was sent to brainCloud but no response was received.</li><li>API call errors - A packet was sent to (and received by) brainCloud but resulted in a non-200 HTTP response</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>In order to effectively respond to these error conditions, developers need to implement error handlers. A list of error reason codes returned by brainCloud can be found here:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="/apidocs/apiref/#appendix-reasoncodes" target="_blank" rel="noopener noreferrer">Reason Codes Appendix</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Below&nbsp;are the specifics for implementing error handlers for the various supported brainCloud client platforms.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Unity/C# library</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>All API calls have two&nbsp;callback delegates as parameters, one for success and one for failure:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">/// &lt;summary>
/// Success callback for an API method.
/// &lt;/summary>
/// &lt;param name="jsonResponse">The json response from the server&lt;/param>
/// &lt;param name="cbObject">The user supplied callback object&lt;/param>
public delegate void SuccessCallback(string jsonResponse, object cbObject);

/// &lt;summary>
/// Failure callback for an API method.
/// &lt;/summary>
/// &lt;param name="status">The http status code&lt;/param>
/// &lt;param name="reasonCode">The error reason code&lt;/param>
/// &lt;param name="jsonError">The error json string&lt;/param>
/// &lt;param name="cbObject">The user supplied callback object&lt;/param>
public delegate void FailureCallback(int status, int reasonCode, string jsonError, object cbObject)</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>For example, the AuthenticateUniversal method is defined as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">public void AuthenticateUniversal(string userid, string password, bool forceCreate, SuccessCallback success, FailureCallback failure);</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>If authentication succeeds, the success callback function will be called with the json response from brainCloud. The user-supplied callback object will also be returned (in case you need to keep track of some contextual information).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If authentication fails, the HTTP status code, a reason code, and a json response describing the error will be returned. In order to handle the error effectively, you can refer to the <a rel="noopener noreferrer" href="/apidocs/apiref/#appendix-reasoncodes" target="_blank">Reason Code Appendix</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>C++&nbsp;library</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The C++ library has a slightly different mechanism for dealing with callbacks. Specifically, all API methods take in an "IServerCallback" pointer. This interface declares the following methods:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"cpp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="cpp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">/**
* The serverCallback() method returns server data back to the layer
* interfacing with the BrainCloud library.
*
* @param serviceName - name of the requested service
* @param serviceOperation - requested operation
* @param jsonData - returned data from the server
*/
virtual void serverCallback( ServiceName serviceName, ServiceOperation serviceOperation, std::string const &amp; jsonData) = 0;



/**
* Errors are returned back to the layer which is interfacing with the
* BrainCloud library through the serverError() callback.
*
* A server error might indicate a failure of the client to communicate
* with the server after N retries.
*
* @param serviceName The service name being called
* @param serviceOperation The service operation being called
* @param statusCode The error status return code (400, 403, 500, etc)
* @param reasonCode The brainCloud reason code (see reason codes on apidocs site)
* @param jsonError The error json string
*/
virtual void serverError( ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, const std::string &amp; jsonError) = 0;</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>For example, the AuthenticateUniversal method is defined as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"cpp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="cpp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">void authenticateUniversal(const char * in_userid, const char * in_password, bool in_forceCreate, IServerCallback * in_callback);</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":3} -->
<h3>Java&nbsp;library</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The Java library is similar to C++ in that there is an IServerCallback interface that can be supplied to any API call. This interface declares the following methods:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"java"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="java" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">public interface IServerCallback {
    /**
     * The serverCallback() method returns server data back to the layer
     * interfacing with the BrainCloud library.
     *
     * @param serviceName - name of the requested service
     * @param serviceOperation - requested operation
     * @param jsonData - returned data from the server
     */
   void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData);

    /**
     * Errors are returned back to the layer which is interfacing with the
     * BrainCloud library through the serverError() callback.
     *
     * A server error might indicate a failure of the client to communicate
     * with the server after N retries.
     *
     * @param statusCode The error status return code (400, 403, 500, etc)
     * @param reasonCode The brainCloud reason code (see reason codes on apidocs site)
     * @param jsonError The error json string
     */
   void serverError(int statusCode, int reasonCode, String jsonError);
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>For example, the AuthenticateUniversal method is defined as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"java"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="java" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">public void authenticateUniversal(String userId, String userPassword, boolean forceCreate, IServerCallback callback);</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":3} -->
<h3>&nbsp;</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>Javascript&nbsp;library</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Coming soon!</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Cloud Code</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>See <a href="/apidocs/apiref/#cc" target="_blank" rel="noopener noreferrer">Cloud Code section</a> in API modules</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>&nbsp;</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1216</wp:post_id>
		<wp:post_date><![CDATA[2015-06-09 16:23:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-09 20:23:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[error-handling]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>2468</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="api"><![CDATA[api]]></category>
		<category domain="yst_prominent_words" nicename="api-call"><![CDATA[api call]]></category>
		<category domain="yst_prominent_words" nicename="authenticateuniversal-method"><![CDATA[authenticateuniversal method]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-client"><![CDATA[braincloud client]]></category>
		<category domain="yst_prominent_words" nicename="c-library"><![CDATA[c library]]></category>
		<category domain="yst_prominent_words" nicename="cloud-code"><![CDATA[cloud code]]></category>
		<category domain="yst_prominent_words" nicename="code"><![CDATA[code]]></category>
		<category domain="yst_prominent_words" nicename="defined-as-follows"><![CDATA[defined as follows]]></category>
		<category domain="yst_prominent_words" nicename="error"><![CDATA[error]]></category>
		<category domain="yst_prominent_words" nicename="error-conditions"><![CDATA[error conditions]]></category>
		<category domain="yst_prominent_words" nicename="error-handlers"><![CDATA[error handlers]]></category>
		<category domain="yst_prominent_words" nicename="example-the-authenticateuniversal"><![CDATA[example the authenticateuniversal]]></category>
		<category domain="yst_prominent_words" nicename="example-the-authenticateuniversal-method"><![CDATA[example the authenticateuniversal method]]></category>
		<category domain="yst_prominent_words" nicename="interface-declares"><![CDATA[interface declares]]></category>
		<category domain="yst_prominent_words" nicename="java-library"><![CDATA[java library]]></category>
		<category domain="yst_prominent_words" nicename="json-response"><![CDATA[json response]]></category>
		<category domain="yst_prominent_words" nicename="library"><![CDATA[library]]></category>
		<category domain="yst_prominent_words" nicename="reason-code"><![CDATA[reason code]]></category>
		<category domain="yst_prominent_words" nicename="reason-codes"><![CDATA[reason codes]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>brainCloud Bombers Example Game</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/unity-tutorials/braincloud-bombers-example-game/</link>
		<pubDate>Tue, 23 Jun 2015 19:05:31 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1256</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><em>This is a legacy tutorial for those using our UNET or Photon examples. Please find our latest tutorial </em><a href="https://staging.getbraincloud.com/apidocs/tutorials/unity-tutorials/braincloud-bombers-example-game/"><em>here</em></a><em>.</em></p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>The latest version of the Bombers project can always be found <a href="https://github.com/getbraincloud/UnityExamples/">here</a> on GitHub

</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>brainCloud Bombers is a&nbsp;fun little&nbsp;game, written in <strong>Unity</strong>, that&nbsp;demonstrates how brainCloud can work together with external multiplayer tech (such as <a href="http://unity3d.com/services/multiplayer" target="_blank" rel="noreferrer noopener">Unity UNET</a> or&nbsp;<a href="https://www.exitgames.com/en/Realtime" target="_blank" rel="noreferrer noopener">Exit Games' Photon</a>) to produce real-time multiplayer game experiences.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>[Remember - brainCloud includes everything you need for turn-based (i.e. Trivia Crack) and offline (i.e. Clash of Clans) multiplayer, but does not provide real-time (i.e. Team Fortress 2) or near real-time (i.e. Hearthstone) multiplayer support - for that, a solution like UNET or Photon is ideal.]</em></p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1257,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/06/Unity_Web_Player___PhotonDemo.png"><img src="/apidocs/wp-content/uploads/2015/06/Unity_Web_Player___PhotonDemo-1024x715.png" alt="Unity_Web_Player___PhotonDemo" class="wp-image-1257"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Bombers is a fun&nbsp;multiplayer game&nbsp;with the following features:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Game objective: Destroy the other team's fleet to win</li><li>Two stage gameplay: Dogfight&nbsp;to collect bombs, then drop the bombs&nbsp;to destroy enemy ships</li><li>Controls: Keyboard + mouse</li><li>Players: Max 8 players per match</li><li>Leaderboards: Global leaderboards</li><li>Achievements: 3 achievements to earn</li><li>Cloud saves: Player progression&nbsp;is saved as they level up</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2><strong>Play Now!</strong></h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><strong><a href="https://sharedprod.braincloudservers.com/s3/brainCloudExamples/unity/bombersUnet/brainCloudBombersUNET_OSX_1.0.0.zip" target="_blank" rel="noreferrer noopener">Bombers UNET version (Mac)</a></strong>&nbsp;- download and install to play</li><li><strong><a href="https://sharedprod.braincloudservers.com/s3/brainCloudExamples/unity/bombersUnet/brainCloudBombersUNET_Windows_1.0.0.zip" target="_blank" rel="noreferrer noopener">Bombers UNET version (PC)</a></strong>&nbsp;- download and install to play</li><li><strong><a href="http://sharedprod.braincloudservers.com/s3/brainCloudExamples/unity/bombers/brainCloudBombers.html" target="_blank" rel="noreferrer noopener">Bombers Photon version (Web)</a> </strong>- uses the Unity Web Player,&nbsp;so be sure to use a compatible browser!</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Full Source Available</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The full source of brainCloud bombers&nbsp;has been made available for our developers. Feel free to use and extend it - but please replace all art for commercial efforts and be sure to use brainCloud! Good luck!</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="/apidocs/tutorials/unity-tutorials/about-braincloud-bombers/">Read</a> about how brainCloud bombers was written</li><li><a rel="noreferrer noopener" href="https://github.com/getbraincloud/UnityExamples" target="_blank">View</a> the&nbsp;source (Github)</li><li><a href="/apidocs/tutorials/unity-tutorials/building-the-braincloud-bombers-project/">Build</a> it yourself!</li><li><a href="https://assetstore.unity.com/packages/templates/tutorials/braincloud-bombers-for-photon-50657">Download</a> it from the Unity Asset Store!</li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":1} -->
<h1>Building Bombers</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><em>Note – these instructions assume that you’ve already made yourself familiar with the game via the Intro and Overview postings.</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To build the&nbsp;<strong>Photon</strong>&nbsp;version of brainCloud bombers:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Step 1: Retrieve the source code</li><li>Step 2: Register with brainCloud (if you haven’t already)</li><li>Step 3: Create the brainCloud Bombers app</li><li>Step 4: Update the brainCloud appId and secret in the source code</li><li>Step 5: Import the brainCloud Bombers meta-data</li><li>Step 6: Register with Photon</li><li>Step 7: Update the Photon appid and secret</li><li>Step 8: Build!</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong><em>To build the UNET version of Bombers, just use UNET Step 6 and UNET Step 7.</em></strong></p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>Step 1: Retrieve the source code</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The brainCloud Bombers source is stored on GitHub. &nbsp;You can find it in the&nbsp;“Bombers” directory&nbsp;<a href="https://github.com/getbraincloud/UnityExamples" target="_blank" rel="noreferrer noopener">here</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Step 2: Register with brainCloud</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Registering with brainCloud is easy and free. &nbsp;Go to&nbsp;<a href="http://getbraincloud.com/" target="_blank" rel="noreferrer noopener">getBrainCloud.com</a>&nbsp;and click&nbsp;<strong>[Sign Up]</strong>&nbsp;in the top-right-hand corner.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Step 3: Create the brainCloud Bombers App</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To create the app:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Go to the&nbsp;<strong>Administration</strong>&nbsp;section of the Portal by clicking on the “Gear” icon in the top-right</li><li>Click on the&nbsp;<strong>[+]</strong>&nbsp;button in the “Your Apps” section of the&nbsp;<strong>Home</strong>&nbsp;page</li><li>Fill out the&nbsp;<strong>New App</strong>&nbsp;dialog – be sure to enable game features and choose the platforms to run upon.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":1292,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2015/06/Bomber_new_app.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2015/06/Bomber_new_app-277x300.png" alt="New App Dialog" class="wp-image-1292"/></a><figcaption>New App Dialog</figcaption></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Go to the app by clicking on its name in the&nbsp;<strong>Your Apps</strong>&nbsp;list, or by choosing the&nbsp;<strong>Design</strong>&nbsp;tab, and then selecting it from the drop-down</li><li>You’ll see the brainCloud App ID and App Secret on the&nbsp;<strong>Core App Info | Application IDs</strong>&nbsp;page…. &nbsp;we’ll use those in our next step.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":1302,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2015/06/Bomber_app_id.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2015/06/Bomber_app_id-1024x300.png" alt="Bomber_app_id" class="wp-image-1302"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>Step 4:&nbsp;Update the brainCloud appId and secret in the source code</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Load the bomber project,&nbsp;“PhotonDemo”, into Unity</li><li>Choose&nbsp;<strong>brainCloud | Settings</strong>&nbsp;from the Unity menu bar</li><li>Enter the&nbsp;<em>brainCloud&nbsp;app id</em>&nbsp;into the&nbsp;<em>Game Id</em>&nbsp;field</li><li>Enter the&nbsp;<em>brainCloud secret</em>&nbsp;into the&nbsp;<em>Game Secret</em>&nbsp;field</li><li>Also, hit&nbsp;<strong>[Reset to Default Server URL]</strong>&nbsp;to ensure that the client is set to connect to the proper endpoint</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":1304,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2015/06/Unity_settings.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2015/06/Unity_settings-300x186.png" alt="Unity_settings" class="wp-image-1304"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>Step 5: Import the Bomber meta-data</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Back in the brainCloud portal, go to&nbsp;<strong>Design | Admin Tools</strong>&nbsp;for the your app</li><li>Click the [Import] button in the Configuration Data section<ul><li>Choose&nbsp;<strong>[Select Configuration File (bcconfig)]</strong>, and navigate to the&nbsp;<strong><em>Bombers/ImportData/Bombers_&lt;some_date&gt;.bcconfig</em></strong>file&nbsp;included with the bomber source</li><li>You can leave the two “Do not overwrite” options blank – they’re not used in this example</li><li>Click&nbsp;<strong>[Upload]</strong>&nbsp;to import the data</li><li>You’ll immediately note that the brainCloud Bombers icon is now associated with your project. &nbsp;You’ll also see user statistics, achievements, and XP levels filled in throughout the application.</li></ul></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Step 6: Register with Photon</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Go to&nbsp;<strong>https://www.exitgames.com/en/PUN</strong>&nbsp;to set up a free Photon account</li><li>Once you’ve registered, click&nbsp;<strong>[Dashboard]</strong>&nbsp;to view the free app that Photon has automatically configured for you</li><li>You’ll notice the Photon App ID – we’ll be using that in the next step</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":1300,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2015/06/Photon_Setup.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2015/06/Photon_Setup-1024x411.png" alt="Photon_Setup" class="wp-image-1300"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>UNET Step 6: Register with&nbsp;UNET</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Go to&nbsp;<a href="http://unet.cloud.unity3d.com/"><strong>https://www.unet.cloud.unity3d.com</strong></a>&nbsp;to set up a free Unity Cloud&nbsp;account</li><li>Once you’ve registered, click&nbsp;<strong>[Multiplayer]&nbsp;</strong>at the top left and click the [Create Project] button at the top right</li><li>Type in a name, a maximum number of players per room, and accept</li><li>Copy the&nbsp;<strong>UPID</strong>&nbsp;field from this page</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Step 7:&nbsp;Update the Photon app id</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Back in Unity,&nbsp;Choose&nbsp;<strong>Window | Photon Unity Networking | Local Settings Asset</strong>&nbsp;from the drop-down menu</li><li>In the Inspector windows that shows, enter the Photon AppID</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":1301,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2015/06/Photon_app_id_in_Unity.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2015/06/Photon_app_id_in_Unity-300x137.png" alt="Photon_app_id_in_Unity" class="wp-image-1301"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>UNET Step 7:&nbsp;Update the&nbsp;Cloud Project ID</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Back in Unity,&nbsp;Choose&nbsp;<strong>Edit&nbsp;| Project Settings&nbsp;| Player</strong>&nbsp;from the drop-down menu</li><li>In the Inspector windows that shows, enter the you&nbsp;<strong>UPID</strong>&nbsp;into the&nbsp;<strong>Cloud Project Id&nbsp;</strong>field</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Step 8:&nbsp;Play the game!</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>From the&nbsp;<strong>Project</strong>&nbsp;window, choose the&nbsp;<strong>Assets</strong>&nbsp;folder on the left, and then choose the Scenes subfolder</li><li>Select the&nbsp;<strong>Connect</strong>&nbsp;Scene in the&nbsp;<strong>Assets</strong>&nbsp;folder of the project, and then click&nbsp;<strong>Play!&nbsp;</strong>Have fun!</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":1306,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2015/06/Run_bombers.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2015/06/Run_bombers-300x142.png" alt="Run_bombers" class="wp-image-1306"/></a></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":1} -->
<h1>More about <strong>brainCloud Bombers</strong></h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>brainCloud Bombers is an example project meant to show the compatibility between brainCloud and real-time multiplayer technologies (such as Unity 5 UNET and Photon). Players create accounts, log into the game, play against other players in real-time multiplayer battles, and their stats are saved between sessions via&nbsp;brainCloud. The example also shows various features of brainCloud, including:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Experience levels and ranking up</li><li>Custom player statistics and entities</li><li>Multiple global&nbsp;leaderboards</li><li>Achievement tracking and unlocking</li><li>Global properties</li><li>Email authentication</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Please refer to the specific individual sections for some description, overview, and functionality of each feature. &nbsp;<em>The source for both UNET and Photon versions of brainCloud Bombers can be found&nbsp;<a href="https://github.com/getbraincloud/UnityExamples" target="_blank" rel="noreferrer noopener">here</a>.</em></p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1265} -->
<figure class="wp-block-image"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2015/06/Dash_XP_and_Stats.png" alt="Dash_XP_and_Stats" class="wp-image-1265"/><figcaption>Bombers XP &amp; Stats Dashboard</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2><strong>Experience Levels and Ranking Up</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In brainCloud Bombers, players can earn experience for destroying enemy planes in-game. Experience is awarded at the end of each match and kept track of on the brainCloud servers. Players can view their total experience on the Matchmaking menu, beneath the player’s name. brainCloud also has custom levels defined, each having an experience value and a name. Players can see their current rank (as well as its numeric value) on the Matchmaking menu, beneath the player’s name. Experience is incremented live, so brainCloud sends messages to clients when they have made it to the next rank. This is shown to the player through a dialog that appears at the end of a match.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Experience and levels can be read through the PlayerStateService in the brainCloud API. The call returns the current player’s experience level and rank name/numeric value, all of which are saved as public member variables in the BrainCloudStats class. These stats are updated live on the brainCloud server, but on the local client, they are only updated when the player visits the Matchmaking menu, reducing the number of API calls required per user.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1266,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2015/06/xp_levels.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2015/06/xp_levels.png" alt="" class="wp-image-1266"/></a><figcaption>Xp levels</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2><strong>Custom Player [User] Statistics</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Every player in brainCloud bombers has a number of custom statistics that are stored on the brainCloud servers. These statistics include the number of ships they have sunk, the number of times they have fired their weapon, their total number of wins, and more. These statistics are updated at the end of each match. Players can view their statistics on the Matchmaking menu, where they are shown on the left side, below the player’s name. These statistics were created on the brainCloud design portal, and can also be edited from the monitoring section of the portal&nbsp;for each user.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":4664,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/11/UserStats.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/11/UserStats.png" alt="" class="wp-image-4664"/></a><figcaption>User Statistics</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Player statistics can be read through the PlayerStatisticsService in the brainCloud API. The call returns all of the current player’s statistics, including the statistics’ name, value, and description (all defined from the brainCloud dashboard), of which only the value is saved in public member variables in the BrainCloudStats class. These stats are updated live on the brainCloud server, but on the local client, they are only updated when the player visits the Matchmaking menu, reducing the number of API calls required per user.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2><strong>Global&nbsp;Leaderboards</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>brainCloud Bombers has two separate global&nbsp;leaderboards defined, that players may view at their leisure from the Matchmaking menu. The first leaderboard keeps track of the number of enemy plane takedowns that each player has, with the least number of deaths as the tiebreaker, and the second leaderboard keeps track of the number of ship weak-points destroyed by each player, with the least number bombs dropped as the tiebreaker. Both leaderboards feature the player’s place in the leaderboard, name, their rank (and numeric value of rank), and score. brainCloud keeps tracks of all aspects of the leaderboards, and scores are updated at the end of each match.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Leaderboards can be accessed through the SocialLeaderboardService in the brainCloud API. The call returns the entire listing of a given leaderboard, or can be broken up into just the current player’s score, or individual sections of the leaderboard with variable length. The values for the currently observed leaderboard are stored as a public member variable in the BrainCloudStats class. The leaderboards are updated live on the brainCloud server, but on the local client the leaderboards are only fetched when the player wishes to see them from the Matchmaking menu, reducing the number of API calls required per user.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1267,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2015/06/leaderboards.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2015/06/leaderboards-273x300.png" alt="leaderboards" class="wp-image-1267"/></a><figcaption>Bomber Leaderboards</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>Achievement Tracking</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Three achievements have been implemented for brainCloud Bombers: destroying 50 enemy planes, sinking 10 ships, and destroying five enemy planes in a single match. brainCloud tracks whether the achievements have been unlocked or not, and can even automatically award the achievements based on player stats using Milestones. At the end of the match, bombers sends the stats updates to brainCloud, and then checks the response to see if any Achievements have been awarded. &nbsp;[Exception: note that the Quickshot achievement is handled manually by the client code in real-time during the match.]</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Achievements can be accessed through the GamificationService in the brainCloud API. The call returns all of the achievements in the system, their names, the urls for their icons, their descriptions, and whether or not the current user has unlocked any of them. The achievement data is stored in a public member variable in the BrainCloudStats class. The achievements are updated from the server when the player visits the Matchmaking menu.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1269,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2015/06/achievements_png.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2015/06/achievements_png.png" alt="achievements_png" class="wp-image-1269"/></a><figcaption>Bomber achievements</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {"id":4673,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/11/Milestone-2.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/11/Milestone-2.png" alt="" class="wp-image-4673"/></a><figcaption>&nbsp;1. When this condition is satisfied.&nbsp;<br>2. Award this achievement.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>Global&nbsp;Properties</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>brainCloud Global Properties can be used in place of constants in your games – allowing games to be tuned and/or patched on the fly without having to release new builds. A number of properties&nbsp;have been utilized in&nbsp;brainCloud Bombers, to tune such things as&nbsp;player fire rate, respawn time, bullet speed, player health, and more.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>These properties&nbsp;can be read through the GlobalAppService in the brainCloud API. The call returns all of the currently saved global variables, which are then stored as public member variables in the BrainCloudStats class. To reduce API calls from the client, these values are only read once when the game is started, meaning clients will need to restart the app to get any changes, but they could be checked more often for the sake of app security or faster testing.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":4665,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/11/GlobalProps.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/11/GlobalProps.png" alt="" class="wp-image-4665"/></a><figcaption>Global Properties</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2><strong>Email Authentication</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>brainCloud Bombers requires users to sign in with an email and password, with the authentication being done through brainCloud. If a player uses an email that hasn’t been registered, an account is created for them and an authentication email is sent to the email address used. brainCloud also has the ability to&nbsp;<em>require</em>&nbsp;email authentication before being able to log in, though this feature is turned off for brainCloud Bombers. Players may also submit a “Forgot Password” request from the login screen, prompting them to enter their email and sending a password reset link to the entered email.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>User authentication is done through the BrainCloudWrapper instance, and is taken care of on the server end. The server will send a message back saying whether the authentication was successful or not, and the error that occurred if it wasn’t successful. Since brainCloud Bombers uses external servers (UNET or Photon), the player must wait until they are connected to their servers before logging in to brainCloud. This requirement is optional; the services do not depend on each other&nbsp;–&nbsp;this is done under&nbsp;<strong>Design | Authentication | Email&nbsp;Authentication</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":4667,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/11/EmailAuth.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/11/EmailAuth.png" alt="" class="wp-image-4667"/></a><figcaption>Email Authentication Settings</figcaption></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":1} -->
<h1><strong>brainCloud Bombers App Overview</strong></h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><em>The source code for brainCloud Bombers can be found&nbsp;<a href="https://github.com/getbraincloud/UnityExamples" target="_blank" rel="noreferrer noopener">here</a>.</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>brainCloud Bombers uses a mixture of scenes and state machines to achieve the flow-through for the game. Please refer to the following section for the general functionality of each of the classes. The scene and main class order is as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Connect Scene<ol><li>Connect</li><li>BrainCloudStats</li></ol></li><li>Matchmaking Scene<ol><li>Matchmaking</li></ol></li><li>Game Scene<ol><li>GameManager</li><li>PlayerController</li><li>WeaponController</li></ol></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong>General Script Functionality</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Connect.cs</strong><ul><li>Connects the user to the multiplayer&nbsp;server</li><li>Handles the email and password input for brainCloud</li><li>Handles error messages from the login process</li><li>Initializes the BrainCloudStats script after the player has logged in</li></ul></li><li><strong>BrainCloudStats.cs</strong><ul><li>Reads a variety of information from the brainCloud server and stores it in public member variables<ul><li>Statistics for the authenticated user</li><li>Experience and Level for the authenticated user</li><li>General information about experience levels (names, value, etc.)</li><li>General information about achievements (including whether the authenticated user has achieved them or not)</li><li>Global Properties for brainCloud Bombers</li><li>Social Leaderboards for brainCloud Bombers</li></ul></li><li>Handles error messages from the brainCloud server</li></ul></li><li><strong>Matchmaking.cs</strong><ul><li>Uses a state machine to implement functionality for a number of menus available to the player<ul><li>GAME_STATE_SHOW_ROOMS: Shows the main matchmaking menu, allowing the player to join games, create games, view the leaderboards, view the controls, view their achievements, and shows the player’s stats.</li><li>GAME_STATE_NEW_ROOM_OPTIONS: Shows the create new room dialogue, allowing the player to set the options for a new room, and then joining into it automatically</li><li>GAME_STATE_SHOW_LEADERBOARDS: Displays one of the social leaderboards for brainCloud Bombers, allowing the player to switch between them, and displaying a chevron beside the player’s own entry (if one exists)</li><li>GAME_STATE_SHOW_CONTROLS: Displays the basic controls for the game, as well as the goal and some instructions on what to do</li><li>GAME_STATE_SHOW_ACHIEVEMENTS: Shows the available achievements for brainCloud Bombers, and tells the player whether they have achieved them or not.</li></ul></li><li>Checks the multiplayer&nbsp;server for open rooms, and allows the player to join any room that is not full and within their level range.</li><li>Allows players to filter room results using a number of filters</li></ul></li><li><strong>GameManager.cs</strong><ul><li>Uses a state machine to implement functionality for a number of menus available to the player<ul><li>GAME_STATE_WAITING_FOR_PLAYERS: Shows the “Bombers Assemble” menu, showing the players connected to the game on both teams, giving players the ability to switch teams, and allowing the host to start the game prematurely before the room is full</li><li>GAME_STATE_STARTING_GAME: Fades the screen in anticipation for the match to begin, telling players to get ready</li><li>GAME_STATE_PLAYING_GAME: The main state, showing the players their HUD and handling a number of interactions for the actual game, including updating the local scores and tracking the time left in the match</li><li>GAME_STATE_GAME_OVER: Shows the results screen to the players, telling them which team won and the scores for each player. The host may go back to the “Bombers Assemble” menu when they wish, and players may leave the room</li></ul></li><li>Contains the majority of functionality for the live multiplayer, implementing a number of RPCs and controlling their effects (Photon version only)</li><li>Controls much of the game logic on the host side</li></ul></li><li><strong>PlayerController.cs</strong><ul><li>Accepts inputs from the player to control their plane</li><li>Sends movement information to the player’s plane</li><li>Controls the health and death messages for the player’s plane</li><li>Contains the majority of &nbsp;functionality for the live multiplayer, implementing a number of commands and client RPCs (UNET version only)</li></ul></li><li><strong>WeaponController.cs</strong><ul><li>Accepts inputs from the player to control the weapons on their plane, including the main guns, bombs, and flares</li><li>Sends network messages through the&nbsp;<strong>GameManager</strong>&nbsp;to spawn projectiles of all sorts</li><li>Controls the bomb targeting reticule for the player</li><li>Controls the offscreen enemy ship indicator for the player</li></ul></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1256</wp:post_id>
		<wp:post_date><![CDATA[2015-06-23 15:05:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-23 19:05:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[braincloud-bombers-example-game]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>572</wp:post_parent>
		<wp:menu_order>14</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="api-calls-required-per-user"><![CDATA[api calls required per user]]></category>
		<category domain="yst_prominent_words" nicename="bombers"><![CDATA[bombers]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-bombers"><![CDATA[braincloud bombers]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-bombers-app"><![CDATA[braincloud bombers app]]></category>
		<category domain="yst_prominent_words" nicename="create-the-braincloud-bombers-app"><![CDATA[create the braincloud bombers app]]></category>
		<category domain="yst_prominent_words" nicename="live-on-the-braincloud-server"><![CDATA[live on the braincloud server]]></category>
		<category domain="yst_prominent_words" nicename="matchmaking-menu"><![CDATA[matchmaking menu]]></category>
		<category domain="yst_prominent_words" nicename="matchmaking-menu-reducing-the-number"><![CDATA[matchmaking menu reducing the number]]></category>
		<category domain="yst_prominent_words" nicename="member-variables-in-the-braincloudstats"><![CDATA[member variables in the braincloudstats]]></category>
		<category domain="yst_prominent_words" nicename="number-of-api-calls"><![CDATA[number of api calls]]></category>
		<category domain="yst_prominent_words" nicename="number-of-api-calls-required"><![CDATA[number of api calls required]]></category>
		<category domain="yst_prominent_words" nicename="player"><![CDATA[player]]></category>
		<category domain="yst_prominent_words" nicename="player-visits-the-matchmaking-menu"><![CDATA[player visits the matchmaking menu]]></category>
		<category domain="yst_prominent_words" nicename="public-member-variables"><![CDATA[public member variables]]></category>
		<category domain="yst_prominent_words" nicename="reducing-the-number-of-api"><![CDATA[reducing the number of api]]></category>
		<category domain="yst_prominent_words" nicename="step-6-register-with-photon"><![CDATA[step 6 register with photon]]></category>
		<category domain="yst_prominent_words" nicename="step-7-update-the-photon"><![CDATA[step 7 update the photon]]></category>
		<category domain="yst_prominent_words" nicename="updated-live-on-the-braincloud"><![CDATA[updated live on the braincloud]]></category>
		<category domain="yst_prominent_words" nicename="variables-in-the-braincloudstats-class"><![CDATA[variables in the braincloudstats class]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Import/Export Game Data</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/importexport-game-data/</link>
		<pubDate>Tue, 30 Jun 2015 16:13:14 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1356</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Importing and exporting your game data is easy to do in the brainCloud portal. In order to export or import data, simply navigate to the Admin Tools section of the portal for your game and click the appropriate button.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note if you are importing data from an example project, you will want to create your game first before doing the import step.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_importExport.jpg" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_importExport.jpg" alt="brainCloud"/></a></figure>
<!-- /wp:image -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1356</wp:post_id>
		<wp:post_date><![CDATA[2015-06-30 12:13:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-30 16:13:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[importexport-game-data]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>23</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="data"><![CDATA[data]]></category>
		<category domain="yst_prominent_words" nicename="game"><![CDATA[game]]></category>
		<category domain="yst_prominent_words" nicename="import"><![CDATA[import]]></category>
		<category domain="yst_prominent_words" nicename="importing"><![CDATA[importing]]></category>
		<category domain="yst_prominent_words" nicename="portal"><![CDATA[portal]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Authentication - Facebook</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/basic-configuration-facebook/</link>
		<pubDate>Fri, 07 Aug 2015 18:26:54 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1473</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>In order for your app to connect with&nbsp;Facebook, you will need to do the steps below.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Facebook Authentication</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Go to the brainCloud Portal and open the Design | Core App Info | Application IDs page<br><figure><a rel="noopener noreferrer" href="/apidocs/wp-content/uploads/2016/09/brainCloud_fbAuth_1.jpg" target="_blank"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2016/09/brainCloud_fbAuth_1.jpg" alt="brainCloud"></a></figure></li><li>Click the Facebook icon<br><figure><a rel="noopener noreferrer" href="/apidocs/wp-content/uploads/2016/09/brainCloud_fbAuth_2.jpg" target="_blank"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2016/09/brainCloud_fbAuth_2.jpg" alt="brainCloud"></a></figure></li><li>Log into the <a rel="noopener noreferrer" href="https://developers.facebook.com" target="_blank">Facebook Developer Portal</a> for your app</li><li>Collect the "App ID" and "App Secret" from the Facebook Developer Portal Dashboard page<br><figure><a rel="noopener noreferrer" href="/apidocs/wp-content/uploads/2015/08/2015-08-07_14-14-05.png" target="_blank"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2015/08/2015-08-07_14-14-05.png" alt="brainCloud"></a></figure></li><li>Go back to the brainCloud portal and fill in the following information<br><figure><a rel="noopener noreferrer" href="/apidocs/wp-content/uploads/2016/09/brainCloud_fbAuth_3.jpg" target="_blank"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2016/09/brainCloud_fbAuth_3.jpg" alt="brainCloud"></a></figure> <ul><li>Facebook App ID - The App ID from your Facebook app dashboard page</li><li>Facebook Secret - The Secret from your Facebook app dashboard page </li></ul></li><li>Ensure that "Facebook" is turned on as a Platform in your Design | Core App Info | Platforms page<br><figure><a rel="noopener noreferrer" href="/apidocs/wp-content/uploads/2016/09/brainCloud_fbAuth_4.jpg" target="_blank"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2016/09/brainCloud_fbAuth_4.jpg" alt="brainCloud"></a></figure><br><figure><a rel="noopener noreferrer" href="/apidocs/wp-content/uploads/2016/09/brainCloud_fbAuth_5.jpg" target="_blank"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2016/09/brainCloud_fbAuth_5.jpg" alt="brainCloud"></a></figure></li><li>You should now be able to use Facebook Authentication in your app. For further information in regard to implementing Facebook Authentication, refer to <a href="http://help.getbraincloud.com/en/articles/4668095-authenticate-facebook">this linked article</a> in our knowledge base help center.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1473</wp:post_id>
		<wp:post_date><![CDATA[2015-08-07 14:26:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-07 18:26:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[basic-configuration-facebook]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>51</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="app"><![CDATA[app]]></category>
		<category domain="yst_prominent_words" nicename="app-dashboard"><![CDATA[app dashboard]]></category>
		<category domain="yst_prominent_words" nicename="app-dashboard-page"><![CDATA[app dashboard page]]></category>
		<category domain="yst_prominent_words" nicename="app-id"><![CDATA[app id]]></category>
		<category domain="yst_prominent_words" nicename="app-info"><![CDATA[app info]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-portal"><![CDATA[braincloud portal]]></category>
		<category domain="yst_prominent_words" nicename="core-app"><![CDATA[core app]]></category>
		<category domain="yst_prominent_words" nicename="core-app-info"><![CDATA[core app info]]></category>
		<category domain="yst_prominent_words" nicename="dashboard-page"><![CDATA[dashboard page]]></category>
		<category domain="yst_prominent_words" nicename="developer-portal"><![CDATA[developer portal]]></category>
		<category domain="yst_prominent_words" nicename="facebook"><![CDATA[facebook]]></category>
		<category domain="yst_prominent_words" nicename="facebook-app"><![CDATA[facebook app]]></category>
		<category domain="yst_prominent_words" nicename="facebook-app-dashboard"><![CDATA[facebook app dashboard]]></category>
		<category domain="yst_prominent_words" nicename="facebook-app-dashboard-page"><![CDATA[facebook app dashboard page]]></category>
		<category domain="yst_prominent_words" nicename="facebook-authentication"><![CDATA[facebook authentication]]></category>
		<category domain="yst_prominent_words" nicename="facebook-developer"><![CDATA[facebook developer]]></category>
		<category domain="yst_prominent_words" nicename="facebook-developer-portal"><![CDATA[facebook developer portal]]></category>
		<category domain="yst_prominent_words" nicename="id"><![CDATA[id]]></category>
		<category domain="yst_prominent_words" nicename="page"><![CDATA[page]]></category>
		<category domain="yst_prominent_words" nicename="portal"><![CDATA[portal]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Marketplace Configuration</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/marketplace-configuration/</link>
		<pubDate>Mon, 10 Aug 2015 13:43:46 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1493</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>brainCloud allows the developer to create and customize their marketplace. By defining a set of products, you can administer which products are available, for which users, and for what price. brainCloud also allows you to integrate with third-party store systems such as iTunes, Google Play, Facebook, Steam, Microsoft Store (Phone and Desktop/Tablet).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Below is a quick guide to configuring the brainCloud marketplace.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Create&nbsp;a Virtual Currency</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In order to create a product in the marketplace, you need to have a virtual currency to award the player. Let's start by creating a virtual currency.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Navigate to the "Marketplace | Virtual Currencies" page in the design tab of the brainCloud portal<br><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_marketTab.jpg" target="_blank" rel="noreferrer noopener"></a></li><li>Click the + icon in the top right corner<br><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_addVC.jpg" target="_blank" rel="noreferrer noopener"></a></li><li>Enter a name for your virtual currency (it can be anything you want) and click Save<br><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_addVC2.jpg" target="_blank" rel="noreferrer noopener"></a></li><li>You should now see your virtual currency listed in the table<br><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_addVC3.jpg" target="_blank" rel="noreferrer noopener"></a></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Create a Product</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Now that you have a virtual currency defined, it's time to create a product so that users can purchase that virtual currency! To create a marketplace product do the following:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Navigate to the "Marketplace | Products" page in the design tab of the brainCloud portal<br><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_productsTab.jpg" target="_blank" rel="noreferrer noopener"></a></li><li>Click the "Add Product" button in the top right<br><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_addProduct1.jpg" target="_blank" rel="noreferrer noopener"></a></li><li>In the Create Product dialog enter the following information:
<ul><li><strong>Item Id</strong> -&nbsp;This is a unique id&nbsp;for your product. You will use this id within the brainCloud APIs to identify your product.</li><li>&nbsp;<strong>Title</strong> - The title of your product</li><li><strong>Category</strong> - An optional field that allows you to categorize your products. When communicating with brainCloud you can ask for only a certain category of product (for cases where you have many products defined)</li><li><strong>Description&nbsp;</strong>- Description of your product</li><li><strong>Product Type</strong>&nbsp;- Configures what type of product you are defining. This is mostly related to the third party store that you are linking to the product.
<ul><li><strong>Consumable</strong> - A one-time consumable product. Once purchased, this product will be consumed once and only once. Most products fall into this product type</li><li><strong>Non-consumable</strong> - A product which can never be consumed. Buying an item in your game&nbsp;that can never be used up (say a special sword) might be an example of a non-consumable.</li><li><strong>Subscription</strong> - A subscription to something in your app. Again this is mostly determined by the third party store item configuration as subscriptions generally incur some sort of regular charge to the end user.</li></ul>
</li><li><strong>Currency Type</strong> - The type of virtual currency to award</li><li><strong>Currency Value</strong> - The amount of virtual currency to award</li><li><strong>Prices</strong> - A list of prices for the item. We will configure this in the next section so you can leave it blank for now.</li><li><strong>Extra Data</strong> - Any custom key/value data pairs you'd like to attach to the product.</li></ul>
</li><li>Click Save</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Add Prices to Your Product</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>After having&nbsp;created a product, you'll want to attach some prices to it so that users can see and purchase it. Products by default are created with a "Not for sale" price which means they won't show up in any of the brainCloud API requests for products. Let's add a price so we can see our product.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Add a default&nbsp;price</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>If you just created the product, you should already see the "Add Price" button for your product. If not, select a product in the marketplace product table and make sure the product is in "Edit" mode.<br><a rel="noreferrer noopener" href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_addProduct2.jpg" target="_blank"></a></li><li>Click the Add Price button<br><a rel="noreferrer noopener" href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_addProduct3.jpg" target="_blank"></a></li><li>Enter a default price which will be used to calculate internal brainCloud analytics such as daily/total revenue. Note this is NOT the actual price charged to the user. That information is defined elsewhere depending on the third party store being integrated. At this time you can also enter your third-party store information. If you're unsure of what to enter here please refer to the "Third Party Store Integration" tutorials in the portal section for your appropriate third-party store.<br><a rel="noreferrer noopener" href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_addProduct4.jpg" target="_blank"></a></li><li>Click Save.</li><li>Next, we can select our newly created price as the default. Note you may have to hit the "Edit" button at the top of the product dialog.<br><a rel="noreferrer noopener" href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_addProduct5.jpg" target="_blank"></a></li><li>Click Save and that's it!</li><li>For the more curious amongst you, you can also verify that your product is coming back in the Product "GetInventory" API call using the Cloud Code API Explorer<br><a rel="noreferrer noopener" href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_addProduct6.jpg" target="_blank"></a></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4>Add an "on sale"&nbsp;price</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The marketplace allows for multiple prices to be attached to a product. This allows you to put certain items on sale - say for instance a 50% sale. In fact, because multiple prices can be entered, your product could have a 25% and 75% off sale too!</p>
<!-- /wp:paragraph -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_addProduct7.jpg" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_addProduct7.jpg" alt="brainCloud"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>In order to add another price to your product, you can basically follow the steps above and then enter a different reference price and third party store id.<br></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1493</wp:post_id>
		<wp:post_date><![CDATA[2015-08-10 09:43:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-10 13:43:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[marketplace-configuration]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>26</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="click-save"><![CDATA[click save]]></category>
		<category domain="yst_prominent_words" nicename="create-a-product"><![CDATA[create a product]]></category>
		<category domain="yst_prominent_words" nicename="currency"><![CDATA[currency]]></category>
		<category domain="yst_prominent_words" nicename="currency-to-award"><![CDATA[currency to award]]></category>
		<category domain="yst_prominent_words" nicename="design-tab-of-the-braincloud"><![CDATA[design tab of the braincloud]]></category>
		<category domain="yst_prominent_words" nicename="navigate-to-the-marketplace"><![CDATA[navigate to the marketplace]]></category>
		<category domain="yst_prominent_words" nicename="page-in-the-design"><![CDATA[page in the design]]></category>
		<category domain="yst_prominent_words" nicename="page-in-the-design-tab"><![CDATA[page in the design tab]]></category>
		<category domain="yst_prominent_words" nicename="party-store"><![CDATA[party store]]></category>
		<category domain="yst_prominent_words" nicename="price"><![CDATA[price]]></category>
		<category domain="yst_prominent_words" nicename="product-in-the-marketplace"><![CDATA[product in the marketplace]]></category>
		<category domain="yst_prominent_words" nicename="tab-of-the-braincloud"><![CDATA[tab of the braincloud]]></category>
		<category domain="yst_prominent_words" nicename="tab-of-the-braincloud-portal"><![CDATA[tab of the braincloud portal]]></category>
		<category domain="yst_prominent_words" nicename="third-party"><![CDATA[third party]]></category>
		<category domain="yst_prominent_words" nicename="third-party-store"><![CDATA[third party store]]></category>
		<category domain="yst_prominent_words" nicename="third-party-store-2"><![CDATA[third-party store]]></category>
		<category domain="yst_prominent_words" nicename="virtual"><![CDATA[virtual]]></category>
		<category domain="yst_prominent_words" nicename="virtual-currency"><![CDATA[virtual currency]]></category>
		<category domain="yst_prominent_words" nicename="virtual-currency-to-award"><![CDATA[virtual currency to award]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Objective-C Tutorials</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/objective-c-tutorials/</link>
		<pubDate>Mon, 10 Aug 2015 17:48:35 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1516</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Here is the place that you'll find tutorials related to iOS Objective-C development.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="/apidocs/tutorials/objective-c-tutorials/xcode-objcswift-cocoapods-project-setup/">Cocoapods Project Setup</a> - if you're using cocoapods, this is how to set up your Podfile</li><li><a href="/apidocs/tutorials/objective-c-tutorials/getting-started-with-objective-c/">Getting Started With Objective-C</a>&nbsp;- describes the basics of getting a non-cocoapods&nbsp;Xcode project configured</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1516</wp:post_id>
		<wp:post_date><![CDATA[2015-08-10 13:48:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-10 17:48:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[objective-c-tutorials]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>63</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="cocoapods"><![CDATA[cocoapods]]></category>
		<category domain="yst_prominent_words" nicename="objective-c"><![CDATA[objective-c]]></category>
		<category domain="yst_prominent_words" nicename="project"><![CDATA[project]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Getting Started With Objective-C</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/objective-c-tutorials/getting-started-with-objective-c/</link>
		<pubDate>Mon, 10 Aug 2015 19:16:02 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1518</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This tutorial will walk you through the basic steps of getting your Objective-C project running with brainCloud.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Assumptions</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>You've created a basic Objective-C project</li><li>You've downloaded the brainCloud Objective-C library</li><li>You have a brainCloud app created with OSX/iOS platforms enabled</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Setting Up Xcode</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The first step to using the Objective-C brainCloud library is adding it to your Xcode project.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Add brainCloud Library To Project</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Unzip the brainCloud library within your Xcode project. You should end up with a similar path<br><figure><a href="/apidocs/wp-content/uploads/2015/08/2015-08-10_13-52-38.png"><img class="alignnone size-full wp-image-1519" src="/apidocs/wp-content/uploads/2015/08/2015-08-10_13-52-38.png" alt="2015-08-10_13-52-38" width="424" height="212"></a></figure></li><li>Right click on your project in Xcode<br><figure><a href="/apidocs/wp-content/uploads/2015/08/2015-08-10_13-55-05.png"><img class="alignnone size-full wp-image-1520" src="/apidocs/wp-content/uploads/2015/08/2015-08-10_13-55-05.png" alt="2015-08-10_13-55-05" width="268" height="241"></a></figure></li><li>Select "Add Files To Project..."<br><figure><a href="/apidocs/wp-content/uploads/2015/08/2015-08-10_13-55-59.png"><img class="alignnone size-full wp-image-1521" src="/apidocs/wp-content/uploads/2015/08/2015-08-10_13-55-59.png" alt="2015-08-10_13-55-59" width="316" height="276"></a></figure></li><li>Select the unzipped brainCloudClientObjc folder<figure><a href="/apidocs/wp-content/uploads/2015/08/2015-08-10_13-57-55.png"><img class="alignnone size-full wp-image-1522" src="/apidocs/wp-content/uploads/2015/08/2015-08-10_13-57-55.png" alt="2015-08-10_13-57-55" width="714" height="733"></a></figure></li><li>Ensure that CreateGroups is selected and your project in the "Add to targets" section is selected</li><li>Click Add</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Add include paths to project</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Select your project in Xcode and select "Build Settings"<br><figure><a href="/apidocs/wp-content/uploads/2015/08/2015-08-10_14-03-22.png"><img class="alignnone size-full wp-image-1523" src="/apidocs/wp-content/uploads/2015/08/2015-08-10_14-03-22.png" alt="2015-08-10_14-03-22" width="840" height="187"></a></figure></li><li>Look for the "header search paths" parameter</li><li>Double click on the value of the "header search paths" parameter<br><figure><a href="/apidocs/wp-content/uploads/2015/08/2015-08-10_14-14-17.png"><img class="alignnone size-full wp-image-1524" src="/apidocs/wp-content/uploads/2015/08/2015-08-10_14-14-17.png" alt="2015-08-10_14-14-17" width="504" height="137"></a></figure></li><li>Add the following lines being careful to replace "BCTest" with the folder name of your project.
<ul>
<li>"$(SRCROOT)/BCTest/brainCloudClientObjc"</li>
<li>"$(SRCROOT)/BCTest/brainCloudClientObjc/brainCloudClient/include"</li>
<li>"$(SRCROOT)/BCTest/brainCloudClientObjc/brainCloudClient/thirdparty/iOScURL-7.39.0"</li>
<li>"$(SRCROOT)/BCTest/brainCloudClientObjc/brainCloudClient/thirdparty/jsoncpp-1.0.0"</li>
</ul>
</li><li>You should now have Header Search Paths that look similar to this:<br><figure><a href="/apidocs/wp-content/uploads/2015/08/2015-08-10_14-15-29.png"><img class="alignnone size-full wp-image-1525" src="/apidocs/wp-content/uploads/2015/08/2015-08-10_14-15-29.png" alt="2015-08-10_14-15-29" width="512" height="111"></a></figure></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Add link libraries to project</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Select your project in Xcode and select "Build Phases"<br><figure><a href="/apidocs/wp-content/uploads/2015/08/2015-08-10_14-21-471.png"><img class="alignnone size-full wp-image-1527" src="/apidocs/wp-content/uploads/2015/08/2015-08-10_14-21-471.png" alt="2015-08-10_14-21-47" width="867" height="138"></a></figure></li><li>Under "Link Binary With Libraries", click the + icon<br><figure><a href="/apidocs/wp-content/uploads/2015/08/2015-08-10_14-25-41.png"><img class="alignnone size-full wp-image-1529" src="/apidocs/wp-content/uploads/2015/08/2015-08-10_14-25-41.png" alt="2015-08-10_14-25-41" width="559" height="169"></a></figure></li><li>Add the following libraries:
<ul>
<li>GameKit.framework</li>
<li>libz.dylib</li>
</ul>
</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>You should now be able to build your project.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Integrating brainCloud</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Now that you have the brainCloud client library setup, it's time to start integrating! The first step you need to do is initialize the library itself.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Initializing brainCloud</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Before you make any API calls to brainCloud you need to initialize the library. The best place to put this code is right before you go to Authenticate your user.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">BrainCloudClient * client = [BrainCloudClient defaultClient];

[client
	initialize:@"https://sharedprod.braincloudservers.com/dispatcherv2"
	secretKey:@"your_secret" // replace me!
	gameId:@"your_gameid" // replace me!
	gameVersion:@"1.0"
	appId:@""
	region:@""];
</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>You will need to replace the secretKey and gameId with the information appropriate for your game. You can find this information in the brainCloud portal "Core App Info | Application IDs" section.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Authentication</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Here is an example of authenticating a user with brainCloud:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"cpp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="cpp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">BrainCloudAuthentication * auth = [client authenticationService];

[auth authenticateUniversal:user 
	password:pwd 
	forceCreate:true
	completionBlock:^(NSString *serviceName, NSString *serviceOperation, NSString *jsonData, BCCallbackObject cbObject)
	{
		// do something on success
	}
	errorCompletionBlock:^(NSString *serviceName, NSString *serviceOperation, NSInteger statusCode, NSInteger returnCode, NSString *statusMessage, BCCallbackObject cbObject)
	{
		// do something on failure
	}
	cbObject:nil]
</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Note that you will want to fill out the "completionBlock" and "errorCompletionBlock" blocks of code with something more appropriate.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1518</wp:post_id>
		<wp:post_date><![CDATA[2015-08-10 15:16:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-10 19:16:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[getting-started-with-objective-c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>1516</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="braincloud-library"><![CDATA[braincloud library]]></category>
		<category domain="yst_prominent_words" nicename="header-search"><![CDATA[header search]]></category>
		<category domain="yst_prominent_words" nicename="header-search-paths"><![CDATA[header search paths]]></category>
		<category domain="yst_prominent_words" nicename="header-search-paths-parameter"><![CDATA[header search paths parameter]]></category>
		<category domain="yst_prominent_words" nicename="initialize-the-library"><![CDATA[initialize the library]]></category>
		<category domain="yst_prominent_words" nicename="library"><![CDATA[library]]></category>
		<category domain="yst_prominent_words" nicename="objective-c-project"><![CDATA[objective-c project]]></category>
		<category domain="yst_prominent_words" nicename="paths-parameter"><![CDATA[paths parameter]]></category>
		<category domain="yst_prominent_words" nicename="project-in-xcode"><![CDATA[project in xcode]]></category>
		<category domain="yst_prominent_words" nicename="project-in-xcode-and-select"><![CDATA[project in xcode and select]]></category>
		<category domain="yst_prominent_words" nicename="search-paths"><![CDATA[search paths]]></category>
		<category domain="yst_prominent_words" nicename="search-paths-parameter"><![CDATA[search paths parameter]]></category>
		<category domain="yst_prominent_words" nicename="select"><![CDATA[select]]></category>
		<category domain="yst_prominent_words" nicename="select-build"><![CDATA[select build]]></category>
		<category domain="yst_prominent_words" nicename="select-your-project"><![CDATA[select your project]]></category>
		<category domain="yst_prominent_words" nicename="select-your-project-in-xcode"><![CDATA[select your project in xcode]]></category>
		<category domain="yst_prominent_words" nicename="xcode"><![CDATA[xcode]]></category>
		<category domain="yst_prominent_words" nicename="xcode-and-select"><![CDATA[xcode and select]]></category>
		<category domain="yst_prominent_words" nicename="xcode-and-select-build"><![CDATA[xcode and select build]]></category>
		<category domain="yst_prominent_words" nicename="xcode-project"><![CDATA[xcode project]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Store Integration - iOS</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/store-integration-ios/</link>
		<pubDate>Tue, 11 Aug 2015 17:08:12 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1544</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>In this tutorial, we'll look at integrating the iTunes iOS store with the brainCloud marketplace. By doing this, iOS users will have the ability to purchase iTunes iOS items. The brainCloud backend will verify the purchase directly with iTunes, making this a secure transaction for your app.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that apps still have to make the purchase directly with iTunes. For more information on this process refer to the Apple developer <a href="https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/StoreKitGuide/Introduction.html" target="_blank" rel="noopener noreferrer">In-App Purchase Programming Guide</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Purchase Flow</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In general terms, the&nbsp;transaction flow of a purchase is as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1547,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/08/iTunes-Purchase-Sequence-Diagram1.jpg"><img src="/apidocs/wp-content/uploads/2015/08/iTunes-Purchase-Sequence-Diagram1.jpg" alt="iTunes Purchase Sequence Diagram" class="wp-image-1547"/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>The App requests the "itunes" product inventory from brainCloud which returns a list of products, their reference prices (as configured in the brainCloud portal) and their iTunes ids.</li><li>For the iTunes products returned from brainCloud, the App requests their real prices (in the user's currency) from iTunes.</li><li>The user selects an item to purchase</li><li>The App sends a request to iTunes to addPayment which brings up the iTunes purchase dialogs in your app. Eventually, a receipt is returned from iTunes assuming the user goes through with the purchase.</li><li>The App asks brainCloud to verify the iTunes receipt that was received from the iTunes store. Assuming this is a valid receipt, brainCloud will award any virtual currencies attached to this product.</li><li>The App finishes the transaction with iTunes to signify that the product has been awarded.</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Portal Setup</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Here are the steps to configure brainCloud for iTunes purchases.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Prerequisites</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>You should have set up your products in the brainCloud marketplace. Please refer to the <a href="/apidocs/portal-usage/marketplace-configuration/">Marketplace Configuration</a> guide.</li><li>You should have created the iTunes In-App products per the Apple Developer documentation</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Associate iTunes Products with brainCloud Products</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>After setting up your products in the brainCloud marketplace, you'll want to associate the iTunes product ids. In particular, we will be grabbing the product ids from iTunes and entering them into the appropriate brainCloud products.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Log into <a href="https://itunesconnect.apple.com/" target="_blank" rel="noopener noreferrer">iTunes Connect</a></li><li>Select your App from the list and go to the "In-App Purchases" tab</li><li>Select your IAP and grab the Apple Product ID<br><figure><a href="/apidocs/wp-content/uploads/2015/08/2015-11-10_12-02-52.png"><img class="alignnone size-full wp-image-2232" src="/apidocs/wp-content/uploads/2015/08/2015-11-10_12-02-52.png" alt="2015-11-10_12-02-52" width="976" height="150"></a></figure></li><li>Log into the <a href="https://portal.braincloudservers.com/" target="_blank" rel="noopener noreferrer">brainCloud Portal</a></li><li>Go to the "Marketplace | Products" page in the Design tab<br><figure><a href="/apidocs/wp-content/uploads/2015/08/2015-08-10_08-36-53.png"><img class="alignnone size-full wp-image-1494" src="/apidocs/wp-content/uploads/2015/08/2015-08-10_08-36-53.png" alt="2015-08-10_08-36-53" width="231" height="153"></a></figure></li><li>Select the product you would like to associate.<br><figure><a href="/apidocs/wp-content/uploads/2015/08/2015-08-11_12-32-21.png"><img class="alignnone size-full wp-image-1559" src="/apidocs/wp-content/uploads/2015/08/2015-08-11_12-32-21.png" alt="2015-08-11_12-32-21" width="465" height="242"></a></figure></li><li>Click the "+ Edit Product" button<br><figure><a href="/apidocs/wp-content/uploads/2015/08/2015-08-11_12-33-07.png"><img class="alignnone size-full wp-image-1560" src="/apidocs/wp-content/uploads/2015/08/2015-08-11_12-33-07.png" alt="2015-08-11_12-33-07" width="505" height="287"></a></figure></li><li>Find your Price (or create one) and click the edit icon<br><figure><a href="/apidocs/wp-content/uploads/2015/08/2015-08-11_12-48-07.png"><img class="alignnone size-full wp-image-1561" src="/apidocs/wp-content/uploads/2015/08/2015-08-11_12-48-07.png" alt="2015-08-11_12-48-07" width="571" height="146"></a></figure></li><li>In the Edit Price dialog, click the + icon to add an entry for&nbsp;Apple<br><figure><a href="/apidocs/wp-content/uploads/2015/08/2015-08-11_12-49-42.png"><img class="alignnone size-full wp-image-1563" src="/apidocs/wp-content/uploads/2015/08/2015-08-11_12-49-42.png" alt="2015-08-11_12-49-42" width="610" height="327"></a></figure></li><li>Enter your iTunes product id for this price - in our case "com.braincloud.mygame.goldsack1". Note that you can enter separate iPhone/iPad ids if your app is *not* a universal binary (or for some other reason uses two different product ids)<br><figure><a href="/apidocs/wp-content/uploads/2015/08/2015-08-11_12-51-33.png"><img class="alignnone size-full wp-image-1564" src="/apidocs/wp-content/uploads/2015/08/2015-08-11_12-51-33.png" alt="2015-08-11_12-51-33" width="584" height="239"></a></figure></li><li>At this point you may want to select your price to be the default if it isn't already selected. You can do this back in the Edit Product page.<br><figure><a href="/apidocs/wp-content/uploads/2015/08/2015-08-11_12-56-25.png"><img class="alignnone size-full wp-image-1565" src="/apidocs/wp-content/uploads/2015/08/2015-08-11_12-56-25.png" alt="2015-08-11_12-56-25" width="569" height="141"></a></figure></li><li>You can now verify that your Product is coming back with the correct iTunes id. Here is the output from the API Explorer "Product.GetInventory" call<br><figure><a href="/apidocs/wp-content/uploads/2015/08/2015-11-10_12-06-45.png"><img class="alignnone size-full wp-image-2233" src="/apidocs/wp-content/uploads/2015/08/2015-11-10_12-06-45.png" alt="2015-11-10_12-06-45" width="473" height="628"></a></figure></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Auto-Renewable Subscriptions</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you are using auto-renewable subscriptions, you will need to add your iTunes IAP shared secret to brainCloud.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Log into <a href="https://itunesconnect.apple.com/" target="_blank" rel="noopener noreferrer">iTunes Connect</a></li><li>Select your App from the list and go to the "In-App Purchases" tab</li><li>Click the "View or generate a shared secret" link at the bottom of the IAP list<br><figure><a href="/apidocs/wp-content/uploads/2015/08/2015-08-11_10-27-14.png"><img class="alignnone size-full wp-image-1551" src="/apidocs/wp-content/uploads/2015/08/2015-08-11_10-27-14.png" alt="2015-08-11_10-27-14" width="230" height="55"></a></figure></li><li>Grab the shared secret from the page (or generate a new one if none exists)<br><figure><a href="/apidocs/wp-content/uploads/2015/08/2015-08-11_10-28-151.png"><img class="alignnone size-full wp-image-1553" src="/apidocs/wp-content/uploads/2015/08/2015-08-11_10-28-151.png" alt="2015-08-11_10-28-15" width="410" height="255"></a></figure></li><li>Log into the <a href="https://portal.braincloudservers.com/" target="_blank" rel="noopener noreferrer">brainCloud Portal</a></li><li>Go to the "Core App Info | Application IDs" page in the Design tab&nbsp;for your app<br><figure><a href="/apidocs/wp-content/uploads/2015/08/2015-08-07_14-05-15.png"><img class="alignnone size-full wp-image-1474" src="/apidocs/wp-content/uploads/2015/08/2015-08-07_14-05-15.png" alt="2015-08-07_14-05-15" width="231" height="387"></a></figure></li><li>Click the Apple button<br><figure><a href="/apidocs/wp-content/uploads/2015/08/2015-08-11_12-15-061.png"><img class="alignnone size-full wp-image-1556" src="/apidocs/wp-content/uploads/2015/08/2015-08-11_12-15-061.png" alt="2015-08-11_12-15-06" width="317" height="79"></a></figure></li><li>Enter the iTunes Shared Secret<br><figure><a href="/apidocs/wp-content/uploads/2015/08/2015-08-11_12-16-45.png"><img class="alignnone size-full wp-image-1557" src="/apidocs/wp-content/uploads/2015/08/2015-08-11_12-16-45.png" alt="2015-08-11_12-16-45" width="477" height="116"></a></figure></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1544</wp:post_id>
		<wp:post_date><![CDATA[2015-08-11 13:08:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-11 17:08:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[store-integration-ios]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>65</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="app"><![CDATA[app]]></category>
		<category domain="yst_prominent_words" nicename="app-from-the-list"><![CDATA[app from the list]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-marketplace"><![CDATA[braincloud marketplace]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-portal"><![CDATA[braincloud portal]]></category>
		<category domain="yst_prominent_words" nicename="in-app-purchases-tab"><![CDATA[in-app purchases tab]]></category>
		<category domain="yst_prominent_words" nicename="itunes-product"><![CDATA[itunes product]]></category>
		<category domain="yst_prominent_words" nicename="log-into-itunes"><![CDATA[log into itunes]]></category>
		<category domain="yst_prominent_words" nicename="log-into-itunes-connect"><![CDATA[log into itunes connect]]></category>
		<category domain="yst_prominent_words" nicename="log-into-the-braincloud"><![CDATA[log into the braincloud]]></category>
		<category domain="yst_prominent_words" nicename="log-into-the-braincloud-portal"><![CDATA[log into the braincloud portal]]></category>
		<category domain="yst_prominent_words" nicename="page-in-the-design"><![CDATA[page in the design]]></category>
		<category domain="yst_prominent_words" nicename="page-in-the-design-tab"><![CDATA[page in the design tab]]></category>
		<category domain="yst_prominent_words" nicename="product"><![CDATA[product]]></category>
		<category domain="yst_prominent_words" nicename="product-ids"><![CDATA[product ids]]></category>
		<category domain="yst_prominent_words" nicename="products-in-the-braincloud"><![CDATA[products in the braincloud]]></category>
		<category domain="yst_prominent_words" nicename="products-in-the-braincloud-marketplace"><![CDATA[products in the braincloud marketplace]]></category>
		<category domain="yst_prominent_words" nicename="purchase-directly-with-itunes"><![CDATA[purchase directly with itunes]]></category>
		<category domain="yst_prominent_words" nicename="select-your-app"><![CDATA[select your app]]></category>
		<category domain="yst_prominent_words" nicename="shared-secret"><![CDATA[shared secret]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>User Monitoring</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/user-monitoring/</link>
		<pubDate>Thu, 20 Aug 2015 14:49:49 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1597</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>The User Monitoring section of the Monitoring tab is great for finding information on individual users and debugging issues with them. &nbsp;The sections below will give you a brief overview of some of the functionality and usage of the User Monitoring section.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Quick Jump</strong></p>
<!-- /wp:paragraph -->

<!-- wp:shortcode -->
[su_subpages depth="1" p="" class=""]
<!-- /wp:shortcode -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1597</wp:post_id>
		<wp:post_date><![CDATA[2015-08-20 10:49:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-20 14:49:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[user-monitoring]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>81</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Store Integration - Facebook</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/store-integration-facebook/</link>
		<pubDate>Tue, 18 Aug 2015 16:00:15 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1615</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>In this tutorial, we will look at setting up store integration between Facebook and your brainCloud app.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Purchase Flow</h2>
<!-- /wp:heading -->

<!-- wp:image {"id":1648,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/08/Facebook-Purchase-Sequence-Diagram.jpg"><img src="/apidocs/wp-content/uploads/2015/08/Facebook-Purchase-Sequence-Diagram.jpg" alt="Facebook Purchase Sequence Diagram" class="wp-image-1648"/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>The App requests the “facebook” product inventory from brainCloud, optionally passing in the user's currency. This returns a list of products, their reference prices (as configured in the brainCloud portal) and their configured Facebook currency/price pairs.</li><li>The App presents a list of products with the most appropriate price/currency.</li><li>The user selects an item to purchase</li><li>The App sends a request to Facebook to purchase an item.</li><li>Facebook communicates with brainCloud to determine the catalog of products and their prices.</li><li>Facebook presents a purchase confirmation dialog to the user.</li><li>A&nbsp;receipt is returned from Facebook&nbsp;assuming the user goes through with the purchase.</li><li>The App asks brainCloud to verify the Facebook&nbsp;receipt. Assuming this is a valid receipt, brainCloud will award any virtual currencies attached to this product.</li><li>Note that Facebook will send an asynchronous real-time update event to brainCloud when a product is purchased. This is a failsafe mechanism to ensure that the appropriate item is awarded to the user (regardless of whether the app sent the receipt to the server). BrainCloud will only award currency once regardless of which notification is received first (the receipt from the app or the real-time update payment notification from Facebook). The behavior and return JSON of the API call to confirm a receipt is identical regardless of the order in which these two events occur.</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Portal Setup</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>Prerequisites</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>You have a Facebook game created in the <a rel="noreferrer noopener" href="https://developers.facebook.com" target="_blank">Facebook developer portal</a></li><li>You have configured brainCloud with the Facebook app id and secret</li><li>You have configured a <a href="https://staging.getbraincloud.com/apidocs/portal-usage/marketplace-configuration/">Marketplace in brainCloud</a></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Configure Facebook Price Data</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Once your products have been configured in the brainCloud marketplace, you will need to populate a list of currencies and prices for each product.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Log into the <a rel="noreferrer noopener" href="https://portal.braincloudservers.com/" target="_blank">brainCloud Portal</a></li><li>Go to the “Marketplace | Products” page in the Design tab<br><a rel="noreferrer noopener" href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_productsTab.jpg" target="_blank"></a></li><li>Select the product you would like to configure<br><a rel="noreferrer noopener" href="/apidocs/wp-content/uploads/2016/09/brainCloud_dashboard_addFbProduct1.jpg" target="_blank"></a></li><li>Click the “+ Edit Product” button<br><a rel="noreferrer noopener" href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_addProduct2.jpg" target="_blank"></a></li><li>Find your Price (or create one) and click the edit icon<br><a rel="noreferrer noopener" href="/apidocs/wp-content/uploads/2016/09/brainCloud_dashboard_addFbProduct2.jpg" target="_blank"></a></li><li>In the Edit Price dialog, click the + icon to add an entry for Facebook<br><a rel="noreferrer noopener" href="/apidocs/wp-content/uploads/2016/09/brainCloud_dashboard_addFbProduct3.jpg" target="_blank"></a></li><li>Click the "+ Add" button and configure the price/currency information. You can enter separate prices for multiple currencies if you'd like to maintain the price of the product for that currency. Note that Facebook will automatically convert prices to the user's currency&nbsp;if necessary.<br><a rel="noreferrer noopener" href="/apidocs/wp-content/uploads/2016/09/brainCloud_dashboard_addFbProduct4.jpg" target="_blank"></a></li><li>At this point, you may want to select your price to be the default if it isn’t already selected. You can do this back in the Edit Product page.<br><a rel="noreferrer noopener" href="/apidocs/wp-content/uploads/2016/09/brainCloud_dashboard_addFbProduct5.jpg" target="_blank"></a></li><li>You can now verify that your Product is coming back with the correct Facebook price information. Here is the output from the API Explorer “Product.GetInventory” call for "Facebook"<br><a rel="noreferrer noopener" href="/apidocs/wp-content/uploads/2016/09/brainCloud_dashboard_addFbProduct6.jpg" target="_blank"></a></li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Facebook Developer Portal</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In order to process real-time payment updates, you will need to do the following configuration steps in the Facebook Developer portal.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Log into the <a rel="noreferrer noopener" href="https://developers.facebook.com/apps" target="_blank">Facebook developer portal</a></li><li>Select your app and go to the "Canvas Payments" section</li><li>Enter your dynamic URL (and any Facebook testers you'd like to test purchases with). Note the format of the Dynamic Pricing Callback URL must be: "https://sharedprod.braincloudservers.com/fbcreditservice?app_id=YOUR_FB_APP_ID" where "YOUR_FB_APP_ID" should be replaced with a number such as 1234567890.<br><a href="/apidocs/wp-content/uploads/2015/08/2015-08-18_11-50-11.png"></a></li><li>Enter the callback URLs for Realtime subscriptions. Note both URLs should have this format: "https://sharedprod.braincloudservers.com/fbupdateservice?gameId=YOUR_BRAINCLOUD_GAME_ID" where "YOUR_BRAINCLOUD_GAME_ID" should be replaced with the brainCloud game/app id found in the "Core App Info | Application IDs" section of the brainCloud portal.<a href="/apidocs/wp-content/uploads/2015/08/2015-08-18_11-52-39.png"></a></li><li>If you'd like to test the callback URL, configure a verification token on both the Facebook developer portal as well as the brainCloud "Core App Info | Application IDs" Facebook section. You can use any string you'd like as long as they're the same. Once configured, the "Test Callback URL" button should show a success dialog similar to this one<br><a href="/apidocs/wp-content/uploads/2015/08/2015-08-18_11-57-57.png"></a></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>You should now be configured to make Facebook purchases. Next steps that you will need to complete are to implement the API calls to Facebook + brainCloud. For further information in regard to implementing Facebook IAP integration, refer to <a href="http://help.getbraincloud.com/en/articles/4676736-facebook-iap-integration">this linked article</a> in our knowledge base help center.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1615</wp:post_id>
		<wp:post_date><![CDATA[2015-08-18 12:00:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-18 16:00:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[store-integration-facebook]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>61</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="app"><![CDATA[app]]></category>
		<category domain="yst_prominent_words" nicename="app-info"><![CDATA[app info]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-portal"><![CDATA[braincloud portal]]></category>
		<category domain="yst_prominent_words" nicename="callback-url"><![CDATA[callback url]]></category>
		<category domain="yst_prominent_words" nicename="click-the-edit"><![CDATA[click the edit]]></category>
		<category domain="yst_prominent_words" nicename="configured-in-the-braincloud"><![CDATA[configured in the braincloud]]></category>
		<category domain="yst_prominent_words" nicename="core-app"><![CDATA[core app]]></category>
		<category domain="yst_prominent_words" nicename="core-app-info"><![CDATA[core app info]]></category>
		<category domain="yst_prominent_words" nicename="developer-portal"><![CDATA[developer portal]]></category>
		<category domain="yst_prominent_words" nicename="edit-product"><![CDATA[edit product]]></category>
		<category domain="yst_prominent_words" nicename="facebook-developer"><![CDATA[facebook developer]]></category>
		<category domain="yst_prominent_words" nicename="facebook-developer-portal"><![CDATA[facebook developer portal]]></category>
		<category domain="yst_prominent_words" nicename="facebook-price"><![CDATA[facebook price]]></category>
		<category domain="yst_prominent_words" nicename="list-of-products"><![CDATA[list of products]]></category>
		<category domain="yst_prominent_words" nicename="note-that-facebook"><![CDATA[note that facebook]]></category>
		<category domain="yst_prominent_words" nicename="portal"><![CDATA[portal]]></category>
		<category domain="yst_prominent_words" nicename="product"><![CDATA[product]]></category>
		<category domain="yst_prominent_words" nicename="real-time-update-2"><![CDATA[real-time update]]></category>
		<category domain="yst_prominent_words" nicename="users-currency"><![CDATA[user's currency]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_0bef1c051d97e4ff903326f7a56aa952]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_b2082bc69f2a79f4eac56d52bceed2ee]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Finding a User</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/user-monitoring/finding-a-user/</link>
		<pubDate>Thu, 20 Aug 2015 14:54:05 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1706</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>The first step is to get to the User Monitoring section. From the side navigation bar click on the Monitoring tab at the top, followed by the User Monitoring tab below.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":4329,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/06/2.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/06/2.png" alt="" class="wp-image-4329"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>From here you will be in the User Summary tab of the User Monitoring section. &nbsp;If you haven't previously selected a user you will see the New Users page. &nbsp;You can now click the Select User button to open the Select User popup, or select a user from the list of New Users below.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":4326,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/06/2018-06-20_20-03-13.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/06/2018-06-20_20-03-13.png" alt="" class="wp-image-4326"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Once the Select User popup is open you have a variety of options available to find the users you're looking for. &nbsp;From the search tab you can perform a number of search types from the drop down to the left of the search bar (default is Name).</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Name</strong> - This is the name that is set by calling the <a href="/apidocs/apiref/#capi-playerstate-updateplayername" target="_blank" rel="noreferrer noopener" aria-label=" (opens in a new tab)">UpdatePlayerName</a> function of the PlayerState service.  Sometimes referred to as Profile Name.</li><li><strong>Anonymous</strong> - The anonymous ID of the player created when the player was authenticated using <a rel="noreferrer noopener" aria-label=" (opens in a new tab)" href="/apidocs/apiref/#capi-auth-authenticateanonymous" target="_blank">AuthenticateAnonymous</a>.</li><li><b>Facebook ID</b> - The Facebook ID associated with a user through either <a rel="noreferrer noopener" aria-label=" (opens in a new tab)" href="/apidocs/apiref/#capi-auth-authenticatefacebook" target="_blank">AuthenticateFacebook</a> or <a rel="noreferrer noopener" aria-label=" (opens in a new tab)" href="/apidocs/apiref/#capi-identity-attachfacebookidentity" target="_blank">AttachFacebookIdentity</a>.</li><li><strong>Email </strong>- The email address associated with a user through either <a rel="noreferrer noopener" aria-label=" (opens in a new tab)" href="/apidocs/apiref/#capi-auth-authenticateemailpassword" target="_blank">AuthenticateEmailPassword</a> or <a rel="noreferrer noopener" aria-label=" (opens in a new tab)" href="/apidocs/apiref/#capi-identity-attachemailidentity" target="_blank">AttachEmailIdentity</a>.</li><li><strong>Steam </strong>- The Steam ID associated with a user through either <a rel="noreferrer noopener" aria-label=" (opens in a new tab)" href="/apidocs/apiref/#capi-auth-authenticatesteam" target="_blank">AuthenticateSteam</a> or <a rel="noreferrer noopener" aria-label=" (opens in a new tab)" href="/apidocs/apiref/#capi-identity-attachsteamidentity" target="_blank">AttachSteamIdentity</a>.</li><li><strong>Universal</strong> - The Universal ID associated with a user through either <a rel="noreferrer noopener" aria-label=" (opens in a new tab)" href="/apidocs/apiref/#capi-auth-authenticateuniversal" target="_blank">AuthenticateUniversal</a> or <a rel="noreferrer noopener" aria-label=" (opens in a new tab)" href="/apidocs/apiref/#capi-identity-attachuniversalidentity" target="_blank">AttachUniversalIdentity</a>.</li><li><strong>Profile ID</strong> - The unique ID generated for every user when they are created.  Used throughout the API to refer to individual users.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Clicking the Search button will produce a list of relevant results.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":4327,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/06/2018-06-20_20-04-50.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/06/2018-06-20_20-04-50.png" alt="" class="wp-image-4327"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>From the results you can click on any of the returned players Profile IDs to view detailed information about them. You can switch Users at any time by clicking the Change User button at the top right of the page.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":4330,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/06/1.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/06/1.png" alt="" class="wp-image-4330"/></a></figure>
<!-- /wp:image -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1706</wp:post_id>
		<wp:post_date><![CDATA[2015-08-20 10:54:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-20 14:54:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[finding-a-user]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>1597</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>User Summary</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/user-monitoring/user-summary/</link>
		<pubDate>Thu, 20 Aug 2015 14:24:40 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1708</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This tab displays a summary of key information about the selected User. You can even flag users and add notes to make them easier to look up later. We will go through all the features of this page from top to bottom.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":4332,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/06/2018-06-20_20-20-33.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/06/2018-06-20_20-20-33.png" alt="" class="wp-image-4332"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Right at the top, you can see the User's profile picture (or a placeholder if they have none), their unique Profile ID, and their Profile Name (which is editable from here). &nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Right next to this field is a checkbox marked <strong>Is Tester</strong>. This is a very useful tool for testing your App and debugging many issues. For example, it can be used in your&nbsp;app to enable/disable features specific&nbsp;for testers. The isTester&nbsp;value can be found from the&nbsp;<a href="/apidocs/apiref/#capi-playerstate-readuserstate">ReadUserState</a> API Call.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After checking the Is Tester box on the user Profile, you will notice small pencil icons appear next to many pieces of information on the page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":4339,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/06/2018-06-20_20-33-58.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/06/2018-06-20_20-33-58.png" alt="" class="wp-image-4339"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Clicking on those icons allows you to directly edit those fields. To save your changes click the green&nbsp;<strong>Save User</strong> button in the upper right of the page.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":4335,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/06/2018-06-20_20-25-07.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/06/2018-06-20_20-25-07.png" alt="" class="wp-image-4335"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Other than the <strong>Save User</strong> button (which as described above will save any edits you have made to the User) there are two other buttons at the top of the page. &nbsp;The&nbsp;<strong>Reset User&nbsp;</strong>button will delete all user data&nbsp;<strong>except&nbsp;</strong>User Currency,&nbsp;User Credentials, and&nbsp;User Transactions (i.e. Product Purchases). &nbsp;The&nbsp;<strong>Delete User</strong> button will <strong>permanently</strong> delete the User (this action cannot be undone!).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The&nbsp;<strong>Login As User&nbsp;</strong>button under the profile picture, will take you to the&nbsp;<strong>API Explorer</strong> page and automatically authenticate you as the current user. This makes debugging API calls as a specific user very easy to do.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The next section,&nbsp;<strong>Account Information</strong>, contains some key information about the User. &nbsp;If <strong>Is Tester</strong> is enabled many of these fields can be edited.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":4336,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/06/2018-06-20_20-28-29.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/06/2018-06-20_20-28-29.png" alt="" class="wp-image-4336"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Below that is the&nbsp;<strong>Account Details&nbsp;</strong>section which displays a summary of the User's currencies and stats.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":4337,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/06/2018-06-20_20-30-12.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/06/2018-06-20_20-30-12.png" alt="" class="wp-image-4337"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The&nbsp;<strong>Annotations&nbsp;</strong>section allows you to flag the user for easier locating in the future. &nbsp;You can also add notes to refer to at a later time. &nbsp;After you're done adding notes be sure to click the&nbsp;<strong>Save Notes</strong> button. &nbsp;If you want to discard your notes click the&nbsp;<strong>Delete Notes</strong> button.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":6679} -->
<figure class="wp-block-image"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/12/credentials-1024x176.jpg" alt="" class="wp-image-6679"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The next section is the<strong> Credentials</strong>. From here you can see all the User's attached Identities including the Authentication Type and the corresponding ID.  </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":6676} -->
<figure class="wp-block-image"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/12/deviceToken-1024x245.jpg" alt="" class="wp-image-6676"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The final section is&nbsp;the<strong> Device Tokens</strong> (only shows up when you registered a notification device to this user). At the bottom of this section are two more buttons. &nbsp;<strong>Send Notification&nbsp;</strong>allows you to send a custom push notification message to all the User's registered notification methods.&nbsp; <strong>Reset Device Tokens</strong> allows you to delete all the registered device tokens.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1708</wp:post_id>
		<wp:post_date><![CDATA[2015-08-20 10:24:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-20 14:24:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[user-summary]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>1597</wp:post_parent>
		<wp:menu_order>11</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="allows"><![CDATA[allows]]></category>
		<category domain="yst_prominent_words" nicename="button"><![CDATA[button]]></category>
		<category domain="yst_prominent_words" nicename="delete"><![CDATA[delete]]></category>
		<category domain="yst_prominent_words" nicename="device"><![CDATA[device]]></category>
		<category domain="yst_prominent_words" nicename="device-tokens"><![CDATA[device tokens]]></category>
		<category domain="yst_prominent_words" nicename="displays-a-summary"><![CDATA[displays a summary]]></category>
		<category domain="yst_prominent_words" nicename="information"><![CDATA[information]]></category>
		<category domain="yst_prominent_words" nicename="key-information"><![CDATA[key information]]></category>
		<category domain="yst_prominent_words" nicename="next-section"><![CDATA[next section]]></category>
		<category domain="yst_prominent_words" nicename="notes"><![CDATA[notes]]></category>
		<category domain="yst_prominent_words" nicename="notes-button"><![CDATA[notes button]]></category>
		<category domain="yst_prominent_words" nicename="notification"><![CDATA[notification]]></category>
		<category domain="yst_prominent_words" nicename="page"><![CDATA[page]]></category>
		<category domain="yst_prominent_words" nicename="profile"><![CDATA[profile]]></category>
		<category domain="yst_prominent_words" nicename="profile-picture"><![CDATA[profile picture]]></category>
		<category domain="yst_prominent_words" nicename="save"><![CDATA[save]]></category>
		<category domain="yst_prominent_words" nicename="save-user"><![CDATA[save user]]></category>
		<category domain="yst_prominent_words" nicename="save-user-button"><![CDATA[save user button]]></category>
		<category domain="yst_prominent_words" nicename="section"><![CDATA[section]]></category>
		<category domain="yst_prominent_words" nicename="user-button"><![CDATA[user button]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Statistics</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/user-monitoring/statistics/</link>
		<pubDate>Thu, 20 Aug 2015 14:26:05 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1710</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>The statistics tab allows you to view the User's custom stat (created in Statistics Rules) values and edit them.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":6487,"className":"add-border"} -->
<figure class="wp-block-image add-border"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/08/image.png" alt="" class="wp-image-6487"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Stats can be sorted by Name, Category, and Value.  Each stat can be edited by clicking the pencil icon to the right of the stat.  To see the raw JSON for all the stats listed click the <strong>{...}</strong> icon beside the total record count at the top right of the Stats section.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":6490,"align":"center","className":"add-border"} -->
<div class="wp-block-image add-border"><figure class="aligncenter"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/08/image-2.png" alt="" class="wp-image-6490"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Above the Stats section is the <strong>Filter by Category</strong>&nbsp;dropdown. &nbsp;This allows you to filter the stats displayed in the list.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1710</wp:post_id>
		<wp:post_date><![CDATA[2015-08-20 10:26:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-20 14:26:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[statistics]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>1597</wp:post_parent>
		<wp:menu_order>13</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="allows"><![CDATA[allows]]></category>
		<category domain="yst_prominent_words" nicename="category"><![CDATA[category]]></category>
		<category domain="yst_prominent_words" nicename="filter"><![CDATA[filter]]></category>
		<category domain="yst_prominent_words" nicename="icon"><![CDATA[icon]]></category>
		<category domain="yst_prominent_words" nicename="right"><![CDATA[right]]></category>
		<category domain="yst_prominent_words" nicename="section"><![CDATA[section]]></category>
		<category domain="yst_prominent_words" nicename="stat"><![CDATA[stat]]></category>
		<category domain="yst_prominent_words" nicename="statistics"><![CDATA[statistics]]></category>
		<category domain="yst_prominent_words" nicename="stats"><![CDATA[stats]]></category>
		<category domain="yst_prominent_words" nicename="stats-section"><![CDATA[stats section]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>User Entities</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/user-monitoring/user-entities/</link>
		<pubDate>Thu, 20 Aug 2015 14:26:35 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1712</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>The user entities tab allows you to view and edit all the selected User's entities.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1685,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/08/entities.png"><img src="/apidocs/wp-content/uploads/2015/08/entities.png" alt="" class="wp-image-1685"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Entities can be filtered using the&nbsp;<strong>Filter by Type</strong> drop down list. The list can&nbsp;be sorted by Entity Id, Entity Type, Version, and ACL. &nbsp;&nbsp;To see the raw JSON for all the entities&nbsp;listed click the <strong>{...}</strong> icon beside the total record count at the top right. &nbsp;Clicking the eye icon to the right of an entity listing will open the&nbsp;Entity Data popup. &nbsp;From here you can view and edit the entity's data directly.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1688,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/08/entitiesData.png"><img src="/apidocs/wp-content/uploads/2015/08/entitiesData.png" alt="entitiesData" class="wp-image-1688"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The <strong>Entity Data</strong>&nbsp;popup allows you to view and edit the entity's data. &nbsp;You can edit Entity Type, Entity Subtype, ACL, and the raw JSON data that makes up the entity.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1689,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/08/entitiesDataButtons.png"><img src="/apidocs/wp-content/uploads/2015/08/entitiesDataButtons.png" alt="entitiesDataButtons" class="wp-image-1689"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The three buttons at the bottom of the popup are fairly self explanatory. &nbsp;<strong>Cancel</strong> will close the popup without saving any changes, <strong>Delete</strong> will permanently delete the entity, and <strong>Save</strong> will save any changes made to the entity.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1712</wp:post_id>
		<wp:post_date><![CDATA[2015-08-20 10:26:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-20 14:26:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[user-entities]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>1597</wp:post_parent>
		<wp:menu_order>14</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Attributes</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/user-monitoring/attributes-2/</link>
		<pubDate>Thu, 20 Aug 2015 14:27:14 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1714</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Attributes are tags (key+value pairs) that can be assigned to a user either manually or programmatically. They are primarily (but not exclusively)  used in defining and filtering segments for Promotions.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":6492,"className":"add-border"} -->
<figure class="wp-block-image add-border"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/08/image-3.png" alt="" class="wp-image-6492"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>To add a new Attribute simply click the plus icon in the top right next to the record count. &nbsp;The keys and values of any of the attributes can be edited directly in the list. &nbsp;To delete an Attribute click the trash icon to the right of it. &nbsp;None of these actions are applied until the<strong> Save</strong> button is pressed. &nbsp;That means by pressing <strong>Cancel</strong> you can revert any changes you made from the last time you saved.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1714</wp:post_id>
		<wp:post_date><![CDATA[2015-08-20 10:27:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-20 14:27:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[attributes-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>1597</wp:post_parent>
		<wp:menu_order>15</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="attribute"><![CDATA[attribute]]></category>
		<category domain="yst_prominent_words" nicename="attributes"><![CDATA[attributes]]></category>
		<category domain="yst_prominent_words" nicename="click"><![CDATA[click]]></category>
		<category domain="yst_prominent_words" nicename="icon"><![CDATA[icon]]></category>
		<category domain="yst_prominent_words" nicename="right"><![CDATA[right]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Achievements</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/user-monitoring/achievements-2/</link>
		<pubDate>Thu, 20 Aug 2015 15:17:36 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1718</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>The Achievements tab lets you see the status of all Achievements for the selected User.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1703,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/08/achievements.png"><img src="/apidocs/wp-content/uploads/2015/08/achievements.png" alt="achievements" class="wp-image-1703"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The section is sortable by Achievement ID, Title, and Status. &nbsp;<strong>Status&nbsp;</strong>is TRUE&nbsp;if the User has earned the achievement, FALSE&nbsp;if not. &nbsp;Clicking the&nbsp;<strong>{...}&nbsp;</strong>button in the top right beside record count will display the raw JSON data for the Achievements listed on the page.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1718</wp:post_id>
		<wp:post_date><![CDATA[2015-08-20 11:17:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-20 15:17:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[achievements-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>1597</wp:post_parent>
		<wp:menu_order>17</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Virtual Currency</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/user-monitoring/virtual-currency/</link>
		<pubDate>Thu, 20 Aug 2015 15:54:07 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1720</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>The Virtual Currency tab lets you view and potentially edit the user's virtual currency balances.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1738,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/08/currencies.png"><img src="/apidocs/wp-content/uploads/2015/08/currencies.png" alt="currencies" class="wp-image-1738"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The first section of the page lists all the app's currencies and the selected User's stats related to them. &nbsp;<strong>Balance&nbsp;</strong>is the quantity of currency the User currently possesses. &nbsp;<strong>Awarded&nbsp;</strong>counts the currency gained though rewards from Milestones, Quests, Achievements, etc. &nbsp;<strong>Purchased&nbsp;</strong>indicates the total amount of currency gained through purchasing products in&nbsp;marketplace&nbsp;transactions. &nbsp;<strong>Consumed</strong> represents the total amount of currency that has been spent by the User. &nbsp;<strong>Editing currency</strong> is possible by clicking the Purchased number.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To see the raw JSON for all the currencies&nbsp;listed click the <strong>{…}</strong> icon beside the total record count at the top right.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1739,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/08/currencyTransactions.png"><img src="/apidocs/wp-content/uploads/2015/08/currencyTransactions.png" alt="currencyTransactions" class="wp-image-1739"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The Transactions section lists all the Product transactions from various marketplaces (iTunes, Facebook, etc). &nbsp;<strong>Item ID&nbsp;</strong>is the ID of the Product that was purchased. &nbsp;<strong>Type&nbsp;</strong>indicates the type of marketplace the purchase originated from. &nbsp;<strong>Timestamp&nbsp;</strong>is the time and date the transaction took place at. &nbsp;<strong>Data</strong>&nbsp;allows you to view the raw transaction data by clicking the eye icon. &nbsp;<strong>Refund&nbsp;</strong>indicates whether a transaction has been refunded to the User.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1720</wp:post_id>
		<wp:post_date><![CDATA[2015-08-20 11:54:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-20 15:54:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[virtual-currency]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>1597</wp:post_parent>
		<wp:menu_order>18</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Pricing</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/user-monitoring/pricing/</link>
		<pubDate>Thu, 20 Aug 2015 14:44:18 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1722</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>The Pricing tab&nbsp;is useful for understanding and debugging a user's view of product pricing, and how it is affected by Promotions. This tab&nbsp;shows what segments a user is currently in, what promotions currently apply to them (both scheduled and automatic), and the resulting prices of all available products.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1659,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/08/pricingButtons.png"><img src="/apidocs/wp-content/uploads/2015/08/pricingButtons.png" alt="pricingButtons" class="wp-image-1659"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>At the top of the page are 3 buttons. &nbsp;<strong>Refresh</strong> will update the information displayed on the page by re-evaluating the User's&nbsp;candidacy for both Promotions and Segments. <strong>Reset Promotions</strong> and <strong>Reset Segments</strong> will remove the User from any currently applied Segments or Promotions.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1660,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/08/pricingSegments.png"><img src="/apidocs/wp-content/uploads/2015/08/pricingSegments.png" alt="pricingSegments" class="wp-image-1660"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The first section of the page, <strong>Applied Segments</strong>,&nbsp;displays the Segments currently applied to the User. &nbsp;They can be sorted by their ID or Name.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1662,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/08/pricingPromos.png"><img src="/apidocs/wp-content/uploads/2015/08/pricingPromos.png" alt="" class="wp-image-1662"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The next section,&nbsp;<strong>Applied Promotions,</strong>&nbsp;lists the currently applied promotions. &nbsp;They can be sorted by ID, Name, and Type. &nbsp;If your promotions are based on Segments you can use these two sections to be sure a User is receiving the correct promotions.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1665,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/08/appliedPrices.png"><img src="/apidocs/wp-content/uploads/2015/08/appliedPrices.png" alt="appliedPrices" class="wp-image-1665"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The final section,&nbsp;<strong>Applied Prices</strong>, shows all the Products the User is eligible for along with their default price and current price after Promotions are applied.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1722</wp:post_id>
		<wp:post_date><![CDATA[2015-08-20 10:44:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-20 14:44:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[pricing]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>1597</wp:post_parent>
		<wp:menu_order>19</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Turn-by-Turn Multiplayer</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/user-monitoring/turn-by-turn-multiplayer/</link>
		<pubDate>Fri, 21 Aug 2015 18:58:07 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1724</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>The Turn-By-Turn Multiplayer page allows you to view the status of any turn-based matches that the selected User has participated in.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1748,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/08/turnByTurnMP.png"><img src="/apidocs/wp-content/uploads/2015/08/turnByTurnMP.png" alt="turnByTurnMP" class="wp-image-1748"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The&nbsp;<strong>Match Status&nbsp;</strong>dropdown allows you to filter the records displayed in the list.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Match ID</strong> – The unique ID generated for the match.</li><li><strong>Owner</strong> – Whether you are the owner of the match.</li><li><strong>Created</strong> – The date and time the match was created.</li><li><strong>Updated</strong> – The date and time of the last update to the match.</li><li><strong>Participants</strong> – The names of both players involved in the match. &nbsp;If a&nbsp;player has no Player Name saved this will report Unknown Name.</li><li><strong>Details</strong>– Contains all the data transferred in the match including the Match Summary, shared data, the Player IDs of the users in the match, and the raw Playback Stream events.</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1724</wp:post_id>
		<wp:post_date><![CDATA[2015-08-21 14:58:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-21 18:58:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[turn-by-turn-multiplayer]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>1597</wp:post_parent>
		<wp:menu_order>21</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>One-Way Multiplayer</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/user-monitoring/one-way-multiplayer/</link>
		<pubDate>Thu, 20 Aug 2015 16:35:48 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1726</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>The One-Way MP tab allows you to view the status of recent one-way multiplayer matches involving the selected&nbsp;User.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1744,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/08/oneWayMultiplayer.png"><img src="/apidocs/wp-content/uploads/2015/08/oneWayMultiplayer.png" alt="oneWayMultiplayer" class="wp-image-1744"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The&nbsp;<strong>Match Status&nbsp;</strong>dropdown lets you filter records by their status. &nbsp;<strong>Owner</strong> allows you to filter the results further by showing results for the player who started the match.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Match ID</strong> - The unique ID generated for the match.</li><li><strong>Owner</strong> - Whether you are the owner of the match.</li><li><strong>Created</strong> - The date and time the match was created.</li><li><strong>Updated</strong> - The date and time of the last update to the match.</li><li><strong>Participants</strong> - The names of both players involved in the match. &nbsp;If a&nbsp;player has no Player Name saved this will be blank.</li><li><strong>Details -&nbsp;</strong>Clicking on the eye icon will open a more detailed view of the match including the Player IDs of the users in the match.</li><li><strong>Stream</strong> - Contains all the data transferred in the match including the Match Summary, shared data, and the raw Playback Stream events.</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1726</wp:post_id>
		<wp:post_date><![CDATA[2015-08-20 12:35:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-20 16:35:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[one-way-multiplayer]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>1597</wp:post_parent>
		<wp:menu_order>22</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Logs</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/user-monitoring/logs/</link>
		<pubDate>Thu, 20 Aug 2015 14:45:42 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1728</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Another feature of the User Monitoring section is the ability to review the logs of an individual user. &nbsp;The logs contain&nbsp;any recent brainCloud requests and responses by the user. This is very useful for debugging during development.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After finding and selecting a User the logs can be viewed by going to the Logs tab at the bottom of the sidebar.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":4341,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/06/2018-06-20_20-39-53.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/06/2018-06-20_20-39-53.png" alt="" class="wp-image-4341"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>You can now see all the selected User's recent&nbsp;requests and responses sorted by most recent.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Date/Time&nbsp;</strong>- The time and date that the request was issued by the User.</li><li><strong>Packet ID</strong> - The packet ID increments with each request the User makes. &nbsp;By clicking the eye icon to the right of the ID you can view the raw request information that was sent to the server.</li><li><strong>Session ID</strong> - A unique ID created every time the User authenticates and persists until they re-authenticate, log out, or their session expires from inactivity.</li><li><strong>Request(service OPERATION)</strong> - The API operation contained in the call in the format (serviceName OPERATION_NAME).</li><li><strong>Response&nbsp;</strong>- The response code issued by the server. &nbsp;Anything other than 200 indicates an error was returned. &nbsp;Like with the Packet ID, clicking the eye to the right of the response will open a window containing the raw data returned in the response.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":4343,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/06/2018-06-20_20-43-44.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/06/2018-06-20_20-43-44.png" alt="" class="wp-image-4343"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Sometimes you may see multiple Requests in a single Packet. &nbsp;The client will often bundle multiple requests into one Packet when they are issued very close together. &nbsp;The result is visible in the logs as a Packet with multiple Requests. &nbsp;In this case, the Response is also bundled before it's returned to the client.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":4344,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/06/2018-06-20_20-46-51.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/06/2018-06-20_20-46-51.png" alt="" class="wp-image-4344"/></a></figure>
<!-- /wp:image -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1728</wp:post_id>
		<wp:post_date><![CDATA[2015-08-20 10:45:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-20 14:45:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[logs]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>1597</wp:post_parent>
		<wp:menu_order>25</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Shared Accounts</title>
		<link>https://staging.getbraincloud.com/apidocs/api-modules/authentication/shared-accounts/</link>
		<pubDate>Fri, 18 Sep 2015 14:57:02 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1824</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":3} -->
<h3>Overview</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>
The <em>Shared Accounts</em> feature is a powerful example of the flexibility of brainCloud’s authentication architecture.
&nbsp;
brainCloud already provides a myriad of authentication options: anonymous, e-mail address, Facebook id, Google Id, GameCenter, Twitter, etc. &nbsp;brainCloud can even authenticate users with external directories via our External Authentication feature.
&nbsp;
<em>Shared Accounts</em> takes this one step further, allowing you to create a single, shared account system for your users&nbsp;to access&nbsp;all (or select) company apps. You will then have a single repository of your users, regardless of the specific app they are using. This is useful to offer common, shared features&nbsp;across all apps - like shared premium currencies, meta-level leaderboards and achievements, etc. - really anything you want.
&nbsp;
</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><strong>Parent and Child Accounts</strong></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>
brainCloud <em>Shared Accounts</em> architecture organizes apps (and their associated profiles) into a hierarchy of parents and children. &nbsp;Every app can have at most one parent. And parents can have parents as well, so you aren’t limited to a two-level hierarchy. &nbsp;[Technically we limit you to 5 levels - which should be more than enough - it is enforced primarily to ensure that we don’t get recursion errors at runtime.]
&nbsp;
</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1813,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/09/Shared-Account-Overview.png"><img src="/apidocs/wp-content/uploads/2015/09/Shared-Account-Overview-1024x353.png" alt="Shared Account Overview" class="wp-image-1813"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3><strong>Family Member Profiles</strong></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>
The shared accounts architecture can also be used to associate multiple personal accounts with a single master account. Consider a Netflix-like game service example, where a single account provides access to a service, but we want to provide for personalized family member profiles within the context of the master account, and then of course separate save data for each app/game that the family member accesses.
&nbsp;
Such a topology might look like this:
</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1827,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/09/Family-Member.png"><img src="/apidocs/wp-content/uploads/2015/09/Family-Member-1024x563.png" alt="Family Member" class="wp-image-1827"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3><strong>Parent Roles</strong></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>
To allow for flexible referencing of parent apps from our APIs and data structures, parents must declare a logical “parent level name”. &nbsp;This level name will be used in API calls and in the underlying meta-data to refer to the parent app. To support separation of apps during development and production, multiple apps may share the same “level name” - but they may not be configured together in the same app hierarchy.

&nbsp;
</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1828,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/09/Valid-topologies.png"><img src="/apidocs/wp-content/uploads/2015/09/Valid-topologies-1024x384.png" alt="Valid topologies" class="wp-image-1828"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3><strong>Authenticating Users</strong></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>
To authenticate a user in a Shared Accounts scenario, the app must:
</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Step 1 - First authenticate the user at the top-level of the hierarchy using one of our standard <a href="/apidocs/apiref/#capi-auth" target="_blank" rel="noreferrer noopener">Authentication</a> calls. &nbsp;For example, AuthenticateEmailPassword(), etc.</li><li>Step 2 - Switch to a child profile using either the <a href="/apidocs/apiref/#capi-identity-switchtochildprofile" target="_blank" rel="noreferrer noopener">SwitchToChildProfile()</a>&nbsp;or <a href="/apidocs/apiref/#capi-identity-switchtosingletonchildprofile" target="_blank" rel="noreferrer noopener">SwitchToSingletonChildProfile()</a>&nbsp;methods of the identity service. &nbsp;The currently authenticated top-level profile will be used as the identity for the sub-profile. As is standard for brainCloud authentication, if the profile doesn’t exist it will be created (if the bForceCreate flag is true)</li><li>Step 3 - Repeat step 2 for as many levels down the hierarchy that you need to use to get to the desired app profile.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>
&nbsp;
Note, in some scenarios, there may be multiple child-level profiles for a parent profile. &nbsp;(See the "Family Member Profiles” scenario above). &nbsp;For those situations, you can call a <a href="/apidocs/apiref/#capi-identity-getchildprofiles" target="_blank" rel="noreferrer noopener">GetChildProfiles()</a> method to receive a list of candidate profiles to switch to.
&nbsp;
&nbsp;
</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><strong>API calls and switching levels</strong></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>
Once you’ve authenticated users at the final app level, you’re ready to go. &nbsp;All calls at this level behave the same way as they do for any other brainCloud app. &nbsp;<em>Note that for analytics and billing purposes, brainCloud records API counts across each app id separately.</em>
&nbsp;
Should you want to switch context back to that of a parent profile, you can do so using the <a href="/apidocs/apiref/#capi-identity-switchtoparentprofile" target="_blank" rel="noreferrer noopener">SwitchToParentProfile()</a>&nbsp;API call. &nbsp;From then on, all API calls will be processed at the parent level specified.
&nbsp;
For example: &nbsp;Once you’ve fully authenticated, if you call GetPlayerState(), this operation will act upon the currently active child profile. &nbsp;If you’d like to get that same information about the parent profile, you could call SwitchToParentProfile() first, then GetPlayerState(), and then return back to the child level via SwitchToChildProfile().
&nbsp;
<em>Although this is workable, it’s far from elegant for making quick calls at a parent profile level - which is why we allow you to call parent cloud code scripts (see next section).</em></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><strong>Calling Parent Scripts</strong></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>
Often the child app will need to access or manipulate data that’s stored at the parent profile level. This can be easily accomplished via Cloud Code.
&nbsp;
brainCloud now supports a new <a href="/apidocs/apiref/#capi-script-runparentscript" target="_blank" rel="noreferrer noopener">RunParentScript()</a>&nbsp;API call that allows child apps to run scripts that are both defined at the parent app level, and operate on the profile data at that level.
&nbsp;
So, for example, if you wanted to log the number of game rounds played across all child apps, you could write a Cloud Code script called IncrementGamePlayed() at the parent level, and call it when appropriate from any of its child apps.
&nbsp;
The syntax is RunParentScript( &lt;script_name&gt;, &lt;parameters&gt;, &lt;parent_level&gt; ), where
</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>&lt;script_name&gt; is the name to run</li><li>&lt;parameters&gt; is the json data that you'd like to pass to the script</li><li>&lt;app_level&gt; is the the parent level that the script is defined (and will be run) at</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>
&nbsp;
Note that brainCloud will automatically adjust the server context to make the appropriate parent profile (as identified by the &lt;app_level&gt; current before running the script), and return it to prior app level when the script is complete.
&nbsp;
&nbsp;
</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><strong>Special case: Working with currencies</strong></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>
The brainCloud API’s are generally designed to access data associated with the currently select app id and profile. If you want to access data for another level, you must either switch the current profile level, or call RunParentScript().
&nbsp;
Currencies are an exception to this. It is very common for child apps to want to access and manage the currency balances shared in the parent profiles. &nbsp;Furthermore, for in-app-purchases are normally defined at the child app level, but may allocate shared currencies defined in parent apps.
&nbsp;
To facilitate these use cases, we have expanded the brainCloud APIs to allow largely transparent access to parent currencies.

&nbsp;
The following new API calls have been added:
</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="/apidocs/apiref/#capi-product-awardparentcurrency" target="_blank" rel="noreferrer noopener">AwardParentCurrency()</a> - allows you to increment the currency balance of the specified parent-level currency</li><li><a href="/apidocs/apiref/#capi-product-consumeparentcurrency" target="_blank" rel="noreferrer noopener">ConsumeParentCurrency()</a> - allows you to decrement the balance of the specified parent-level currency</li><li><a href="/apidocs/apiref/#capi-product-getparentcurrency" target="_blank" rel="noreferrer noopener">GetParentCurrency()</a> - retrieves the current balance of the specified parent-level currency (note: also returned in Authentication and Player State )</li><li><a href="/apidocs/apiref/#capi-product-resetparentcurrency" target="_blank" rel="noreferrer noopener">ResetParentCurrency()</a> - resets all currency balances at the specified parent-level (mostly useful for testing / debugging)</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1824</wp:post_id>
		<wp:post_date><![CDATA[2015-09-18 10:57:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-18 14:57:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[shared-accounts]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>23</wp:post_parent>
		<wp:menu_order>15</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>MatchMaking - How To Find Players</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/matchmaking-how-to-find-players/</link>
		<pubDate>Tue, 22 Sep 2015 17:33:31 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1847</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>Overview</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The <a href="/apidocs/apiref/#capi-matchmaking">MatchMaking</a> API is used to find players for multiplayer matches. Once a player has been found using the MatchMaking API, that player can be used for starting a match using either the <a href="/apidocs/apiref/#capi-oneway">BrainCloudOneWayMatch</a> API&nbsp;or the <a href="/apidocs/apiref/#capi-asyncmatch">BrainCloudAsyncMatch</a> API. For an overview of the different types of multiplayer matches please refer to the <a href="/apidocs/api-modules/multiplayer/">Multiplayer</a> documentation.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Finding Players</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In order for players to be eligible for MatchMaking&nbsp;your app must do the following:</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Portal Setup</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Click the Matchmaking page, under <strong>Design | Multiplayer | Matchmaking</strong></li><li>Check the "Matchmaking Enabled" option</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":4320,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/06/2018-06-20_19-47-01.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/06/2018-06-20_19-47-01-300x186.png" alt="" class="wp-image-4320"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>BrainCloudClient API</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>After enabling MatchMaking in the brainCloud portal, you also need to enable MatchMaking for your player. When you've authenticated as the player&nbsp;you will need to:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Call <a href="/apidocs/apiref/#capi-matchmaking-enablematchmaking" target="_blank" rel="noopener noreferrer">MatchMaking.EnableMatchMaking</a> to allow the player to be considered for matches</li><li>Optionally set a player rating. See below for more information on player ratings</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Your player should now be considered for matches.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Player Eligibility</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There are a number of factors which affect player eligibility for MatchMaking.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Player Session</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If a player has a current session with brainCloud, they are by default ineligible for a match. This behavior can be modified by setting the "Allow attack while online" flag to true in the portal MatchMaking section.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that while developing/debugging, it may be useful to set&nbsp;this flag to true - especially when using the API explorer to test the functionality. Otherwise, players who have a current session will be ignored for MatchMaking. Players will have to explicitly log out from brainCloud to be eligible for matches, or wait for their session to timeout (default is 20 minutes - configurable in the portal).</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Player Rating</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>All players in the system have a rating. The initial value can be specified in the portal MatchMaking section. The player rating can also be affected through the MatchMaking API functions <a href="/apidocs/apiref/#capi-matchmaking-incrementplayerrating" target="_blank" rel="noopener noreferrer">IncrementPlayerRating </a>and&nbsp;<a href="/apidocs/apiref/#capi-matchmaking-decrementplayerrating" target="_blank" rel="noopener noreferrer">DecrementPlayerRating</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When a request is made through MatchMaking to GetOneWayPlayers, a "rangeDelta" parameter is supplied which limits the range of player ratings that are eligible, in relation to the currently authenticated player's rating.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To illustrate this point, let's assume the following ratings:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Player A 1000</li><li>Player B 1100</li><li>Player C&nbsp;850</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>If player A requests matches with a rangeDelta of 100, &nbsp;only player B will be eligible.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can also request your MatchMaking details by calling the Read API.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Player Shield</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Players in brainCloud can turn on a shield which prevents them from being matched. The MatchMaking API exposes functions to:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>TurnShieldOn</li><li>TurnShieldOff</li><li>TurnShieldOnFor (with the caller supplying a time in minutes)</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>You can also query the remaining shield time by calling&nbsp;<a href="/apidocs/apiref/#capi-matchmaking-getshieldexpiry" target="_blank" rel="noopener noreferrer">GetShieldExpiry</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Filtering&nbsp;Player Eligibility With Cloud Code</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>brainCloud supports filtering players by custom cloud scripts. In order to filter players using cloud code,&nbsp;follow these steps:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Navigate to Edit Scripts in the Cloud Code section of the portal</li><li>Create a cloud script - we'll call ours "MATCHMAKING_FILTER"
<ul>
<li>Client Callable should be set to false</li>
</ul>
</li><li>Below is an example matchmaking filter script. Note that the return value is true or false depending on whether the player should be matched. Note also the two input parameters in the "data" variable
<ul>
<li>matchCandidate - The player object. This returns the same JSON as the MatchMaking.Read API call (see below).</li>
<li>extraParms - The JSON extraParms object sent in the GetOneWayPlayersFilter API method. This is defined by the API method caller and can be used to help drive the custom filter results.</li>
</ul>
</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":4322,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/06/2018-06-20_19-51-23.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/06/2018-06-20_19-51-23-300x140.png" alt="" class="wp-image-4322"/></a></figure>
<!-- /wp:image -->

<!-- wp:enlighter/codeblock {"language":"js"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="js" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">var matchCandidate = data["matchCandidate"];
var extraParms    = data["extraParms"];

var retval = false;

var playerID = matchCandidate["playerId"];
var otherPlayerSession = bridge.getSessionForProfile(playerID);

// Now you can use the "otherPlayerSession" to execute API calls as that user.
// For instance you could check some of their entity data or verify that they
// have certain statistics that match the data in extraParams.

// retVal of false indicates this player is not valid for matching
retval;</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>For reference, the MatchMaking matchCandidate object is similar to the following (returns the same fields as the "findPlayers" API):</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
 "matchCandidate": {
  "playerId": "89a0e12b-d910-4f5a-9e20-206017849754",
  "playerName": "",
  "pictureUrl": null,
  "summaryFriendData": null,
  "playerRating": 0,
 }
}</pre>
<!-- /wp:enlighter/codeblock -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1847</wp:post_id>
		<wp:post_date><![CDATA[2015-09-22 13:33:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-22 17:33:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[matchmaking-how-to-find-players]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>74</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="api"><![CDATA[api]]></category>
		<category domain="yst_prominent_words" nicename="api-method"><![CDATA[api method]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="cloud-code"><![CDATA[cloud code]]></category>
		<category domain="yst_prominent_words" nicename="considered-for-matches"><![CDATA[considered for matches]]></category>
		<category domain="yst_prominent_words" nicename="current-session"><![CDATA[current session]]></category>
		<category domain="yst_prominent_words" nicename="flag-to-true"><![CDATA[flag to true]]></category>
		<category domain="yst_prominent_words" nicename="matches"><![CDATA[matches]]></category>
		<category domain="yst_prominent_words" nicename="matchmaking-api"><![CDATA[matchmaking api]]></category>
		<category domain="yst_prominent_words" nicename="matchmaking-section"><![CDATA[matchmaking section]]></category>
		<category domain="yst_prominent_words" nicename="multiplayer-matches"><![CDATA[multiplayer matches]]></category>
		<category domain="yst_prominent_words" nicename="player-b"><![CDATA[player b]]></category>
		<category domain="yst_prominent_words" nicename="player-eligibility"><![CDATA[player eligibility]]></category>
		<category domain="yst_prominent_words" nicename="player-rating"><![CDATA[player rating]]></category>
		<category domain="yst_prominent_words" nicename="player-ratings"><![CDATA[player ratings]]></category>
		<category domain="yst_prominent_words" nicename="players"><![CDATA[players]]></category>
		<category domain="yst_prominent_words" nicename="portal"><![CDATA[portal]]></category>
		<category domain="yst_prominent_words" nicename="portal-matchmaking"><![CDATA[portal matchmaking]]></category>
		<category domain="yst_prominent_words" nicename="portal-matchmaking-section"><![CDATA[portal matchmaking section]]></category>
		<category domain="yst_prominent_words" nicename="rating"><![CDATA[rating]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Introduction to the Portal</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/introduction-to-the-portal/</link>
		<pubDate>Thu, 01 Oct 2015 18:37:08 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1874</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>Before we start</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Before we start, ensure that you've signed up with brainCloud and have logged in. &nbsp;It's free and simple - go to <a href="http://getbraincloud.com">http://getbraincloud.com</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Home Page</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>When you first log in to the portal, you'll arrive at the Team Home Page.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_home.jpg" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_home.jpg" alt="brainCloud Home"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Key components of this page include:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>The list of <strong>Your Apps</strong> (with quick links to jump to them)</li><li>The latest <strong>brainCloud News</strong></li><li>Quick links for common actions - like <strong>Inviting Team Members</strong></li><li>The green <strong>Help</strong> button in the bottom-right hand corner - click to talk to us!</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The <strong>Home Page</strong> is the actually just the main page of the <strong>Administration</strong> section of the portal. You can view the other admin pages by clicking on the appropriate tabs on the left-hand side of the page. &nbsp;You can return to the home page at any time by clicking on the <strong>&lt;Gear&gt;</strong> icon in the top-right-hand corner.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Creating an App</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The first thing you'll want to do is create an app. &nbsp;Doing so is simple - just click the <strong>[+]</strong> button in the corner of the <strong>Your Apps</strong> section, and fill in the dialog.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_newApp.jpg" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_newApp.jpg" alt="brainCloud"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>You can choose whether or not to <em>Enable Game Features</em> - this justs shows and/or hides the gaming features of the design portal - like Achievements, Leaderboards, etc. If your app isn't planning to use these features, you can hide them to keep the portal simpler. Note you can always choose to enable them later.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You'll want to pick at least one <em>Supported Platform</em>. brainCloud's APIs check the platform passed in during authentication - if the platform isn't enabled the authentication will be rejected. So be sure to enable both your development and deployment platforms. <em>[Note - the API Explorer defaults to iOS for Authentication calls. It is&nbsp;convenient&nbsp;during development to enable that platform, even if you don't intend to deploy to it.]</em></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>App Management</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>After creating the app you'll be placed in the <strong>Administration | App Management</strong> page. &nbsp;This is where you view and control the publishing of your apps - see the Actions menu on the right-hand side of your app.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_appsList.jpg" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_appsList.jpg" alt="brainCloud"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>For now, we're just going to move along to the&nbsp;design settings for this app. <em>Click on your app's name in the list.</em></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Design</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The Design section is the heart of the brainCloud Portal - it's where you <em>set up the rules</em> about what your app can do, configure integrations with other services, write custom cloud code scripts, and even test API<em> calls</em> live with the system.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_Dashboard_appIds.jpg" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2016/08/brainCloud_Dashboard_appIds.jpg" alt="brainCloud"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Before we get too far, we should mention the navigation items at the top of the screen.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are four main sections - <em>Team</em>, <em>Design</em>, <em>Monitoring</em>, and <em>Reports</em>.&nbsp;As you switch sections you'll notice that the tabs along the left-hand of the screen update. Note also that most of these tabs are expandable to detailed sub-tabs.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can also quickly change the currently selected game via the combo box.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For now, let's go back to Design - we're going to try a very simple test of our game.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>API Explorer</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The API explorer is a central&nbsp;feature of the brainCloud Portal. You can use it to:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Explore how the API is laid out (in terms of services and operations)</li><li>Test new APIs before implementing them in your app</li><li>Confirm the json response format of API calls</li><li>Debug user support scenarios</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_apiExpl.jpg" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_apiExpl.jpg" alt="brainCloud"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>As a simple test, we'll try authenticating with brainCloud. You always have to authenticate with brainCloud before you perform any other operations.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The brainCloud API is organized into Services and Operations.  First, choose the <strong>Service</strong> (in this case <em>Authenticate</em>) and then the <strong>Operation</strong> (in this case, also <em>Authenticate</em>). You can customize the parameters sent into the API call in the <strong>Parameters</strong> text box.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As you can see, the default Authenticate command will simulate and e-mail based authentication from an iOS device and is using the developer's e-mail address as the account. Note that <em>&lt;forceCreate></em> is set to true, which means that the user account will be created if it doesn't already exist.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>These defaults seem fine - click the&nbsp;green <strong>&lt;Run&gt;</strong> button (the play symbol) to send the API call to&nbsp;the brainCloud server. You should see the <em>API Request</em> echoed to the <strong>Log</strong> window, followed by brainCloud's <em>Response</em> a second later.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now that you're logged in (<em>authenticated</em>), you can try additional API calls at your leisure.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And that's it - you've created your first app and logged in. Congrats!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>[P.S. Check your e-mail. brainCloud automatically sends a&nbsp;message to&nbsp;validate the e-mail address provided during account creation. You can customize this functionality in the <strong>Design | Core App Info | Advanced Settings</strong> page of the portal.]</em></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1874</wp:post_id>
		<wp:post_date><![CDATA[2015-10-01 14:37:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-01 18:37:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[introduction-to-the-portal]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>16</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="api"><![CDATA[api]]></category>
		<category domain="yst_prominent_words" nicename="api-call"><![CDATA[api call]]></category>
		<category domain="yst_prominent_words" nicename="api-calls"><![CDATA[api calls]]></category>
		<category domain="yst_prominent_words" nicename="api-explorer"><![CDATA[api explorer]]></category>
		<category domain="yst_prominent_words" nicename="app"><![CDATA[app]]></category>
		<category domain="yst_prominent_words" nicename="app-management"><![CDATA[app management]]></category>
		<category domain="yst_prominent_words" nicename="authenticate"><![CDATA[authenticate]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-portal"><![CDATA[braincloud portal]]></category>
		<category domain="yst_prominent_words" nicename="click"><![CDATA[click]]></category>
		<category domain="yst_prominent_words" nicename="design"><![CDATA[design]]></category>
		<category domain="yst_prominent_words" nicename="home"><![CDATA[home]]></category>
		<category domain="yst_prominent_words" nicename="home-page"><![CDATA[home page]]></category>
		<category domain="yst_prominent_words" nicename="logged"><![CDATA[logged]]></category>
		<category domain="yst_prominent_words" nicename="page"><![CDATA[page]]></category>
		<category domain="yst_prominent_words" nicename="portal"><![CDATA[portal]]></category>
		<category domain="yst_prominent_words" nicename="quick-links"><![CDATA[quick links]]></category>
		<category domain="yst_prominent_words" nicename="services-and-operations"><![CDATA[services and operations]]></category>
		<category domain="yst_prominent_words" nicename="simple-test"><![CDATA[simple test]]></category>
		<category domain="yst_prominent_words" nicename="test"><![CDATA[test]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Setting Up The brainCloud Plugin</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/unreal-tutorials/setting-up-the-braincloud-plugin/</link>
		<pubDate>Thu, 05 Nov 2015 21:02:35 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1966</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This tutorial goes through the steps of installing the brainCloud Unreal plugin for use with C++, Blueprints, and the Online Subsystem.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Prerequisites</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Unreal Engine 4.10.4 or newer</li><li>A Code or Blueprint only project</li><li>Created a <a href="https://sharedprod.braincloudservers.com/" target="_blank" rel="noopener noreferrer">brainCloud Portal</a> account</li><li>The latest version of the brainCloud Unreal plugin. You can download after logging in to&nbsp;the <a href="https://sharedprod.braincloudservers.com/" target="_blank" rel="noopener noreferrer">brainCloud Portal</a>.</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Installing the Plugin</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Installing the brainCloud plugin is a very straightforward process.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Open the root folder of your&nbsp;Unreal project (where the *.uproject file is)</li><li>Open the Plugins folder, or create it if it does not exist</li><li>Copy the BCClient folder from the downloaded Unreal plugin archive into the Plugins folder</li><li>If your project is NOT Blueprint only, be sure to regenerate your code project files now</li><li>And that's it, installation complete!</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>You can confirm the install from inside the Unreal Editor by opening the Plugins window (Edit&gt;Plugins) and verifying that brainCloud is visible under the Project&gt;Network category.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/10/unreal_plugin.jpg" target="_blank" rel="noopener noreferrer"><img src="/apidocs/wp-content/uploads/2015/10/unreal_plugin.jpg" alt="unreal_plugin"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>That's all that's required to start using brainCloud in Blueprints. &nbsp;You can learn more about using brainCloud inside Blueprints in our&nbsp;<a href="/apidocs/tutorials/unreal-tutorials/getting-started-with-blueprints/">Getting Started With&nbsp;Blueprints tutorial</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>brainCloud C++ Setup</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you plan on using brainCloud in C++ there are a few more steps required before you can begin coding.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Open your C++ project and find your project's Build.cs file. &nbsp;It will be named after your project (ex. MyProject.Build.cs).</li><li>Look for the&nbsp;PublicDependencyModuleNames and add&nbsp;"BCClientPlugin" to the list. It should look something like this:</li></ol>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {"language":"md"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="md" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">PublicDependencyModuleNames.AddRange(new string[] { "Core", "CoreUObject", "Engine", "InputCore", "BCClientPlugin" });</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>You should now be able to include the BrainCloudClient.h and compile your C++ code with brainCloud!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Enabling the Online Subsystem</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>By default, the brainCloud Online Subsystem is not enabled. &nbsp;These steps are only necessary if you wish to use the Unreal Online&nbsp;Subsystem with brainCloud.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Open the root folder of your&nbsp;Unreal project (where the *.uproject file is)</li><li>Open the Config&nbsp;folder</li><li>Find&nbsp;the DefaultEngine.ini file and open it in a text editor</li><li>Add the following lines to the file and save:</li></ol>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">[OnlineSubsystem]
DefaultPlatformService=BrainCloud
[OnlineSubsystemBrainCloud]
bEnabled=true</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>

This will tell Unreal to load the brainCloud Online Subsystem by default.

</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1966</wp:post_id>
		<wp:post_date><![CDATA[2015-11-05 16:02:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-05 21:02:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[setting-up-the-braincloud-plugin]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>2206</wp:post_parent>
		<wp:menu_order>-7</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="uproject-file"><![CDATA[*.uproject file]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-online"><![CDATA[braincloud online]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-online-subsystem"><![CDATA[braincloud online subsystem]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-portal"><![CDATA[braincloud portal]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-unreal"><![CDATA[braincloud unreal]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-unreal-plugin"><![CDATA[braincloud unreal plugin]]></category>
		<category domain="yst_prominent_words" nicename="folder-of-your-unreal"><![CDATA[folder of your unreal]]></category>
		<category domain="yst_prominent_words" nicename="folder-of-your-unreal-project"><![CDATA[folder of your unreal project]]></category>
		<category domain="yst_prominent_words" nicename="installing-the-braincloud"><![CDATA[installing the braincloud]]></category>
		<category domain="yst_prominent_words" nicename="online-subsystem"><![CDATA[online subsystem]]></category>
		<category domain="yst_prominent_words" nicename="open-the-root"><![CDATA[open the root]]></category>
		<category domain="yst_prominent_words" nicename="open-the-root-folder"><![CDATA[open the root folder]]></category>
		<category domain="yst_prominent_words" nicename="plugins-folder"><![CDATA[plugins folder]]></category>
		<category domain="yst_prominent_words" nicename="project"><![CDATA[project]]></category>
		<category domain="yst_prominent_words" nicename="root-folder"><![CDATA[root folder]]></category>
		<category domain="yst_prominent_words" nicename="root-folder-of-your-unreal"><![CDATA[root folder of your unreal]]></category>
		<category domain="yst_prominent_words" nicename="unreal"><![CDATA[unreal]]></category>
		<category domain="yst_prominent_words" nicename="unreal-plugin"><![CDATA[unreal plugin]]></category>
		<category domain="yst_prominent_words" nicename="unreal-project"><![CDATA[unreal project]]></category>
		<category domain="yst_prominent_words" nicename="using-braincloud"><![CDATA[using braincloud]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Getting Started With Blueprints</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/unreal-tutorials/getting-started-with-blueprints/</link>
		<pubDate>Thu, 05 Nov 2015 20:57:52 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=1991</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This tutorial will introduce you to the basics of using brainCloud in Blueprints. &nbsp;We will start by setting up the BrainCloudClient, then authenticating and making a few simple API calls. Finally, we will go over parsing JSON in Blueprints.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Prerequisites</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Created a brainCloud Portal account</li><li>Created a game in the brainCloud Portal. If you need help with this step refer to the <a href="/apidocs/tutorials/unity-tutorials/unity-tutorial-1-getting-started/" target="_blank" rel="noopener noreferrer">Unity Tutorial #1 video</a>.</li><li>An Unreal project with the brainCloud plugin installed as described <a href="/apidocs/tutorials/unreal-tutorials/setting-up-the-braincloud-plugin/" target="_blank" rel="noopener noreferrer">here</a></li><li>Basic experience with Blueprint, see the <a href="https://docs.unrealengine.com/latest/INT/Engine/Blueprints/GettingStarted/index.html" target="_blank" rel="noopener noreferrer">Unreal documentation</a> for help</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Initialization</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Before you can do anything with brainCloud the BrainCloudClient must be initialized. &nbsp;This is accomplished by providing your App's details to the Client via the Initialize function.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To keep things simple&nbsp;we will do everything in the Level Blueprint and off of the Event BeginPlay node.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Start by dragging off of the Event node and adding the Initialize function node. &nbsp;You can find it by just typing "initialize" and selecting it under the "Client" category, or you can find it manually by looking in BrainCloud&gt;Client.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":6807,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/03/unreal-initialize-authenticate.jpg" alt="" class="wp-image-6807"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>You should now have the Initialize node on the Graph. &nbsp;The information you need to initialize comes from the Core App Info &gt; Application IDs page in the brainCloud web portal.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Server Url -&nbsp;</strong>The URL (default value: https://sharedprod.braincloudservers.com/dispatcherv2) of the brainCloud server to connect to. You should not have to change this. </li><li><strong>Secret Key&nbsp;</strong>- The&nbsp;<strong>App Secret</strong> for your application</li><li><strong>App Id</strong> - The game (or in the portal page <strong>App ID</strong>) of your application</li><li><strong>Game Version</strong> - The current version of your application</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>You should set the default values of these variables of secrect key, app id and game version in your blueprint, by doing that, you can use get-version to get their values respectively.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Updating the Client</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The BrainCloudClient relies on its <strong>Run Callbacks&nbsp;</strong>function being called every frame, without this, all your API calls will receive no responses! &nbsp;The easiest way to set this up is to attach the&nbsp;<strong>Run Callbacks</strong> function node (which can be found under BrainCloud &gt; Client) to the Level Blueprint's <b>Event Tick</b> node.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":6809,"width":586,"height":201,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large is-resized"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/03/callback.jpg" alt="" class="wp-image-6809" width="586" height="201"/></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>Debug Logging</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Logging can be an invaluable tool when working on your project. &nbsp;By default logging is disabled in brainCloud, however, it can easily be enabled by calling the&nbsp;<strong>Enable Logging&nbsp;</strong>function&nbsp;(which can be found under BrainCloud &gt; Client). &nbsp;Logging can just as easily be disabled with the same function.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>BrainCloud will log many things, but&nbsp;among the most useful&nbsp;are the JSON requests and responses. To view the logs you need to open the&nbsp;<strong>Output Log&nbsp;</strong>window in the Unreal Editor, found under Window &gt; Developer Tools &gt; Output Log.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let's enable logging after we authenticate:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":6827,"width":570,"height":213,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large is-resized"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/03/log-1.jpg" alt="" class="wp-image-6827" width="570" height="213"/></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>The brainCloud Node Structure</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let's go over the structure that all server-communicating brainCloud Blueprint nodes use.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":6818,"width":571,"height":358,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large is-resized"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/03/node-4.jpg" alt="" class="wp-image-6818" width="571" height="358"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>This is a Latent node, meaning it has execution paths that are delayed. &nbsp;There are&nbsp;<strong>three</strong> execution pins:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><strong>Immediate&nbsp;</strong>- Executes immediately, continuing the execution path that triggered the node</li><li><strong>On Success&nbsp;</strong>- Executes when a&nbsp;<strong>successful</strong> response is received</li><li><strong>On Failure</strong> -&nbsp;Executes when an <strong>unsuccessful</strong> response is received and the call has failed</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The next return parameter&nbsp;<strong>Json Data</strong> is a JSON-formatted string. &nbsp;The return of this is conditional on the success or failure of the call, returning either the data specified by the API call made <strong>or</strong> the error information.&nbsp;We will get&nbsp;into parsing this string later in the tutorial.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finally, there is the&nbsp;<strong>Additional Data&nbsp;</strong>struct. This contains extra information that may be useful depending on the situation. It contains:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Service Name&nbsp;</strong>- The name of the service the API call belongs to</li><li><strong>Service Operation</strong> - The specific operation performed by the API call</li><li><strong>Status Code&nbsp;</strong>- The status code returned by the call.</li><li><strong>Reason Code</strong> - The reason code describes specific failures and is returned when an error is encountered. You can view the various reason codes <a href="/apidocs/apiref/#appendix-reasoncodes" target="_blank" rel="noopener noreferrer">here</a>.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>All brainCloud API calls that communicate with the brainCloud server will have this return structure.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Authentication</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Authentication is the next step and is required before calling any other brainCloud APIs. &nbsp;Create a new <a href="/apidocs/apiref/?cpp#capi-auth-authenticateuniversal" target="_blank" rel="noopener noreferrer">Authenticate Universal</a> node, which can be found under BrainCloud &gt; Authentication.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>By now you should have these nodes set up and connected in order:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":6821,"width":573,"height":259,"sizeSlug":"large","linkDestination":"custom"} -->
<figure class="wp-block-image size-large is-resized"><a href="/apidocs/wp-content/uploads/2015/10/unreal_prog_auth.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/03/unreal-initialize-authenticate-2.jpg" alt="" class="wp-image-6821" width="573" height="259"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Next, we will add some debug log messages to get a feel for how the different execution paths function.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":6822,"width":572,"height":359,"sizeSlug":"large","linkDestination":"custom"} -->
<figure class="wp-block-image size-large is-resized"><a href="/apidocs/wp-content/uploads/2015/10/unreal_auth_return.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/03/node-5.jpg" alt="" class="wp-image-6822" width="572" height="359"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The first execution pin&nbsp;fires&nbsp;<strong>immediately</strong>, continuing the execution path that triggered the Authenticate node in the first place. &nbsp;This makes it suitable for printing the "Authenticating..." message.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The next execution pin,&nbsp;<strong>On Success</strong>, will fire when a successful result is returned from the server, so we print the "Authentication Success!" message.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finally, the&nbsp;<strong>On Failure</strong> execution pin will fire if an error is encountered, so we print the "Authentication Failed!" message.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>At this point, you should be able to compile your Blueprint, run it, and see the&nbsp;"Authenticating..." and&nbsp;"Authentication Success!" messages. &nbsp;If not, review the steps again and check the <b>Output Log </b>to debug your Blueprint.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Calling the API</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Once we've successfully authenticated let's call a few more API functions.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2119,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/10/unreal_nodes.png"><img src="/apidocs/wp-content/uploads/2015/10/unreal_nodes.png" alt="unreal_nodes" class="wp-image-2119"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Continuing off the&nbsp;<strong>On Success&nbsp;</strong>path of our authentication node we've added an Update Player Name node (BrainCloud &gt; Player State) and a Get Achievements&nbsp;node (BrainCloud &gt; Gamification).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that we are using the first execution pin, &nbsp;which&nbsp;we learned earlier&nbsp;will execute&nbsp;<strong>immediately, </strong>so we&nbsp;are not waiting for the Update Player Name to succeed or fail before calling Get Achievements. &nbsp;These operations do not depend on one another, so there is no issue with triggering&nbsp;them both at the same time.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We've also implemented a generic&nbsp;<strong>Handle Error</strong>&nbsp;function and connected it to the&nbsp;<strong>On Error&nbsp;</strong>pins of both functions. &nbsp;This way we can handle either error without duplicate code.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/10/unreal_error.png"><img src="/apidocs/wp-content/uploads/2015/10/unreal_error.png" alt="unreal_error"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>You can see inside our&nbsp;<strong>Handle Error&nbsp;</strong>function that we use the <strong>Service Name</strong> and <strong>Service Operation</strong> of the additional return data to output an error log that specifies what call has failed.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>JSON Parsing in Blueprint</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Parsing the&nbsp;<strong>Json Data&nbsp;</strong>string is essential to using brainCloud and&nbsp;it requires the use of a third-party plugin. &nbsp;There are several options available (we leave that up to you to decide) but for this tutorial we will be using the&nbsp;<strong>VaRest</strong> plugin available <a href="https://github.com/ufna/VaRest" target="_blank" rel="noopener noreferrer">here</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First, we will need to make another API call to parse the return from, in this case, <a rel="noopener noreferrer" href="/apidocs/apiref/?cpp#capi-time-readservertime" target="_blank">ReadServerTime</a> which will return the current server time (BrainCloud > Time).  We can see the JSON return structure on the documentation page so we know what we will be looking for when we parse the JSON.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2028,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/10/unreal_json_read.png"><img src="/apidocs/wp-content/uploads/2015/10/unreal_json_read.png" alt="unreal_json_read" class="wp-image-2028"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>You can see here that On Success we are doing two things, constructing a new Json&nbsp;Object (a VaRest type) and decoding the Json Data response into it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Constructing the Json&nbsp;Object is done by calling the <strong>Construct Json Object</strong> function in VaRest. &nbsp;Next we save the constructed object to a Local Variable using that variable's <strong>Set</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now we will decode the JSON, which is simply a call to the VaRest function <strong>Decode Json</strong>. &nbsp;We pass in our newly created Json Object as well as our <strong>Json Data</strong> string.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2029,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/10/unreal_json_parse.png"><img src="/apidocs/wp-content/uploads/2015/10/unreal_json_parse.png" alt="unreal_json_parse" class="wp-image-2029"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The next step is to check if the Decode Json call was successful by branching off of its Return Value boolean. If it was, we now want to dig through the data and print the current server time.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Referring to the JSON return structure in the <a href="/apidocs/apiref/?cpp#capi-time-readservertime" target="_blank" rel="noopener noreferrer">documentation</a>&nbsp;we can see that the server time is represented by the key <strong>"server_time"</strong> which is contained in the object <strong>"data"</strong>. &nbsp;So to get to it we take the Json Data object we saved to a variable and use the VaRest functions <strong>Get Object Field</strong> and then <strong>Get Number Field</strong>, passing in "data" and "server_time" as our Field Names.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Lastly, we do a conversion from a float to a string and print the result.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1991</wp:post_id>
		<wp:post_date><![CDATA[2015-11-05 15:57:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-05 20:57:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[getting-started-with-blueprints]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>2206</wp:post_parent>
		<wp:menu_order>10</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="api-call"><![CDATA[api call]]></category>
		<category domain="yst_prominent_words" nicename="api-calls"><![CDATA[api calls]]></category>
		<category domain="yst_prominent_words" nicename="app-id"><![CDATA[app id]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="continuing-the-execution-path"><![CDATA[continuing the execution path]]></category>
		<category domain="yst_prominent_words" nicename="execution-path-that-triggered"><![CDATA[execution path that triggered]]></category>
		<category domain="yst_prominent_words" nicename="execution-pin"><![CDATA[execution pin]]></category>
		<category domain="yst_prominent_words" nicename="found-under-braincloud"><![CDATA[found under braincloud]]></category>
		<category domain="yst_prominent_words" nicename="found-under-braincloud-client"><![CDATA[found under braincloud client]]></category>
		<category domain="yst_prominent_words" nicename="handle-error-function"><![CDATA[handle error function]]></category>
		<category domain="yst_prominent_words" nicename="immediately-continuing-the-execution"><![CDATA[immediately continuing the execution]]></category>
		<category domain="yst_prominent_words" nicename="immediately-continuing-the-execution-path"><![CDATA[immediately continuing the execution path]]></category>
		<category domain="yst_prominent_words" nicename="json"><![CDATA[json]]></category>
		<category domain="yst_prominent_words" nicename="json-data"><![CDATA[json data]]></category>
		<category domain="yst_prominent_words" nicename="json-data-string"><![CDATA[json data string]]></category>
		<category domain="yst_prominent_words" nicename="json-object"><![CDATA[json object]]></category>
		<category domain="yst_prominent_words" nicename="json-return-structure"><![CDATA[json return structure]]></category>
		<category domain="yst_prominent_words" nicename="node"><![CDATA[node]]></category>
		<category domain="yst_prominent_words" nicename="output-log"><![CDATA[output log]]></category>
		<category domain="yst_prominent_words" nicename="run-callbacks-function"><![CDATA[run callbacks function]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Getting Started With the Online Subsystem</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/unreal-tutorials/getting-started-with-the-online-subsystem/</link>
		<pubDate>Thu, 05 Nov 2015 20:59:01 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=2020</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><strong>NOTE:&nbsp;</strong> OnlineSubsystem support is still in-development</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Prerequisites</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Created a brainCloud Portal account</li><li>Created a game in the brainCloud Portal. If you need help with this step refer to the <a rel="noreferrer noopener" aria-label=" (opens in a new tab)" href="/apidocs/tutorials/unity-tutorials/unity-tutorial-1-getting-started/" target="_blank">Unity Tutorial #1 video</a>.</li><li>An Unreal project with the brainCloud plugin installed as described <a href="/apidocs/tutorials/unreal-tutorials/setting-up-the-braincloud-plugin/" target="_blank" rel="noreferrer noopener" aria-label=" (opens in a new tab)">here</a></li><li>Basic experience with Unreal C++, see the <a rel="noopener" href="https://docs.unrealengine.com/latest/INT/Programming/Introduction/index.html" target="_blank">Unreal documentation</a> for help</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Initialization</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The first&nbsp;step is to create the BrainCloudConfig.ini file that the Subsystem will read in order to automatically initialize brainCloud. Note that this step is optional. &nbsp;If you wish you can manually initialize the Client through Blueprint or native C++ instead by calling the <a href="/apidocs/apiref/?cpp#capi-client-initialize" target="_blank" rel="noopener">BrainCloudClient-&gt;Initialize</a> function.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Open the root folder of your&nbsp;Unreal project (where the *.uproject file is)</li><li>Open the Config folder</li><li>Create a new text file and rename it to&nbsp;BrainCloudConfig.ini (ensure the extension is changed from .txt to .ini, not just named&nbsp;BrainCloudConfig.ini.txt)</li><li>Enter the following into the file, replacing the Secret and App ID and version with those of your App:</li></ol>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">[BrainCloud.Client]
ServerURL = "https://sharedprod.braincloudservers.com/dispatcherv2"
Secret = YOUR-APP-SECRET-HERE
AppID = YOUR-APP-ID-HERE
Version = 1.0.0</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":3} -->
<h3>Using OnlineSubsystem</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To learn more about using the Unreal Online Subsystem refer to the <a href="https://docs.unrealengine.com/latest/INT/Programming/Online/index.html" target="_blank" rel="noopener">official Unreal documentation</a>.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2020</wp:post_id>
		<wp:post_date><![CDATA[2015-11-05 15:59:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-05 20:59:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[getting-started-with-the-online-subsystem]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>2206</wp:post_parent>
		<wp:menu_order>10</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-portal"><![CDATA[braincloud portal]]></category>
		<category domain="yst_prominent_words" nicename="braincloudconfig-ini"><![CDATA[braincloudconfig.ini]]></category>
		<category domain="yst_prominent_words" nicename="create"><![CDATA[create]]></category>
		<category domain="yst_prominent_words" nicename="created"><![CDATA[created]]></category>
		<category domain="yst_prominent_words" nicename="documentation"><![CDATA[documentation]]></category>
		<category domain="yst_prominent_words" nicename="file"><![CDATA[file]]></category>
		<category domain="yst_prominent_words" nicename="help"><![CDATA[help]]></category>
		<category domain="yst_prominent_words" nicename="initialize"><![CDATA[initialize]]></category>
		<category domain="yst_prominent_words" nicename="note"><![CDATA[note]]></category>
		<category domain="yst_prominent_words" nicename="onlinesubsystem"><![CDATA[onlinesubsystem]]></category>
		<category domain="yst_prominent_words" nicename="open"><![CDATA[open]]></category>
		<category domain="yst_prominent_words" nicename="portal"><![CDATA[portal]]></category>
		<category domain="yst_prominent_words" nicename="project"><![CDATA[project]]></category>
		<category domain="yst_prominent_words" nicename="refer"><![CDATA[refer]]></category>
		<category domain="yst_prominent_words" nicename="step"><![CDATA[step]]></category>
		<category domain="yst_prominent_words" nicename="subsystem"><![CDATA[subsystem]]></category>
		<category domain="yst_prominent_words" nicename="unreal"><![CDATA[unreal]]></category>
		<category domain="yst_prominent_words" nicename="unreal-documentation"><![CDATA[unreal documentation]]></category>
		<category domain="yst_prominent_words" nicename="unreal-project"><![CDATA[unreal project]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Getting Started With C++</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/unreal-tutorials/getting-started-with-c/</link>
		<pubDate>Thu, 05 Nov 2015 20:58:30 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=2052</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Just as with Blueprints the entire BrainCloud API is available through C++ in Unreal. &nbsp;In this tutorial we will go over how to Initialize brainCloud, how to Authenticate, and how to use the callback system.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Prerequisites</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Created a brainCloud Portal account</li><li>Created a game in the brainCloud Portal. If you need help with this step refer to the <a href="/apidocs/tutorials/unity-tutorials/unity-tutorial-1-getting-started/" target="_blank" rel="noopener noreferrer">Unity Tutorial #1 video</a>.</li><li>An Unreal project with the brainCloud plugin installed as described <a href="/apidocs/tutorials/unreal-tutorials/setting-up-the-braincloud-plugin/" target="_blank" rel="noopener noreferrer">here</a></li><li>Basic experience with Unreal C++, see the <a href="https://docs.unrealengine.com/latest/INT/Programming/Introduction/index.html" target="_blank" rel="noopener noreferrer">Unreal documentation</a> for help</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Creating a Test Actor</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>For this tutorial we will need&nbsp;to create an actor where we will write our code to interact with brainCloud. To create a new actor open the editor and go to File&gt;New C++ Class. &nbsp;Select Actor as the parent class, click&nbsp;Next, and name it whatever you like.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2056,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2015/10/unreal_cpp_actor.png" target="_blank" rel="noopener noreferrer"><img src="/apidocs/wp-content/uploads/2015/10/unreal_cpp_actor.png" alt="unreal_cpp_actor" class="wp-image-2056"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>One your actor is created switch over to your programming IDE and continue the tutorial from there.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Including the BCClientPlugin Module</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The BCClientPluginModule must be added to your Project's Build.cs file for the Unreal Build Tool to successfully compile your project with brainCloud. &nbsp;Find the&nbsp;Build.cs file under Source &gt; MyProject &gt; MyProject.Build.cs</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Inside the Build.cs find the line <strong>PublicDependencyModuleNames</strong>&nbsp;and add the string <strong>"BCClientPlugin"</strong>&nbsp;to it. It should now look something like this:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">PublicDependencyModuleNames.AddRange(new string[] { "Core", "CoreUObject", "Engine", "InputCore", "BCClientPlugin" });</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":3} -->
<h3>Initialization</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Before you can do anything with brainCloud the BrainCloudClient must be initialized. &nbsp;This is accomplished by providing your App's details to the Client via the Initialize function.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Open your newly created Actor's code (cpp) file and include&nbsp;the&nbsp;"BrainCloudClient.h" header file. &nbsp;This will give you access to all of brainCloud's services and functions.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include "BrainCloudClient.h"</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Now in your actor's <strong>BeginPlay()</strong> function we can perform the initialization using the <a rel="noopener noreferrer" href="/apidocs/apiref/?cpp#capi-client-initialize" target="_blank">BrainCloudClient->Initialize</a> function.  </p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">// Called when the game starts or when spawned
void ABrainCloudTestActor::BeginPlay()
{
    Super::BeginPlay();
    _bc.initialize(
        "https://sharedprod.braincloudservers.com/dispatcherv2", 
        "91c3a097-4697-4787-ba1c-fakeSecret", 
        "123456", 
        "1.0.0");
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":3} -->
<h3>Updating the BrainCloud Client</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The BrainCloudClient relies on its Run Callbacks function being called every frame from the main thread, without this your callback functions will never be called! &nbsp;There are many places&nbsp;you could call this function, but to keep things simple in&nbsp;this tutorial we will place it in our actor's&nbsp;<strong>Tick()</strong> method.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">// Called every frame
void ABrainCloudTestActor::Tick(float DeltaTime)
{
    Super::Tick(DeltaTime);
    _bc.runCallbacks();
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":3} -->
<h3>Setting Up Callbacks</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Before we make any API calls we want our actor to be able to receive callbacks from brainCloud when our API calls succeed or fail. &nbsp;To do this we need our actor to inherit from the&nbsp;<strong>IServerCallback&nbsp;</strong>class. This interface defines the <strong>serverCallback</strong> and <strong>serverError&nbsp;</strong>functions, and allows us to pass a reference to our actor as a&nbsp;<strong>callback object</strong> to brainCloud.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Go to your actor's header file and include the&nbsp;<strong>IServerCallback.h&nbsp;</strong>header file. Next, inherit from IServerCallback and declare the virtual methods required by the interface. &nbsp;Your header should look similar to this:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">#pragma once

#include "GameFramework/Actor.h"
#include "IServerCallback.h"
#include "BrainCloudTestActor.generated.h"

UCLASS()
class MYPROJECT_API ABrainCloudTestActor : public AActor, public IServerCallback
{
	GENERATED_BODY()
	
public:	
	// Sets default values for this actor's properties
	ABrainCloudTestActor();

	// Called when the game starts or when spawned
	virtual void BeginPlay() override;
	
	// Called every frame
	virtual void Tick( float DeltaSeconds ) override;

    // IServerCallback interface
    void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, const FString&amp; jsonData);
    void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int32 statusCode, int32 reasonCode, const FString&amp; jsonError);
    // End of IServerCallback interface
};</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>The next step is to go back to your cpp file and define the serverCallback and&nbsp;serverError methods like so:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">void ABrainCloudTestActor::serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, const FString&amp; jsonData)
{

}

void ABrainCloudTestActor::serverError(ServiceName serviceName, ServiceOperation serviceOperation, int32 statusCode, int32 reasonCode, const FString&amp; jsonError)
{

}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>And add the required header files for&nbsp;<strong>ServiceName&nbsp;</strong>and <b>ServiceOperation</b> which we will use later.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">#include "ServiceName.h"
#include "ServiceOperation.h"</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":3} -->
<h3>Authentication</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>BrainCloud provides many different methods of authentication, but for this tutorial we will use <a href="/apidocs/apiref/?cpp#capi-auth-authenticateuniversal" target="_blank" rel="noopener noreferrer">AuthenticateUniversal</a>. &nbsp;Now that our actor can receive callbacks we can proceed to call the AuthenticateUniversal method after we initialize in <strong>BeginPlay()</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">_bc.getAuthenticationService()->authenticateUniversal("UnrealUser", "password1234", true, this);</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Referring to the <a href="/apidocs/apiref/?cpp#capi-auth-authenticateuniversal" target="_blank" rel="noopener noreferrer">documentation</a>, the last parameter of the AuthenticateUniversal function is a pointer to an IServerCallback. &nbsp;Since our actor has inherited from IServerCallback we can pass in the&nbsp;<strong>this </strong>pointer&nbsp;and have our actor's&nbsp;serverCallback and serverError functions get called when the server responds to our request.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let's add a log message to our&nbsp;serverCallback method so we know things are working.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">void ABrainCloudTestActor::serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, const FString&amp; jsonData)
{
    UE_LOG(LogTemp, Display, TEXT("Authenticated!"));
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>At this point, you should be able to run the Editor, drag your Actor into the Level, press Play, and see "LogTemp:Display: Authenticated!" in the Output Log window.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Parsing JSON</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>All brainCloud callbacks include a JSON data string as a parameter where the return data for the call is represented. &nbsp;Being able to parse this string is essential to using brainCloud, so this section of the tutorial goes over how to use the built-in Unreal JSON classes with the brainCloud JSON data.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The first thing we need to do is add the Unreal Json module to our project's Build.cs file so we can use the JSON functionality. &nbsp;The Build.cs file should be under Source &gt; MyProject &gt; MyProject.Build.cs</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Inside the Build.cs find the line&nbsp;<strong>PrivateDependencyModuleNames</strong> and add the string&nbsp;<strong>"Json"</strong> to it. It should look something like this:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">PrivateDependencyModuleNames.AddRange(new string[] { "Json" });</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Back in our Actor's cpp file, lets modify the serverCallback to send another call after AuthenticateUniversal returns, and then to handle the return of this additional call as well.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">void ABrainCloudTestActor::serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, const FString&amp; jsonData)
{
    if (serviceName == ServiceName::AuthenticateV2) //authenticate return handling
    {
        UE_LOG(LogTemp, Display, TEXT("Authenticated!"));

        //send our next request
        _bc.getTimeService()->readServerTime(this);
    }
    else if (serviceName == ServiceName::Time) //time return handling
    {
        UE_LOG(LogTemp, Display, TEXT("Reading the time..."));
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Because we're passing in a pointer to our Actor for our next call as well we need to check which call is invoking our&nbsp;serverCallback function. &nbsp;We can do this by comparing the&nbsp;<strong>ServiceName</strong> and acting accordingly.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We've also added our next API call <a href="/apidocs/apiref/?cpp#capi-time-readservertime" target="_blank" rel="noopener noreferrer">ReadServerTime</a>&nbsp;which as the documentation says "returns the server time in UTC. This is in UNIX millis time format." Now lets process the return JSON string to get the time and print it to the log.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First thing we need to do is create a new&nbsp;<strong>TJsonReader</strong>&nbsp;to read our JSON string, and a&nbsp;<strong>FJsonObject</strong> to hold our deserialized data.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">TSharedRef&lt;TJsonReader&lt;>> reader = TJsonReaderFactory&lt;>::Create(*jsonData);
TSharedPtr&lt;FJsonObject> jsonReadObject;</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Now we actually deserialize the string using the&nbsp;<strong>FJsonSerializer::Deserialize</strong> method and passing in our JsonReader and JsonObject.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">bool result = FJsonSerializer::Deserialize(reader, jsonReadObject);</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>We check the result bool returned by the Deserialize to make sure it was successful before digging into our jsonReadObject for the data we need.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Referring to the JSON return structure in the <a href="/apidocs/apiref/?cpp#capi-time-readservertime" target="_blank" rel="noopener noreferrer">documentation</a> we can see that the server time is represented by the key “<strong>server_time</strong>” which is contained in the object “<strong>data</strong>”. So to get to it we take the jsonReadObject&nbsp;and use the functions GetObjectField and then GetNumberField, passing in “data” and “server_time” as our Field Names.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finally we print the extracted time to the log.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">if (result == true) //if deserializing was successful
{
    TSharedPtr&lt;FJsonObject> data = jsonReadObject->GetObjectField(TEXT("data"));
    int64 serverTime = data->GetNumberField(TEXT("server_time"));
    UE_LOG(LogTemp, Display, TEXT("The time is %d"), serverTime);
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":3} -->
<h3>Full Source Code</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Header:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">#pragma once

#include "GameFramework/Actor.h"
#include "IServerCallback.h"
#include "BrainCloudTestActor.generated.h"

UCLASS()
class BCSUBSYSTEM_API ABrainCloudTestActor : public AActor, public IServerCallback
{
	GENERATED_BODY()
	
public:	
	// Sets default values for this actor's properties
	ABrainCloudTestActor();

	// Called when the game starts or when spawned
	virtual void BeginPlay() override;
	
	// Called every frame
	virtual void Tick( float DeltaSeconds ) override;

    // IServerCallback interface
    void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, const FString&amp; jsonData);
    void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int32 statusCode, int32 reasonCode, const FString&amp; jsonError);
    // End of IServerCallback interface
};</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Source:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">#include "MyProject.h"
#include "BrainCloudTestActor.h"

#include "BrainCloudClient.h"
#include "ServiceName.h"
#include "ServiceOperation.h"
BrainCloudClient _bc;

// Sets default values
ABrainCloudTestActor::ABrainCloudTestActor()
{
    // Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
    PrimaryActorTick.bCanEverTick = true;
}

// Called when the game starts or when spawned
void ABrainCloudTestActor::BeginPlay()
{
    Super::BeginPlay();
    _bc.initialize(
        "https://sharedprod.braincloudservers.com/dispatcherv2", 
        "91c3a097-4697-4787-ba1c-fakeSecret", 
        "123456", 
        "1.0.0");

    _bc.getAuthenticationService()->authenticateUniversal("UnrealUser", "UnrealUser", true, this);
}

// Called every frame
void ABrainCloudTestActor::Tick(float DeltaTime)
{
    Super::Tick(DeltaTime);
    _bc.runCallbacks();
}

void ABrainCloudTestActor::serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, const FString&amp; jsonData)
{
    if (serviceName == ServiceName::AuthenticateV2) //authenticate return handling
    {
        UE_LOG(LogTemp, Display, TEXT("Authenticated!"));

        //send our next request
        _bc.getTimeService()->readServerTime(this);
    }
    else if (serviceName == ServiceName::Time) //time return handling
    {
        UE_LOG(LogTemp, Display, TEXT("Reading the time..."));

        TSharedRef&lt;TJsonReader&lt;>> reader = TJsonReaderFactory&lt;>::Create(*jsonData);
        TSharedPtr&lt;FJsonObject> jsonReadObject;
        bool result = FJsonSerializer::Deserialize(reader, jsonReadObject);

        if (result == true) //if deserializing was successful
        {
            TSharedPtr&lt;FJsonObject> data = jsonReadObject->GetObjectField(TEXT("data"));
            int64 serverTime = data->GetNumberField(TEXT("server_time"));
            UE_LOG(LogTemp, Display, TEXT("The time is %d"), serverTime);
        }
        else
        {
            UE_LOG(LogTemp, Error, TEXT("Failed to deserialize JSON!"));
        }
    }
}

void ABrainCloudTestActor::serverError(ServiceName serviceName, ServiceOperation serviceOperation, int32 statusCode, int32 reasonCode, const FString&amp; jsonError)
{
    UE_LOG(LogTemp, Error, TEXT("Call failed - %s - %s"), *serviceName.getValue(), *serviceOperation.getValue());
}</pre>
<!-- /wp:enlighter/codeblock -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2052</wp:post_id>
		<wp:post_date><![CDATA[2015-11-05 15:58:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-05 20:58:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[getting-started-with-c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>2206</wp:post_parent>
		<wp:menu_order>10</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="actor"><![CDATA[actor]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-portal"><![CDATA[braincloud portal]]></category>
		<category domain="yst_prominent_words" nicename="build-cs-file"><![CDATA[build.cs file]]></category>
		<category domain="yst_prominent_words" nicename="build-cs-find-the-line"><![CDATA[build.cs find the line]]></category>
		<category domain="yst_prominent_words" nicename="cpp-file"><![CDATA[cpp file]]></category>
		<category domain="yst_prominent_words" nicename="file"><![CDATA[file]]></category>
		<category domain="yst_prominent_words" nicename="file-and-include"><![CDATA[file and include]]></category>
		<category domain="yst_prominent_words" nicename="find-the-line"><![CDATA[find the line]]></category>
		<category domain="yst_prominent_words" nicename="header-file"><![CDATA[header file]]></category>
		<category domain="yst_prominent_words" nicename="inside-the-build-cs"><![CDATA[inside the build.cs]]></category>
		<category domain="yst_prominent_words" nicename="inside-the-build-cs-find"><![CDATA[inside the build.cs find]]></category>
		<category domain="yst_prominent_words" nicename="json"><![CDATA[json]]></category>
		<category domain="yst_prominent_words" nicename="myproject-myproject-build-cs"><![CDATA[myproject myproject.build.cs]]></category>
		<category domain="yst_prominent_words" nicename="projects-build-cs"><![CDATA[project's build.cs]]></category>
		<category domain="yst_prominent_words" nicename="projects-build-cs-file"><![CDATA[project's build.cs file]]></category>
		<category domain="yst_prominent_words" nicename="servercallback-and-servererror"><![CDATA[servercallback and servererror]]></category>
		<category domain="yst_prominent_words" nicename="servercallback-and-servererror-functions"><![CDATA[servercallback and servererror functions]]></category>
		<category domain="yst_prominent_words" nicename="source-myproject"><![CDATA[source myproject]]></category>
		<category domain="yst_prominent_words" nicename="source-myproject-myproject-build-cs"><![CDATA[source myproject myproject.build.cs]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Rewards Handling</title>
		<link>https://staging.getbraincloud.com/apidocs/api-modules/gamification/rewards/</link>
		<pubDate>Thu, 05 Nov 2015 18:09:08 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=2156</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Rewards are awarded as a result of server events triggered by the client application.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In general, a reward can consist of any or all of the following:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>experience points</li><li>virtual currency</li><li>player statistics</li><li>global game statistics</li><li>an achievement</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The valid components of a reward are dictated by the server design of the reference data entities. Of the reward components above, all except global game statistics are awarded directly to the player. The global game statistics component is applied to the statistics tracked by the game itself and can affect the entire game and all players in the game.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Rewards are awarded as a result of the client application triggering certain server events. Awarding the rewards associated with the server event may result in new player accomplishments (milestone achievements, quest completions, and higher experience levels).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Accomplishments can also have rewards associated with them. When rewards are awarded by the server, the player’s state is iteratively evaluated to see if the reward has resulted in any further rewards. These rewards are processed until no further rewards result.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>How to handle rewards</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Several brainCloud APIs can return rewards to the user.&nbsp;App developers can choose to present the rewards to the player as they occur. In order to do this, rewards can be handled in two ways:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Parsed directly in the API callback return JSON</li><li>Using the RewardsCallback interface</li></ol>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Handling Rewards in the API callback</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To handle rewards in the API callback, you first need to know which API calls will generate rewards. The list of APIs is as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" aria-label=" (opens in a new tab)" href="https://staging.getbraincloud.com/apidocs/apiref/#capi-auth" target="_blank">BrainCloudAuthentication - all of the "Authenticate" APIs</a></li><li><a rel="noreferrer noopener" aria-label=" (opens in a new tab)" href="https://staging.getbraincloud.com/apidocs/apiref/#capi-playerstats-incrementplayerstats" target="_blank">BrainCloudPlayerStatistics.IncrementPlayerStats()</a></li><li><a rel="noreferrer noopener" aria-label=" (opens in a new tab)" href="https://staging.getbraincloud.com/apidocs/apiref/#capi-playerstats-incrementexperiencepoints" target="_blank">BrainCloudPlayerStatistics.IncrementExperiencePoints()</a></li><li><a rel="noreferrer noopener" aria-label=" (opens in a new tab)" href="https://staging.getbraincloud.com/apidocs/apiref/#capi-playerstatsevent-triggerplayerstatisticsevent" target="_blank">BrainCloudPlayerStatisticsEvent.TriggerPlayerStatisticsEvent()</a></li><li><a href="https://staging.getbraincloud.com/apidocs/apiref/#capi-playerstatsevent-triggerplayerstatisticsevents" target="_blank" rel="noreferrer noopener" aria-label=" (opens in a new tab)">BrainCloudPlayerStatisticsEvent.TriggerPlayerStatisticsEvents()</a></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Note that although normally you wouldn't expect to get rewards in an Authenticate call, there are situations where rewards may be present. For instance, rewards may trigger on a global statistic which has incremented since the last time the user logged in. Or perhaps a cloud script on the server has modified the player's data in some way. In these cases, the rewards are returned in the authenticate call.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Rewards JSON&nbsp;format</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The general (quasi-json) output of a method that returns rewards is as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>experiencePoints - The user's current number of experience points</li><li>xpCapped - Whether their XP is capped</li><li><strong>rewardDetails</strong> - complex structure that contains metadata about the rewards that have been triggered. This gives you the structured rewards as they've been configured in brainCloud. <ul><li>milestones -  array of milestones that were awarded (metadata) <ul><li>rewards - rewards that are given to the player when this milestone is awarded <ul><li>achievement</li><li>experiencePoints</li><li>currency</li><li>globalStatistics</li><li>statistics </li></ul></li><li>questId - Either the quest id this milestone is attached to or null if it's a global (non-quest) milestone</li><li>milestoneId - The id of the milestone </li></ul></li><li>quests - array of quests that were awarded (metadata) <ul><li>rewards - similar to the milestone structure above</li><li>questId - The id of the quest </li></ul></li><li>xp <ul><li><strong>experiencePoints - ???</strong></li><li>experienceLevels - array of the experience levels that were awarded (metadata) <ul><li>level - the experience level</li><li>reward - similar to the milestone structure above   </li></ul></li></ul></li></ul></li><li><strong>rewards</strong> - complex structure that contains the amalgamated rewards that have been triggered. For instance if two milestones are awarded which each pay out 50 gold currency, the rewards field will contain just one entry for currency of 100 gold.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><em>Note that the Authenticate API JSON puts all of the above information into a "rewards" element. </em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Below is an example JSON return that rewards one milestone, one quest, one xp level, and some stats/xp/currency.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
 "status": 200,
 "data": {
  "experiencePoints": 1000,
  "xpCapped": false,
  "rewardDetails": {
   "milestones": [
    {
     "rewards": {
      "achievement": "testAchievement02"
     },
     "questId": "quest100",
     "milestoneId": "2"
    }
   ],
   "quests": [
    {
     "rewards": {
      "experiencePoints": 1000,
      "achievement": "testAchievement01"
     },
     "questId": "quest100"
    }
   ],
   "xp": {
    "experiencePoints": 1000,
    "experienceLevels": [
     {
      "level": 2,
      "reward": {
       "currency": {
        "gold": 1500
       }
      }
     }
    ]
   }
  },
  "rewards": {
   "experiencePoints": 1000,
   "experienceLevels": [
    2
   ],
   "milestonesAchieved": [
    "2"
   ],
   "questsCompleted": [
    "quest100"
   ],
   "playerAchievements": [
    "testAchievement02",
    "testAchievement01"
   ],
   "statistics": {
    "completeQuest100": 1
   },
   "currency": {
    "gold": 1555
   }
  },
  "experienceLevel": 2,
  "currency": {
   "credits": {
    "purchased": 0,
    "balance": 90,
    "consumed": 0,
    "awarded": 90
   },
   "gold": {
    "purchased": 0,
    "balance": 8225,
    "consumed": 0,
    "awarded": 8225
   }
  },
  "statistics": {
   "completeQuest100": 1
  }
 }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":3} -->
<h3>Handling Rewards in the RewardsCallback interface</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>An alternative to handling rewards directly in the API callback is to attach a rewards callback to the brainCloudClient. By attaching a rewards callback handler, you will receive callbacks whenever a reward is returned in any of the above API methods.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Attaching The Rewards Callback</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>See the <a href="/apidocs/apiref/#capi-client-registerrewardcallback" target="_blank" rel="noopener noreferrer">RegisterRewardCallback</a>&nbsp;and <a href="/apidocs/apiref/#capi-client-deregisterrewardcallback" target="_blank" rel="noopener noreferrer">DeregisterRewardCallback</a>&nbsp;methods in the BrainCloudClient class.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Reward Callback JSON format</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The Reward Callback JSON contains extra information that allows you to determine from which API call a reward has been issued. Note that the apiRewards member is an array - it's possible to receive multiple rewards in a single message bundle from the server.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
  "apiRewards": [
    "service": "playerStatistics",
    "operation": "UPDATE",
    "rewards": {
      // the reward JSON information as defined above
      // so for instance "rewards" and "rewardDetails"
      // members would be at this level
    } 
  ] 
}</pre>
<!-- /wp:enlighter/codeblock -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2156</wp:post_id>
		<wp:post_date><![CDATA[2015-11-05 13:09:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-05 18:09:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[rewards]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>112</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="api-callback"><![CDATA[api callback]]></category>
		<category domain="yst_prominent_words" nicename="awarded"><![CDATA[awarded]]></category>
		<category domain="yst_prominent_words" nicename="awarded-as-a-result"><![CDATA[awarded as a result]]></category>
		<category domain="yst_prominent_words" nicename="awarded-metadata"><![CDATA[awarded metadata]]></category>
		<category domain="yst_prominent_words" nicename="callback"><![CDATA[callback]]></category>
		<category domain="yst_prominent_words" nicename="client-application"><![CDATA[client application]]></category>
		<category domain="yst_prominent_words" nicename="directly-in-the-api"><![CDATA[directly in the api]]></category>
		<category domain="yst_prominent_words" nicename="directly-in-the-api-callback"><![CDATA[directly in the api callback]]></category>
		<category domain="yst_prominent_words" nicename="game-statistics"><![CDATA[game statistics]]></category>
		<category domain="yst_prominent_words" nicename="global-game"><![CDATA[global game]]></category>
		<category domain="yst_prominent_words" nicename="global-game-statistics"><![CDATA[global game statistics]]></category>
		<category domain="yst_prominent_words" nicename="handling-rewards"><![CDATA[handling rewards]]></category>
		<category domain="yst_prominent_words" nicename="reward"><![CDATA[reward]]></category>
		<category domain="yst_prominent_words" nicename="reward-callback-json"><![CDATA[reward callback json]]></category>
		<category domain="yst_prominent_words" nicename="rewards-callback"><![CDATA[rewards callback]]></category>
		<category domain="yst_prominent_words" nicename="rewards-in-the-api"><![CDATA[rewards in the api]]></category>
		<category domain="yst_prominent_words" nicename="rewards-in-the-api-callback"><![CDATA[rewards in the api callback]]></category>
		<category domain="yst_prominent_words" nicename="server-events"><![CDATA[server events]]></category>
		<category domain="yst_prominent_words" nicename="similar-to-the-milestone"><![CDATA[similar to the milestone]]></category>
		<category domain="yst_prominent_words" nicename="similar-to-the-milestone-structure"><![CDATA[similar to the milestone structure]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Unreal Tutorials</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/unreal-tutorials/</link>
		<pubDate>Thu, 05 Nov 2015 20:56:41 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=2206</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>The brainCloud&nbsp;Unreal plugin has been designed to integrate seamlessly with both native C++ and the new Blueprints visual scripting system.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As part of our Unreal&nbsp;package we include:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Unreal Engine 4&nbsp;C++ libraries</li><li>Full&nbsp;support for the&nbsp;Blueprints Visual Scripting system</li><li>Support for the&nbsp;Online Subsystem interface (in-development)</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The following tutorials are available:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="/apidocs/tutorials/unreal-tutorials/setting-up-the-braincloud-plugin/">Setting up the brainCloud plugin</a></li><li><a href="/apidocs/tutorials/unreal-tutorials/getting-started-with-blueprints/">Getting Started With Blueprints</a></li><li><a href="/apidocs/tutorials/unreal-tutorials/getting-started-with-c/">Getting Started With C++</a></li><li><a href="/apidocs/tutorials/unreal-tutorials/getting-started-with-the-online-subsystem/">Getting Started With OnlineSubsystem</a></li><li><a href="/apidocs/tutorials/unreal-tutorials/building-the-plugin-for-older-versions-of-unreal/">Building The Plugin For Older Versions of Unreal</a></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The following examples are available:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="/apidocs/tutorials/unreal-tutorials/tappy-chicken-example-game/">Tappy Chicken Example Game</a></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2206</wp:post_id>
		<wp:post_date><![CDATA[2015-11-05 15:56:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-05 20:56:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[unreal-tutorials]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>63</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="blueprints"><![CDATA[blueprints]]></category>
		<category domain="yst_prominent_words" nicename="blueprints-visual"><![CDATA[blueprints visual]]></category>
		<category domain="yst_prominent_words" nicename="blueprints-visual-scripting"><![CDATA[blueprints visual scripting]]></category>
		<category domain="yst_prominent_words" nicename="blueprints-visual-scripting-system"><![CDATA[blueprints visual scripting system]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="getting-started"><![CDATA[getting started]]></category>
		<category domain="yst_prominent_words" nicename="plugin"><![CDATA[plugin]]></category>
		<category domain="yst_prominent_words" nicename="scripting"><![CDATA[scripting]]></category>
		<category domain="yst_prominent_words" nicename="scripting-system"><![CDATA[scripting system]]></category>
		<category domain="yst_prominent_words" nicename="started"><![CDATA[started]]></category>
		<category domain="yst_prominent_words" nicename="support"><![CDATA[support]]></category>
		<category domain="yst_prominent_words" nicename="system"><![CDATA[system]]></category>
		<category domain="yst_prominent_words" nicename="unreal"><![CDATA[unreal]]></category>
		<category domain="yst_prominent_words" nicename="visual"><![CDATA[visual]]></category>
		<category domain="yst_prominent_words" nicename="visual-scripting"><![CDATA[visual scripting]]></category>
		<category domain="yst_prominent_words" nicename="visual-scripting-system"><![CDATA[visual scripting system]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Releases</title>
		<link>https://staging.getbraincloud.com/apidocs/releases/</link>
		<pubDate>Mon, 30 Nov 2015 19:23:09 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=2287</guid>
		<description></description>
		<content:encoded><![CDATA[brainCloud is rapidly evolving to meet the needs of our development community. Software updates occur regularly at a pace of every month or two. We work hard to ensure that new features and fixes are additive, and do not break existing apps in the field. Where API methods need to be changed / discontinued, we give minimum 90 calendar days notice.
<h3>Recent Updates</h3>
Details on the most recent updates:

[display-posts category="Release History" include_excerpt="true" include_date="true" posts_per_page="50"]

&nbsp;
<h2></h2>
<!--?php the_excerpt(); ?-->
<!--?php endforeach; ?-->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2287</wp:post_id>
		<wp:post_date><![CDATA[2015-11-30 14:23:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-30 19:23:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[releases]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>42</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="announce-the-availability"><![CDATA[announce the availability]]></category>
		<category domain="yst_prominent_words" nicename="announce-the-availability-of-braincloud"><![CDATA[announce the availability of braincloud]]></category>
		<category domain="yst_prominent_words" nicename="availability-of-braincloud"><![CDATA[availability of braincloud]]></category>
		<category domain="yst_prominent_words" nicename="cloud-code"><![CDATA[cloud code]]></category>
		<category domain="yst_prominent_words" nicename="features"><![CDATA[features]]></category>
		<category domain="yst_prominent_words" nicename="features-in-this-release"><![CDATA[features in this release]]></category>
		<category domain="yst_prominent_words" nicename="features-in-this-release-include"><![CDATA[features in this release include]]></category>
		<category domain="yst_prominent_words" nicename="fixes-and-improvements"><![CDATA[fixes and improvements]]></category>
		<category domain="yst_prominent_words" nicename="fixes-and-improvements-portal"><![CDATA[fixes and improvements portal]]></category>
		<category domain="yst_prominent_words" nicename="fixes-and-improvements-portal-features"><![CDATA[fixes and improvements portal features]]></category>
		<category domain="yst_prominent_words" nicename="improvements-portal-features"><![CDATA[improvements portal features]]></category>
		<category domain="yst_prominent_words" nicename="include-api-features"><![CDATA[include api features]]></category>
		<category domain="yst_prominent_words" nicename="misc-fixes-and-improvements"><![CDATA[misc fixes and improvements]]></category>
		<category domain="yst_prominent_words" nicename="misc-fixes-and-improvements-portal"><![CDATA[misc fixes and improvements portal]]></category>
		<category domain="yst_prominent_words" nicename="new-features-in-this-release"><![CDATA[new features in this release]]></category>
		<category domain="yst_prominent_words" nicename="pleased-to-announce"><![CDATA[pleased to announce]]></category>
		<category domain="yst_prominent_words" nicename="pleased-to-announce-the-availability"><![CDATA[pleased to announce the availability]]></category>
		<category domain="yst_prominent_words" nicename="release-include-api"><![CDATA[release include api]]></category>
		<category domain="yst_prominent_words" nicename="release-include-api-features"><![CDATA[release include api features]]></category>
		<category domain="yst_prominent_words" nicename="release-include-api-features-global"><![CDATA[release include api features global]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>General API Tutorials</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/general-api-tutorials/</link>
		<pubDate>Tue, 26 Jan 2016 20:52:53 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=2468</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Listed below are tutorials that cover certain brainCloud APIs. They are geared towards a general understanding of the API and are useful for developers using any of the client SDKs.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="https://staging.getbraincloud.com/apidocs/tutorials/general-api-tutorials/file-upload-api/">BrainCloudFile - File Upload API</a></li><li><a href="https://staging.getbraincloud.com/apidocs/tutorials/general-api-tutorials/error-handling/">Error Handling</a></li><li><a href="https://staging.getbraincloud.com/apidocs/tutorials/general-api-tutorials/network-error-message-caching/">Network Error Message Caching</a></li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2468</wp:post_id>
		<wp:post_date><![CDATA[2016-01-26 15:52:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-26 20:52:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[general-api-tutorials]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>63</wp:post_parent>
		<wp:menu_order>-10</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="api"><![CDATA[api]]></category>
		<category domain="yst_prominent_words" nicename="error"><![CDATA[error]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>File Upload API</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/general-api-tutorials/file-upload-api/</link>
		<pubDate>Tue, 26 Jan 2016 20:53:21 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=2470</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>The File Upload API allows brainCloud users to upload files to their individual accounts. These files can be private to the user, or shareable (public) where anyone with the URL can access the file.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Listing the uploaded files</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In order to list the uploaded files, make use of this API:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="/apiref/#capi-file-listuserfiles" target="_blank" rel="noopener noreferrer">BrainCloudFile.ListUserFiles</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The API will return JSON similar to this:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
  "status": 200,
  "data": {
  "fileList": [
    {
     "updatedAt": 1452603368201,
     "uploadedAt": 1452603368201,
     "fileSize": 85470,
     "shareable": true,
     "createdAt": 1452603368201,
     "profileId": "bf8a1433-62d2-448e-b396-f3dbffff44",
     "gameId": "99999",
     "path": "test2",
     "filename": "testup.dat",
     "downloadUrl": "https://sharedprod.braincloudservers.com/s3/bc/g/99999/u/bf8a1433-62d2-448e-b396-f3dbffff44/f/test2/testup.dat",
     "cloudLocation": "bc/g/99999/u/bf8a1433-62d2-448e-b396-f3dbffff44/f/test2/testup.dat"
    }
   ]
  }
 }
</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Notice that there is a "downloadUrl" parameter. This is the URL to download the file with one caveat: if you are downloading a private file (e.g. shareable set to false) then you need to append the sessionId to the URL as a query parameter like so:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>https://url-to-get-file?sessionId=1234</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can retrieve the sessionId from the <a href="/apiref/#capi-client-getsessionid" target="_blank" rel="noopener noreferrer">BrainCloudClient.GetSessionId</a> method once you've authenticated with brainCloud.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Starting an Upload</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To start uploading a file use this API</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="/apiref/#capi-file-uploadfile(jsonly)" target="_blank" rel="noopener noreferrer">BrainCloudFile.UploadFile</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This method will send a request to the server to prepare for an upload. On success, the client SDK will begin to send the file. The preparation of an upload will return JSON similar to this:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
  "status": 200,
  "data": {
   "fileDetails": {
    "updatedAt": 1452616408147,
    "fileSize": 100,
    "fileType": "User",
    "expiresAt": 1452702808146,
    "shareable": true,
    "uploadId": "cf9a075c-587e-4bd1-af0b-eab1a79b958f",
    "createdAt": 1452616408147,
    "profileId": "bf8a1433-62d2-448e-b396-f3dbffff44",
    "gameId": "99999",
    "path": "dir1/dir2",
    "filename": "filename",
    "replaceIfExists": true,
    "cloudPath": "bc/g/99999/u/bf8a1433-62d2-448e-b396-f3dbffff44/f/dir1/dir2/filename"
   }
  }
 }</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Note the uploadId parameter. While the file is being uploaded, you will need this uploadId string in order to retrieve statistics on the upload or cancel it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Again, this success callback only indicates that an upload is about to take place. To be notified when an upload has completed, you will need to register a handler.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Register File Upload Callback</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In order to receive notifications when file uploads complete or fail, you need to register a file upload callback handler. To register your File Upload callback see these two APIs:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"className":"p1"} -->
<p class="p1"><span class="s1"><a href="/apiref/#capi-client-registerfileuploadcallback" target="_blank" rel="noopener noreferrer">BrainCloudClient.RegisterFileUploadCallback</a></span></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"className":"p1"} -->
<p class="p1"><a href="/apiref/#capi-client-deregisterfileuploadcallback" target="_blank" rel="noopener noreferrer">BrainCloudClient.DeregisterFileUploadCallback</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"className":"p1"} -->
<p class="p1">Once you've registered your FileUploadCallback handler, you will receive notifications from these two methods:</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4,"className":"p1"} -->
<h4 class="p1"><span class="s1">1) fileUploadCompleted</span></h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Indicates a file has uploaded successfully. Parameters include:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>fileUploadId - the upload id of the file uploaded</li><li>jsonResponse - the details of the uploaded file similar to this:</li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
 "status": 200,
 "data": {
  "fileList": [
    {
      "updatedAt": 1452603368201,
      "uploadedAt": null,
      "fileSize": 85470,
      "shareable": true,
      "createdAt": 1452603368201,
      "profileId": "bf8a1433-62d2-448e-b396-f3dbffff44",
      "gameId": "99999",
      "path": "test2",
      "filename": "testup.dat",
      "downloadUrl": "https://sharedprod.braincloudservers.com/s3/bc/g/99999/u/bf8a1433-62d2-448e-b396-f3dbffff44/f/test2/testup.dat"
      "cloudLocation": "bc/g/99999/u/bf8a1433-62d2-448e-b396-f3dbffff44/f/test2/testup.dat"
     }
    ]
  }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":4,"className":"p1"} -->
<h4 class="p1"><span class="s1">2) fileUploadFailed</span></h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Indicates a file upload has failed. Parameters include:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>fileUploadId - the upload id of the file uploaded</li><li>statusCode - The HTTP status of the error</li><li>reasonCode - The reason code of the error</li><li>jsonResponse - The JSON response from the server similar to the following:</li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
  "status": 403,
  "reason_code": 40300,
  "status_message": "Message describing failure",
  "severity": "ERROR"
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":3,"className":"p1"} -->
<h3 class="p1">In Progress Upload Statistics</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>While a file is being uploaded, you can query the BrainCloudFile API for the following information:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="/apiref/#capi-file-getuploadprogress" target="_blank" rel="noopener noreferrer">BrainCloudFile.GetUploadProgress</a> - returns a number from 0.0 to 1.0 indicating how far along the upload is</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="/apiref/#capi-file-getuploadbytestransferred" target="_blank" rel="noopener noreferrer">BrainCloudFile.GetUploadBytesTransferred</a> - returns bytes that have been transferred</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="/apiref/#capi-file-getuploadtotalbytestotransfer" target="_blank" rel="noopener noreferrer">BrainCloudFile.GetUploadTotalBytesToTransfer</a> - returns total number of bytes to be transferred</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Cancelling an Upload</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To cancel an upload in progress, you can use this BrainCloudFile API method:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="/apiref/#capi-file-cancelupload" target="_blank" rel="noopener noreferrer">BrainCloudFile.CancelUpload</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When an upload is canceled, the <strong>fileUploadFailed</strong> callback handler will be called with:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Http status of 900 (HTTP_CUSTOM)</li><li>Reason code of 90100 (CLIENT_UPLOAD_FILE_CANCELLED)</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Configure Upload Timeouts</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There are also several methods on the BrainCloudClient class which allow you to configure upload transfer timeouts:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="/apiref/#capi-client-setuploadlowtransferratetimeout" target="_blank" rel="noopener noreferrer">BrainCloudClient.SetUploadLowTransferRateTimeout</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="/apiref/#capi-client-setuploadlowtransferratethreshold" target="_blank" rel="noopener noreferrer">BrainCloudClient.SetUploadLowTransferRateThreshold</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that if an upload times out you will receive a <strong>fileUploadFailed</strong> callback with:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Http status of 900 (HTTP_CUSTOM)</li><li>Reason code of 90101 (CLIENT_UPLOAD_FILE_TIMED_OUT)</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Deleting an Uploaded File</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To delete uploaded files you can use these two APIs:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="/apiref/#capi-file-deleteuserfile">BrainCloudFile.DeleteUserFile</a> - to delete a single file</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="/apiref/#capi-file-deleteuserfiles">BrainCloudFile.DeleteUserFiles</a> - to delete multiple files</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2470</wp:post_id>
		<wp:post_date><![CDATA[2016-01-26 15:53:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-26 20:53:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[file-upload-api]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>2468</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="callback-handler"><![CDATA[callback handler]]></category>
		<category domain="yst_prominent_words" nicename="file-upload"><![CDATA[file upload]]></category>
		<category domain="yst_prominent_words" nicename="file-upload-callback"><![CDATA[file upload callback]]></category>
		<category domain="yst_prominent_words" nicename="fileuploadid-the-upload"><![CDATA[fileuploadid the upload]]></category>
		<category domain="yst_prominent_words" nicename="fileuploadid-the-upload-id"><![CDATA[fileuploadid the upload id]]></category>
		<category domain="yst_prominent_words" nicename="http-status"><![CDATA[http status]]></category>
		<category domain="yst_prominent_words" nicename="http-status-of-900"><![CDATA[http status of 900]]></category>
		<category domain="yst_prominent_words" nicename="http-status-of-900-http_custom"><![CDATA[http status of 900 http_custom]]></category>
		<category domain="yst_prominent_words" nicename="id-of-the-file"><![CDATA[id of the file]]></category>
		<category domain="yst_prominent_words" nicename="id-of-the-file-uploaded"><![CDATA[id of the file uploaded]]></category>
		<category domain="yst_prominent_words" nicename="indicates-a-file"><![CDATA[indicates a file]]></category>
		<category domain="yst_prominent_words" nicename="reason-code"><![CDATA[reason code]]></category>
		<category domain="yst_prominent_words" nicename="receive-notifications"><![CDATA[receive notifications]]></category>
		<category domain="yst_prominent_words" nicename="return-json"><![CDATA[return json]]></category>
		<category domain="yst_prominent_words" nicename="status-of-900"><![CDATA[status of 900]]></category>
		<category domain="yst_prominent_words" nicename="status-of-900-http_custom"><![CDATA[status of 900 http_custom]]></category>
		<category domain="yst_prominent_words" nicename="upload-callback"><![CDATA[upload callback]]></category>
		<category domain="yst_prominent_words" nicename="upload-id-of-the-file"><![CDATA[upload id of the file]]></category>
		<category domain="yst_prominent_words" nicename="uploaded"><![CDATA[uploaded]]></category>
		<category domain="yst_prominent_words" nicename="uploaded-files"><![CDATA[uploaded files]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_3a99a7aa2d1eec42363356e0c4e785c1]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_35f5ec6eb4ab49c518adbf1ef283b82d]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Android Java Tutorials</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/android-java-tutorials/</link>
		<pubDate>Thu, 28 Jan 2016 14:51:53 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=2503</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Below are the tutorials for users developing on Android using Java.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="/apidocs/getting-started-with-android-java/">Getting Started with Android Java</a> - how to get your project setup and doing a basic email authentication</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2503</wp:post_id>
		<wp:post_date><![CDATA[2016-01-28 09:51:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-28 14:51:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[android-java-tutorials]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>63</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="android"><![CDATA[android]]></category>
		<category domain="yst_prominent_words" nicename="java"><![CDATA[java]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Getting Started with Android Java</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/android-java-tutorials/getting-started-with-android-java/</link>
		<pubDate>Thu, 28 Jan 2016 14:50:38 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=2505</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>For this tutorial, we will assume that you are using Android Studio to develop a Java application for the Android platform. You should have a project created that can run on the device or emulator before proceeding.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Integrate brainCloud module</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Download the brainCloud Android Java client library from the <a rel="noopener noreferrer" href="https://portal.braincloudservers.com/" target="_blank">brainCloud portal</a> client libs section</li><li>Unzip the client library somewhere on your computer but *not* in your project folder</li><li>Open Android Studio if not open already</li><li>Select File | New... | Import Module...</li><li>Choose the unzipped "brainCloud" folder</li><li>You should see this dialog pop up. Hit Finish<br><img width="573" height="341" class="alignnone size-full wp-image-2507" src="/apidocs/wp-content/uploads/2016/01/2016-01-27_15-22-08.png" alt="2016-01-27_15-22-08"></li><li>You should now see a "brainCloud" module in your project</li><li>Right-click your "app" module and select "Open Module Settings"</li><li>Navigate to the Dependencies tab and click the + icon at the bottom to add a "Module dependency"<br><figure><a href="/apidocs/wp-content/uploads/2016/01/2016-01-27_15-23-23.png"><img width="730" height="624" class="alignnone size-full wp-image-2510" src="/apidocs/wp-content/uploads/2016/01/2016-01-27_15-23-23.png" alt="2016-01-27_15-23-23"></a></figure></li><li>Select the "brainCloud" module and hit OK<br><figure><a href="/apidocs/wp-content/uploads/2016/01/2016-01-27_15-23-35.png"><img width="486" height="276" class="alignnone size-full wp-image-2511" src="/apidocs/wp-content/uploads/2016/01/2016-01-27_15-23-35.png" alt="2016-01-27_15-23-35"></a></figure></li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Initializing brainCloud and callbacks</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In order to use brainCloud you will need to initialize the client with your game id and secret (both found on the <a href="https://portal.braincloudservers.com/" target="_blank" rel="noopener noreferrer">brainCloud portal</a> on the Core App Info | Application Ids page). In this example, we will add all of our code to the MainActivity.java file in our app module.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>First set up the imports</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>import com.bitheads.braincloud.client.*;<br>import com.bitheads.braincloud.services.*;</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Initialize the BrainCloudClient</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In the onCreate method of our MainActivity java file, we initialize the client. We also enable logging so we can see the JSON going to/from the server. The logs will show up in Android Studio under "logcat".</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"java"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="java" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">protected void onCreate(Bundle savedInstanceState)
{
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    // initialize brainCloud with your gameId, secret, and game version
    BrainCloudClient.getInstance().initialize("your-game-id", "your-secret", "1.0.0");
// also enable logging
BrainCloudClient.getInstance().enableLogging(true);</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":3} -->
<h3>Run the callback update regularly</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The next step is to ensure we run the BrainCloudClient's update() method regularly. The brainCloud update method will check for any received messages from brainCloud, and fire user-defined callbacks in response to those messages. Every API call takes in an "IServerCallback" parameter which allows you to define a callback handler.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are two ways to call the BrainCloudClient update method regularly: either by running the callbacks on the main UI thread or by running them on a separate thread.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Running update on the main thread<del></del></h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In our method below, a timer is created to tick regularly from the main thread of the application. This means that the UI can directly be manipulated within the user callback. Care must be taken not to block the callback however as the UI will lock up.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"java"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="java" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">// update brainCloud every second after initialize
new CountDownTimer(10000, 1000) {
    public void onTick(long millisUntilFinished) {
        BrainCloudClient.getInstance().update();
    }

    public void onFinish() {
        start(); // just restart the timer
    }
}.start();</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":4} -->
<h4>Running update on a separate thread</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>An alternative method is to call the update method on a separate thread. This has the advantage that the  UI will never hang if a callback takes a long time. The downside is that interactions with the UI of your app will need to be marshaled to the main application thread.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"java"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="java" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">    // Set up the brainCloud callback handler.
    // Callbacks will execute on this thread.
    Thread t = new Thread(new Runnable () {
        public void run()
        {
            while (true)
            {
                BrainCloudClient.getInstance().update();
                try
                {
                    Thread.sleep(300);
                } catch (InterruptedException ie)
                {
                    ie.printStackTrace();
                }
            }
        }
    });
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":4} -->
<h4>&nbsp;</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Whichever method suits your application best is up to you. For simplicity, running the update on the main thread is the quickest way to get started. Also important to note is that the BrainCloud update method is very lightweight and should not cause any issues with blocking the UI.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Authenticating</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To get started, you will need to authenticate with brainCloud. In our example, we will run an email authentication with hardcoded data from an onClick of a button in the app.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Set up server callback</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>First, you'll need to implement the callback handler. In our case, we implement the IServerCallback interface in our MainActivity java file.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Add the "implements IServerCallback" to the MainActivity class</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Then add the two callback functions to the class:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"java"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="java" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">public void serverCallback(ServiceName serviceName, ServiceOperation serviceOperation, JSONObject jsonData)
{
    if (serviceName.equals(ServiceName.authenticationV2)
        &amp;&amp; serviceOperation.equals(ServiceOperation.AUTHENTICATE))
    {
        // success callback from authenticate - we're now authenticated!
    }
}
    
public void serverError(ServiceName serviceName, ServiceOperation serviceOperation, int statusCode, int reasonCode, String jsonError)
{
    if (serviceName.equals(ServiceName.authenticationV2)
        &amp;&amp; serviceOperation.equals(ServiceOperation.AUTHENTICATE))
    {
        // error callback from authenticate
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":3} -->
<h3>Email authentication</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Lastly, we'll set up a function which will get called on a login button click (you'll have to set this up in your Android project accordingly). This function will authenticate with brainCloud passing in the user's email and password. In the example below, we hardcode these values.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"java"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="java" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">public void onLoginClick(View v)
{
    BrainCloudClient.getInstance().getAuthenticationService()
            .authenticateEmailPassword("me@somewhere.com", "pwd", true, this);
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>See the <a href="/apidocs/apiref/#capi-auth-authenticateemailpassword" target="_blank" rel="noopener noreferrer">BrainCloudAuthentication.AuthenticateEmailPassword</a> API docs for more info.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you enabled logging (see initialize brainCloud step above) you should be able to see JSON being sent to the server, and JSON being returned from the server as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">#BCC OUTGOING: {
  "messages": [
    {
      "service": "authenticationV2",
      "operation": "AUTHENTICATE",
      "data": {
        "externalId": "me@somewhere.com",
        "authenticationToken": "pwd",
        "authenticationType": "Email",
        "forceCreate": true,
        "profileId": "",
        "gameId": "9999",
        "releasePlatform": "ANG",
        "upgradeAppId": "1.0.0",
        "version": "2.20.0",
        "countryCode": "US",
        "languageCode": "en",
        "timeZoneOffset": -5
      }
    }
  ],
  "gameId": "9999",
  "sessionId": "q3ddmrers7504rhrv4t4d9bt6g",
  "packetId": 1
}
#BCC INCOMING (200): {
  "packetId": 1,
  "responses": [
    {
      "status": 200,
      "data": {
        "vcPurchased": 0,
        "experiencePoints": 0,
        "refundCount": 0,
        "playerSessionExpiry": 1200,
        "server_time": 1453990136292,
        "experienceLevel": 0,
        "abTestingId": 19,
        "statistics": {},
        "currency": {},
        "id": "579c983f-e97b-4474-9cf4-441ec557db1e",
        "createdAt": 1453990116153,
        "profileId": "579c983f-e355-4474-9cf4-4926c557db1e",
        "newUser": "false",
        "xpCapped": false,
        "sent_events": [],
        "timeZoneOffset": -5,
        "playerName": "",
        "vcClaimed": 0,
        "parentProfileId": null,
        "rewards": {
          "rewardDetails": {},
          "rewards": {},
          "currency": {}
        },
        "countryCode": "US",
        "loginCount": 2,
        "emailAddress": "email",
        "previousLogin": 1453990116294,
        "incoming_events": [],
        "lastLogin": 1453990136277,
        "languageCode": "en",
        "sessionId": "f828opj5p7huqe482e28ec75i7",
        "amountSpent": 0
      }
    }
  ]
}</pre>
<!-- /wp:enlighter/codeblock -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2505</wp:post_id>
		<wp:post_date><![CDATA[2016-01-28 09:50:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-28 14:50:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[getting-started-with-android-java]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>2503</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="android-studio"><![CDATA[android studio]]></category>
		<category domain="yst_prominent_words" nicename="app-module"><![CDATA[app module]]></category>
		<category domain="yst_prominent_words" nicename="authenticate-with-braincloud"><![CDATA[authenticate with braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-module"><![CDATA[braincloud module]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-portal"><![CDATA[braincloud portal]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-update"><![CDATA[braincloud update]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-update-method"><![CDATA[braincloud update method]]></category>
		<category domain="yst_prominent_words" nicename="callback-handler"><![CDATA[callback handler]]></category>
		<category domain="yst_prominent_words" nicename="client-library"><![CDATA[client library]]></category>
		<category domain="yst_prominent_words" nicename="initialize-the-client"><![CDATA[initialize the client]]></category>
		<category domain="yst_prominent_words" nicename="java-file"><![CDATA[java file]]></category>
		<category domain="yst_prominent_words" nicename="mainactivity-java"><![CDATA[mainactivity java]]></category>
		<category domain="yst_prominent_words" nicename="mainactivity-java-file"><![CDATA[mainactivity java file]]></category>
		<category domain="yst_prominent_words" nicename="method"><![CDATA[method]]></category>
		<category domain="yst_prominent_words" nicename="separate-thread"><![CDATA[separate thread]]></category>
		<category domain="yst_prominent_words" nicename="update"><![CDATA[update]]></category>
		<category domain="yst_prominent_words" nicename="update-method"><![CDATA[update method]]></category>
		<category domain="yst_prominent_words" nicename="update-method-regularly"><![CDATA[update method regularly]]></category>
		<category domain="yst_prominent_words" nicename="update-on-the-main-thread"><![CDATA[update on the main thread]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Tappy Chicken Example Game</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/unreal-tutorials/tappy-chicken-example-game/</link>
		<pubDate>Fri, 29 Jan 2016 21:04:57 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=2528</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>For this example, we've taken Epic's Tappy Chicken example project and integrated brainCloud in place of the existing <g class="gr_ gr_5 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace" id="5" data-gr-id="5">platform specific</g> online features (Google Play / Game Center). This demonstrates how brainCloud can be easily integrated into existing <g class="gr_ gr_6 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Punctuation only-del replaceWithoutSep" id="6" data-gr-id="6">projects,</g> and acts as a detailed example of how the brainCloud Blueprint system works.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"left","width":160,"height":240,"linkDestination":"custom"} -->
<div class="wp-block-image"><figure class="alignleft is-resized"><a href="/apidocs/wp-content/uploads/2016/01/BC_TappyChicken_Auth.png" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2016/01/BC_TappyChicken_Auth.png" alt="BC_TappyChicken_Auth" width="160" height="240"/></a></figure></div>
<!-- /wp:image -->

<!-- wp:image {"align":"right","width":160,"height":240,"linkDestination":"custom"} -->
<div class="wp-block-image"><figure class="alignright is-resized"><a href="/apidocs/wp-content/uploads/2016/01/BC_TappyChicken_LB.png" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2016/01/BC_TappyChicken_LB.png" alt="BC_TappyChicken_LB" width="160" height="240"/></a></figure></div>
<!-- /wp:image -->

<!-- wp:image {"align":"center","width":160,"height":240,"linkDestination":"custom"} -->
<div class="wp-block-image"><figure class="aligncenter is-resized"><a href="/apidocs/wp-content/uploads/2016/01/BC_TappyChicken_Game.png" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2016/01/BC_TappyChicken_Game.png" alt="BC_TappyChicken_Game" width="160" height="240"/></a></figure></div>
<!-- /wp:image -->

<!-- wp:spacer {"height":20} -->
<div style="height:20px" aria-hidden="true" class="wp-block-spacer"></div>
<!-- /wp:spacer -->

<!-- wp:paragraph {"align":"left"} -->
<p style="text-align:left"><strong>Description from Epic: </strong> <em>Tappy to flappy! Avoid the posts to collect your eggs. Epic’s app for the flap showcases the ease of use and flexibility of Unreal Engine 4. Built by a single artist with no traditional programming skills, Tappy Chicken is a lightweight app with support for Game Center leaderboards, achievements, and the iAd Network. </em></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>brainCloud Features</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>These features have been used to create this example project:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Email Authentication - Allows players to log in on any device and retrieve their progress</li><li>Achievements - All the existing Game Center / Google Play achievements configured in brainCloud for full cross-platform support</li><li>Leaderboards - Cross platform high score leaderboard</li><li>User Entities - Saves the player's egg collection progress to the cloud</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Full Source Available</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The full source of brainCloud Tappy Chicken has been made available for our developers. Get the project <a href="https://sharedprod.braincloudservers.com/s3/brainCloudExamples/unreal/BC_TappyChicken_1.0.0_168245.zip">here</a>!</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Documentation</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>For more information on how to use brainCloud in Unreal Engine 4&nbsp;check out our Getting Started tutorials:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="/apidocs/tutorials/unreal-tutorials/setting-up-the-braincloud-plugin/">Setting up the brainCloud plugin</a></li><li><a href="/apidocs/tutorials/unreal-tutorials/getting-started-with-blueprints/">Getting Started With Blueprints</a></li><li><a href="/apidocs/tutorials/unreal-tutorials/getting-started-with-c/">Getting Started With C++</a></li><li><a href="/apidocs/tutorials/unreal-tutorials/getting-started-with-the-online-subsystem/">Getting Started With OnlineSubsystem</a></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2528</wp:post_id>
		<wp:post_date><![CDATA[2016-01-29 16:04:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-29 21:04:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[tappy-chicken-example-game]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>2206</wp:post_parent>
		<wp:menu_order>10</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="achievements"><![CDATA[achievements]]></category>
		<category domain="yst_prominent_words" nicename="center"><![CDATA[center]]></category>
		<category domain="yst_prominent_words" nicename="chicken"><![CDATA[chicken]]></category>
		<category domain="yst_prominent_words" nicename="engine-4"><![CDATA[engine 4]]></category>
		<category domain="yst_prominent_words" nicename="example"><![CDATA[example]]></category>
		<category domain="yst_prominent_words" nicename="example-project"><![CDATA[example project]]></category>
		<category domain="yst_prominent_words" nicename="existing"><![CDATA[existing]]></category>
		<category domain="yst_prominent_words" nicename="features"><![CDATA[features]]></category>
		<category domain="yst_prominent_words" nicename="full"><![CDATA[full]]></category>
		<category domain="yst_prominent_words" nicename="full-source"><![CDATA[full source]]></category>
		<category domain="yst_prominent_words" nicename="game"><![CDATA[game]]></category>
		<category domain="yst_prominent_words" nicename="game-center"><![CDATA[game center]]></category>
		<category domain="yst_prominent_words" nicename="getting-started"><![CDATA[getting started]]></category>
		<category domain="yst_prominent_words" nicename="google-play"><![CDATA[google play]]></category>
		<category domain="yst_prominent_words" nicename="project"><![CDATA[project]]></category>
		<category domain="yst_prominent_words" nicename="started"><![CDATA[started]]></category>
		<category domain="yst_prominent_words" nicename="tappy"><![CDATA[tappy]]></category>
		<category domain="yst_prominent_words" nicename="tappy-chicken"><![CDATA[tappy chicken]]></category>
		<category domain="yst_prominent_words" nicename="unreal-engine"><![CDATA[unreal engine]]></category>
		<category domain="yst_prominent_words" nicename="unreal-engine-4"><![CDATA[unreal engine 4]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Cloud Code Tutorials</title>
		<link>https://staging.getbraincloud.com/apidocs/cloud-code-central/cloud-code-tutorials/</link>
		<pubDate>Tue, 16 Feb 2016 14:22:50 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=2611</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Welcome to the brainCloud Cloud Code tutorials.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The following pages will help you to get up-and-running writing your first Cloud Code scripts.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Cloud Code Tutorials:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="https://staging.getbraincloud.com/apidocs/cloud-code-central/cloud-code-tutorials/cloud-code-tutorial-background/">Background </a>- G<g class="gr_ gr_61 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace" id="61" data-gr-id="61">eneral</g> overview of how Cloud Code works</li><li><a href="https://staging.getbraincloud.com/apidocs/cloud-code-central/cloud-code-tutorials/cloud-code-tutorial1-your-first-script/">Tutorial 1</a> - Your First Script</li><li><a href="https://staging.getbraincloud.com/apidocs/cloud-code-central/cloud-code-tutorials/cloud-code-tutorial2-making-api-calls/">Tutorial 2</a> - Making API Calls</li><li><a href="https://staging.getbraincloud.com/apidocs/cloud-code-central/cloud-code-tutorials/cloud-code-tutorial3-working-with-entities/">Tutorial 3</a> - Working with Global and User Entities</li><li><a href="https://staging.getbraincloud.com/apidocs/cloud-code-central/cloud-code-tutorials/cc-tutorial-4-pre-and-post-hooks/">Tutorial 4</a> - Pre and Post Hooks</li><li><a href="https://staging.getbraincloud.com/apidocs/cloud-code-central/cloud-code-tutorials/http-client-service/">Tutorial 5</a> - External Web Services</li><li><a href="https://staging.getbraincloud.com/apidocs/cloud-code-central/cloud-code-tutorials/s2s-cloud-code-scripts/">Tutorial 6</a> - S2S Scripts</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2611</wp:post_id>
		<wp:post_date><![CDATA[2016-02-16 09:22:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-16 14:22:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cloud-code-tutorials]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>4509</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="cloud"><![CDATA[cloud]]></category>
		<category domain="yst_prominent_words" nicename="cloud-code"><![CDATA[cloud code]]></category>
		<category domain="yst_prominent_words" nicename="cloud-code-tutorials"><![CDATA[cloud code tutorials]]></category>
		<category domain="yst_prominent_words" nicename="code"><![CDATA[code]]></category>
		<category domain="yst_prominent_words" nicename="code-tutorials"><![CDATA[code tutorials]]></category>
		<category domain="yst_prominent_words" nicename="scripts"><![CDATA[scripts]]></category>
		<category domain="yst_prominent_words" nicename="tutorial"><![CDATA[tutorial]]></category>
		<category domain="yst_prominent_words" nicename="tutorials"><![CDATA[tutorials]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>CC Tutorial - Background</title>
		<link>https://staging.getbraincloud.com/apidocs/cloud-code-central/cloud-code-tutorials/cloud-code-tutorial-background/</link>
		<pubDate>Tue, 16 Feb 2016 14:23:18 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=2613</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>Background</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>brainCloud uses the <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino" target="_blank" rel="noopener noreferrer">Mozilla Rhino</a>&nbsp;engine to allow&nbsp;user-developed <em>JavaScript</em>-based scripts to be run on brainCloud's servers. Cloud Code&nbsp;scripts run within a secure sandbox that provides access to brainCloud's API methods, while&nbsp;at the same time ensuring that the scripts are limited to accessing the app's own private data, and cannot affect the processing of other brainCloud-based applications.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Key Concepts</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><em><strong>Script parameters are sent via a global "data" JSON object.</strong></em> You retrieve the value of the parameter by simply retrieving it from the data object - i.e. myParm = data["myParm"];</li><li><em><strong>You don't technically "return" from a Cloud Code script.</strong></em> The last line of the script will instead simply declare the final object to be evaluated as the script's return -- <em>this will be clearer after you view an example or two.</em></li><li><em><strong>The portal includes a built-in cloud editor.</strong></em> We're working to make it more convenient to write and manage your Cloud Code scripts from your desktop, but for now, the simplest is to write it in our editor. The good news is that the editor is syntax-aware and really does help you to write good JavaScript. (Note - the editor does allow import/export from the desktop)</li><li><em><strong>Scripts can be quickly tested via the API Explorer.</strong></em> The API and S2S Explorers make it very easy to test your Cloud Code. Simply go to <strong>Design | Cloud Code | API Explorer</strong>, then authenticate a session, and then call your script using the <em><strong>Script</strong></em> service and the appropriate <em><strong>Run Script</strong></em> operation. The explorer will even pull your example parameters from the script definitions, so it's pretty quick and simple to execute.</li><li><em><strong>Scripts are versioned.</strong></em> Every time you save a new copy of a script we backup the older version. You can revert to an older script at any time.</li><li><em><strong>Scripts have a "watchdog timer" that ensures that they don't run too long.</strong></em> This is essential to protect the performance of the overall system from run-away scripts. The timeouts for scripts are set individually. The default timeout for a script is 10 seconds but can be set to up to 60 seconds in the timeout dropdown. <em>Note, brainCloud does allow for running longer-term background scripts - just reach-out to us to enable the setting of longer timeouts.</em></li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Current&nbsp;Limitations</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>When writing Cloud Code scripts, there are some key limitations to keep in mind:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><em><strong>Each script is limited to a single entry point</strong></em>. &nbsp;This means that essentially the "mainline" of a script is run whenever the script is called.</li><li><em><strong>Access to external libraries is limited.</strong></em>&nbsp;We're looking to add access to popular libraries like Moment.js in the future.</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2613</wp:post_id>
		<wp:post_date><![CDATA[2016-02-16 09:23:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-16 14:23:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cloud-code-tutorial-background]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>2611</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="access"><![CDATA[access]]></category>
		<category domain="yst_prominent_words" nicename="allow"><![CDATA[allow]]></category>
		<category domain="yst_prominent_words" nicename="api"><![CDATA[api]]></category>
		<category domain="yst_prominent_words" nicename="api-explorer"><![CDATA[api explorer]]></category>
		<category domain="yst_prominent_words" nicename="background"><![CDATA[background]]></category>
		<category domain="yst_prominent_words" nicename="cloud"><![CDATA[cloud]]></category>
		<category domain="yst_prominent_words" nicename="cloud-code"><![CDATA[cloud code]]></category>
		<category domain="yst_prominent_words" nicename="cloud-code-scripts"><![CDATA[cloud code scripts]]></category>
		<category domain="yst_prominent_words" nicename="code"><![CDATA[code]]></category>
		<category domain="yst_prominent_words" nicename="code-scripts"><![CDATA[code scripts]]></category>
		<category domain="yst_prominent_words" nicename="data"><![CDATA[data]]></category>
		<category domain="yst_prominent_words" nicename="editor"><![CDATA[editor]]></category>
		<category domain="yst_prominent_words" nicename="explorer"><![CDATA[explorer]]></category>
		<category domain="yst_prominent_words" nicename="limited"><![CDATA[limited]]></category>
		<category domain="yst_prominent_words" nicename="object"><![CDATA[object]]></category>
		<category domain="yst_prominent_words" nicename="run"><![CDATA[run]]></category>
		<category domain="yst_prominent_words" nicename="script"><![CDATA[script]]></category>
		<category domain="yst_prominent_words" nicename="scripts"><![CDATA[scripts]]></category>
		<category domain="yst_prominent_words" nicename="time"><![CDATA[time]]></category>
		<category domain="yst_prominent_words" nicename="write"><![CDATA[write]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>CC Tutorial1 - Your First Script</title>
		<link>https://staging.getbraincloud.com/apidocs/cloud-code-central/cloud-code-tutorials/cloud-code-tutorial1-your-first-script/</link>
		<pubDate>Tue, 16 Feb 2016 14:23:47 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=2618</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>In this tutorial, we'll go through the&nbsp;basics of creating a Cloud Code script, and teach you how to pass parameters to/from a script.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Step 1 - Create the Script</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To create our first script, perform the following steps:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Log into the brainCloud <strong>Design Portal</strong> (if you haven't already)</li><li>Choose your app, and go to <strong>Design | Cloud Code | Scripts</strong></li><li>Click the <strong>[+]</strong> in the top right-hand corner to create a new script</li><li>Give your script a name - for example, <em>"Tut1_AddTwoNumbers"</em>, make it <strong><em>Client Callable</em></strong>, and set its <em><b>Test Parameters</b></em>&nbsp;to:</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Test Parameters</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{   
    "num1": 1,   
    "num2": 2 
} </pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:list -->
<ul><li>Then switch to the <strong>Editor</strong>&nbsp;tab, and copy and paste the following script.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Script</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"js"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="js" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">// Retrieve our two paramaters 
var a = data.num1; 
var b = data.num2;
 
// Perform our highly advanced calculation!
var c = a + b; 
// "Return" the result 
c; </pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:list -->
<ul><li>Hit <strong>[Save]</strong> and then <strong>[Close]</strong> when you're done.</li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>Step 2 - Run the Script</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Okay, let's see if it works.&nbsp;To run the script:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Switch to the <strong>API Explorer</strong> by choosing <strong>Design | Cloud Code | API Explorer</strong> from the side menu</li><li>The API Explorer attempts to simulate a client application accessing the brainCloud servers. Thus, just like any brainCloud client, you must first authenticate. &nbsp;To do so, choose the <strong>Authenticate</strong> <em>Service</em> and the <strong>Authenticate</strong> <em>Operation</em> from the drop-downs, and then click the green <strong>RUN</strong> button.</li><li>Next, we'll run the script. Choose <strong>Script</strong> from the <em>Service</em> drop-down and Run Script "Tut1_AddTwoNumbers" from the Operation drop-down. <em>If you don't see your script you probably forgot to make it Client Callable - go to its definition in the Scripts screen, and then come back. </em></li><li>You'll notice that the default parameters that you set are displayed in the <em>Parameters</em> section of the API Explorer. Edit them if you wish. Then click the RUN button to run the script and see the results.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":4249,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2018/03/Tut1_API_Explorer.png"><img src="/apidocs/wp-content/uploads/2018/03/Tut1_API_Explorer-1024x572.png" alt="" class="wp-image-4249"/></a></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>Step 3 - View the results</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following results are returned from running the script:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>status = the HTTP result of the operation, which will always be 200, unless there were problems with the server</li><li>data = the results from the script itself - which will contain two parts:
<ul>
<li>success = will be true unless an exception was triggered</li>
<li>response = the exact results returned from the script</li>
</ul>
</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Results</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{  "status": 200,  "data": {   "response": 3,   "success": true  } }</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>Step 4 - Calling the Script from your client app</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Calling scripts from client apps is&nbsp;straight-forward - you simply call the <a href="/apidocs/apiref/#capi-script-runscript" target="_blank" rel="noopener noreferrer">RunScript()</a> method, passing in the name of the script, and any required parameters.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Calling the script from a Unity C# app would look like the following:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">string scriptName = "Tut1_AddTwoNumbers";
string jsonScriptData = "{ \"num1\": 1, \"num2\": 2 }";
SuccessCallback successCallback = (response, cbObject) =>
{
    Debug.Log(string.Format("Success | {0}", response));
};
FailureCallback failureCallback = (status, code, error, cbObject) =>
{
    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));
};

// Call the script 
_bc.ScriptService.RunScript(scriptName, jsonScriptData, successCallback, failureCallback);</pre>
<!-- /wp:enlighter/codeblock -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2618</wp:post_id>
		<wp:post_date><![CDATA[2016-02-16 09:23:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-16 14:23:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cloud-code-tutorial1-your-first-script]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>2611</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="api"><![CDATA[api]]></category>
		<category domain="yst_prominent_words" nicename="api-explorer"><![CDATA[api explorer]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="calling-the-script"><![CDATA[calling the script]]></category>
		<category domain="yst_prominent_words" nicename="choose"><![CDATA[choose]]></category>
		<category domain="yst_prominent_words" nicename="client"><![CDATA[client]]></category>
		<category domain="yst_prominent_words" nicename="client-callable"><![CDATA[client callable]]></category>
		<category domain="yst_prominent_words" nicename="cloud"><![CDATA[cloud]]></category>
		<category domain="yst_prominent_words" nicename="cloud-code"><![CDATA[cloud code]]></category>
		<category domain="yst_prominent_words" nicename="code"><![CDATA[code]]></category>
		<category domain="yst_prominent_words" nicename="create"><![CDATA[create]]></category>
		<category domain="yst_prominent_words" nicename="design"><![CDATA[design]]></category>
		<category domain="yst_prominent_words" nicename="explorer"><![CDATA[explorer]]></category>
		<category domain="yst_prominent_words" nicename="parameters"><![CDATA[parameters]]></category>
		<category domain="yst_prominent_words" nicename="results"><![CDATA[results]]></category>
		<category domain="yst_prominent_words" nicename="run"><![CDATA[run]]></category>
		<category domain="yst_prominent_words" nicename="run-button"><![CDATA[run button]]></category>
		<category domain="yst_prominent_words" nicename="run-the-script"><![CDATA[run the script]]></category>
		<category domain="yst_prominent_words" nicename="step"><![CDATA[step]]></category>
		<category domain="yst_prominent_words" nicename="test-parameters"><![CDATA[test parameters]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>CC Tutorial2 - Making API calls</title>
		<link>https://staging.getbraincloud.com/apidocs/cloud-code-central/cloud-code-tutorials/cloud-code-tutorial2-making-api-calls/</link>
		<pubDate>Tue, 16 Feb 2016 14:24:15 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=2637</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>In this tutorial, we'll explain how to make brainCloud API calls from within Cloud Code scripts.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Example Background</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>For this example, we'll imagine that the developer wants to&nbsp;write to two leaderboards upon completion of a game round.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>She has decided to combine these two operations&nbsp;into a single cloud code script to reap the following benefits:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><em>More responsive app</em> - fewer client/server calls means a more responsive app</li><li><em>Cost savings</em> - it costs 1 API count to call a script, but the first 2 API calls called from within a script are free (and the rest cost only 1/2 count each). The result is she can write to two leaderboards for a single API count combined, half the cost otherwise.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><em>Note that for this example we'll use the dynamic leaderboard calls so that we don't have to set up the leaderboard metadata ahead-of-time.</em></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Step 1 -&nbsp;Write the Script</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>We'll enter the script following the same steps as the last tutorial.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First of all, create the script by going to <strong>Design | Cloud Code | Script</strong>, hitting the <strong>[+]</strong>,&nbsp;setting&nbsp;<em>Script&nbsp;Name</em> to&nbsp;<strong>"Tut2_WriteToLeaderboards"</strong>, ensuring <em>Client Callable</em> is <strong>TRUE</strong>, and entering the following for the <em>Test Parameters</em>:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Test Parameters</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
  "score": 100,
  "kills": 10
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Then switch to the <em>Editor</em> tab and copy-and-paste the following for the script:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Script</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"js"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="js" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">// Retrieve the parameters
var score = data.score;
var kills = data.kills;
var leaderboardsWritten = 0;
var results = {};

// Grab the leaderboard service proxy from the bridge
var leaderboardService = bridge.getLeaderboardServiceProxy();

// Prepare the leaderboard paramaters. These are only used when creating the 
// leaderboard (which happens the first time a score is posted to it)
var leaderboardType = "HIGH_VALUE";
var rotationType = "NEVER";
var rotationReset = new Date("2016-01-01");  // Unused because rotationType is NEVER
var retainedCount = 1; // Just keep the current leaderboard

// Post to the score leaderboard
var scoreResult = leaderboardService.postScoreToDynamicLeaderboard(
    "scoreLeaderboard", 
    score, 
    null, // Not appending any extra data 
    leaderboardType, 
    rotationType, 
    rotationReset, 
    retainedCount);
    
if (scoreResult.status == "200") {
    
    leaderboardsWritten++;
    
    // Post to the kill leaderboard
    var killsResult = leaderboardService.postScoreToDynamicLeaderboard(
        "killsLeaderboard", 
        kills, 
        null, // Not appending any extra data 
        leaderboardType, 
        rotationType, 
        rotationReset, 
        retainedCount);
        
    if (killsResult.status == "200") {
        leaderboardsWritten++;
    }
    
}

results["leaderboardsWritten"] = leaderboardsWritten;
results;</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>The important things to note from this example:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Before you can make an API call, you must request the appropriate <em>service proxy</em> from the bridge.</strong> &nbsp;Note that there are separate bridges for <a href="/apidocs/apiref/#cc-bridge" target="_blank" rel="noopener noreferrer">Client API</a> and <a href="/apidocs/apiref/#s2s-bridge" target="_blank" rel="noopener noreferrer">S2S API</a> calls - consult the appropriate one for the available proxies.</li><li><strong>You then invoke&nbsp;the API call upon&nbsp;the <em>service proxy</em> itself.</strong></li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>Step 2 - Run/Test the Script</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Switch to the API Explorer and run the script. Remember to authenticate first!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You should see results that look similar to:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Results</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"js"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="js" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
 "status": 200,
 "data": {
  "response": {
   "leaderboardsWritten": 2
  },
  "success": true
 }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>For fun, check out the leaderboards&nbsp;from our Monitoring section. Go to <strong>Monitoring | Global Monitoring | Leaderboards</strong>&nbsp;By default you'll see the "killsLeaderboard" - but&nbsp;you can switch to the "scoreLeaderboard" via the combo box.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>Step 3 - Call the Script from your App</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following code would call the script from Unity:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">string scriptName = "Tut2_WriteToLeaderboards";
string jsonScriptData = "{ \"score\": 100, \"kills\": 10 }";
SuccessCallback successCallback = (response, cbObject) =>
{
    Debug.Log(string.Format("Success | {0}", response));
};
FailureCallback failureCallback = (status, code, error, cbObject) =>
{
    Debug.Log(string.Format("Failed | {0}  {1}  {2}", status, code, error));
};

// Call the script 
_bc.ScriptService.RunScript(scriptName, jsonScriptData, successCallback, failureCallback);
</pre>
<!-- /wp:enlighter/codeblock -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2637</wp:post_id>
		<wp:post_date><![CDATA[2016-02-16 09:24:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-16 14:24:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cloud-code-tutorial2-making-api-calls]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>2611</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="api"><![CDATA[api]]></category>
		<category domain="yst_prominent_words" nicename="api-call"><![CDATA[api call]]></category>
		<category domain="yst_prominent_words" nicename="api-calls"><![CDATA[api calls]]></category>
		<category domain="yst_prominent_words" nicename="api-count"><![CDATA[api count]]></category>
		<category domain="yst_prominent_words" nicename="app"><![CDATA[app]]></category>
		<category domain="yst_prominent_words" nicename="call"><![CDATA[call]]></category>
		<category domain="yst_prominent_words" nicename="call-the-script"><![CDATA[call the script]]></category>
		<category domain="yst_prominent_words" nicename="calls"><![CDATA[calls]]></category>
		<category domain="yst_prominent_words" nicename="cloud"><![CDATA[cloud]]></category>
		<category domain="yst_prominent_words" nicename="cloud-code"><![CDATA[cloud code]]></category>
		<category domain="yst_prominent_words" nicename="code"><![CDATA[code]]></category>
		<category domain="yst_prominent_words" nicename="cost"><![CDATA[cost]]></category>
		<category domain="yst_prominent_words" nicename="count"><![CDATA[count]]></category>
		<category domain="yst_prominent_words" nicename="example"><![CDATA[example]]></category>
		<category domain="yst_prominent_words" nicename="leaderboards"><![CDATA[leaderboards]]></category>
		<category domain="yst_prominent_words" nicename="note"><![CDATA[note]]></category>
		<category domain="yst_prominent_words" nicename="responsive-app"><![CDATA[responsive app]]></category>
		<category domain="yst_prominent_words" nicename="service-proxy"><![CDATA[service proxy]]></category>
		<category domain="yst_prominent_words" nicename="test-parameters"><![CDATA[test parameters]]></category>
		<category domain="yst_prominent_words" nicename="write"><![CDATA[write]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>CC Tutorial3 - Working with Entities</title>
		<link>https://staging.getbraincloud.com/apidocs/cloud-code-central/cloud-code-tutorials/cloud-code-tutorial3-working-with-entities/</link>
		<pubDate>Thu, 25 Feb 2016 05:32:45 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=2651</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This tutorial uses&nbsp;brainCloud's <strong>Global </strong>and<strong> User Entity</strong>&nbsp;features.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>Global Entities</em> are json objects that are available globally to <em>all users</em> of a system (subject to the specified ACL of the object). <em>User Entities</em>&nbsp;are&nbsp;local to a single user, and thus largely private (though there are mechanisms in place to share them). <em>For more information on brainCloud data features, see the <a href="/apidocs/api-modules/data/" target="_blank" rel="noopener noreferrer">Cloud Data</a> section of the brainCloud documentation.</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The combination of Cloud Code working together with Global and User Entities is very powerful in brainCloud.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Background</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This example uses a combination of <em>Cloud Code</em>, <em>Global Entities</em> and <em>User Entities</em> to build a <strong>Group (or Clan)</strong>&nbsp;feature that represents a collection of end-users.&nbsp;The operations that we will support include:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>CreateGroup()</li><li>DeleteGroup()</li><li>ListGroups()</li><li>JoinGroup()</li><li>LeaveGroup()</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Step 1 - Create, Delete and List Groups</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>We'll start with the overall group management methods - Tut3_CreateGroup(), Tut3_DeleteGroup() and Tut3_ListGroups(). Create methods using the listings below.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>CreateGroup()&nbsp;Script</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Parameters for Tut3_CreateGroup()</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
     "groupName": "The Tater Tots"
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Tut3_CreateGroup script</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"js"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="js" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">// Tut3_CreateGroup() - creates a new group

// Retrieve the parameter
var groupName = data.groupName;
var results = {};
// Grab the Global Entity service proxy from the bridge
var globalEntityService = bridge.getGlobalEntityServiceProxy();
// First check to see if a group of this name already exists
var searchResults = globalEntityService.getListByIndexedId(groupName, 1);
// If we find one, abort, cause the name is already taken
if (searchResults.data.entityList.length > 0)
{
    results.message = "Failure - group already exists.";
    results.group = null;
}
else
{
// Create the groupData to store in the entities
    var groupData = {};
    groupData.groupName = groupName;
    groupData.members = {};
    var aclPermissions = {};
    aclPermissions.other = 2; // public read-write permission
    var createResults = globalEntityService.createEntityWithIndexedId("group", groupName, 0, aclPermissions, groupData);
    if (createResults.data.entityId !== null)
    {
      results.message = "Success - created new group.";
      results.group = createResults.data;
    }
    else
    {
      results.message = "Unknown error occurred creating group";
      results.group = createResults.data;
    }
}
results;</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":3} -->
<h3>DeleteGroup()&nbsp;Script</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Parameters for Tut3_DeleteGroup()</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
  "groupId": "aGroupGUID"
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Tut3_DeleteGroup script</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"js"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="js" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">// Tut3_DeleteGroup() - deletes the specified group
// Retrieve the parameter
var groupId = data.groupId;
var results = {};
// Grab the Global Entity service proxy from the bridge
var globalEntityService = bridge.getGlobalEntityServiceProxy();
// Find the specified group
var searchResults = globalEntityService.readEntity(groupId);
if (searchResults.status == "200") {
    // Did we find it?
    if (searchResults.data.entityType == "group") {
      // Grab the identifying info
      var version = searchResults.data.version;
      // Delete the group
      var deleteResults = globalEntityService.deleteEntity(groupId, version);
      if (deleteResults.status == "200") {
        results.message = "Successfully deleted group.";
        results.numDeleted = 1;
      } else {
        results.message = "unknown error";
      }
    } else {
      results.message = "Entity is not a group.";
    }
} else {
    results.message = "Entity does not exist.";
}
results;</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":3} -->
<h3>ListGroups() code</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Tut3_ListGroups() script</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"js"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="js" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">// Tut3_ListGroups() - lists all the groups
// No parameters to retrieve
var results = {};
// Grab the Global Entity service proxy from the bridge
var globalEntityService = bridge.getGlobalEntityServiceProxy();
// Get all groups of type group
var searchResults = globalEntityService.getList({entityType: "group"}, {"data.groupName": 1}, 100);
// Declare the groups array
results.groups = [];
// Did we find it?
if (searchResults.data.entityList.length > 0)
{
    results.message = "Listing all groups";
    for (var i = 0; i &lt; searchResults.data.entityList.length; i++) {
      var groupData = {};
      groupData.name = searchResults.data.entityList[i].data.groupName;
      groupData.groupId = searchResults.data.entityList[i].entityId;
      results.groups.push(groupData);
    }
} else {
    results.message = "No groups found";
}
results;</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading -->
<h2>Step 2 - Test the Group Management&nbsp;scripts</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Once you've got the routines written, test them using the API Explorer. Remember, if you don't see any of the scripts, you probably don't have <em>Client Callable</em> set to <strong>TRU</strong>E.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once you've created a few entities with the scripts, take a moment to check out the data via our <em>Global Entities Viewer</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To&nbsp;use the viewer:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Click on the <strong>Monitoring</strong> tab</li><li>Choose <strong>Global Monitoring | Global Entities</strong></li><li>You can filter the list using the <em>Filter by Type</em> drop-down box</li><li>You can <em>View/Edit</em> an entity by clicking on the "eyeball"</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":4252,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2018/03/Tut3_GlobalEntities.png"><img src="/apidocs/wp-content/uploads/2018/03/Tut3_GlobalEntities-1024x496.png" alt="" class="wp-image-4252"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>Step 3 - Manage Members</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Now that we've got the groups being created, lets&nbsp;put the code in place to manage the members.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We'll start by adding a JoinGroup() method.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>JoinGroup()</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Parameters for Tut3_JoinGroup()</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
  "groupId": "aGlobalEntityId",
  "memberId": "aProfileId"
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Tut3_JoinGroup() script"</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"js"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="js" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">// Tut3_JoinGroup() - add myself to the specified group

// Retrieve the parameter
var groupId = data.groupId;
var memberId = data.memberId;

var results = {};

var apiStatus;

// Grab the Global Entity and User Entity service proxies
var globalEntityService = bridge.getGlobalEntityServiceProxy();
var userEntityService = bridge.getEntityServiceProxy();

// Retrieve the Group
var group = globalEntityService.readEntity(groupId).data;

// Confirm that we found it and that it's a group
if ( (group !== null) &amp;&amp; (group.entityType == "group") ) {
    
    // Add a new member to the group
    var memberRecord = {};
    memberRecord["profileId"] = memberId;
    
    // Storing the members in a map is a bit more flexible than an array
    group.data.members[memberId] = memberRecord;
    
    // Write the updated group
    apiStatus = globalEntityService.updateEntity(groupId, group.version, group.data);
    if (apiStatus.status == 200) {
        
         // Store a reference from the user to the group in a user entity
        var userRefToGroup = {};
        userRefToGroup["groupId"] = groupId;
        
        // Update via the singleton API - the entity will be created if it 
        // doesn't already exist
        apiStatus = userEntityService.updateSingleton(
            "myGroup",          // Entity type name (all you need for singletons)
            userRefToGroup,     // Entity data to store
            { "other": 0 });    // Keep the object private
        if (apiStatus.status == 200) {
            results.success = true;
            results.message = "Group updated!";
            results.members = group.data.members;
        } else {
            results.success = false;
            results.message = 'Error writing User Entity!';
            results.apiStatus = apiStatus;
        }
    } else {
        results.success = false;
        results.message = 'Error writing Global Entity!';
        results.apiStatus = apiStatus;
    }
} else {
    results.success = false;
    results.message = "Group not found!";
    results.apiStatus = null;
}

results;</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>And we'll round things off with the ability to leave a group.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>LeaveGroup()</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Parameters for Tut3_LeaveGroup()</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
  "groupId": "aGlobalEntityId",
  "memberId": "aProfileId"
}
</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Tut3_LeaveGroup() code</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"js"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="js" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">// Tut3_LeaveGroup() - remove myself to the specified group

// Retrieve the parameter
var groupId = data.groupId;
var memberId = data.memberId;

var results = {};

var apiStatus;

// Grab the Global Entity and User Entity service proxies
var globalEntityService = bridge.getGlobalEntityServiceProxy();
var userEntityService = bridge.getEntityServiceProxy();

// Retrieve the Group
var group = globalEntityService.readEntity(groupId).data;

// Confirm that we found it and that it's a group
if ( (group !== null) &amp;&amp; (group.entityType == "group") ) {
    
    // Delete the entry from the members map
    delete group.data.members[memberId];
    
    // Write the updated group
    apiStatus = globalEntityService.updateEntity(groupId, group.version, group.data);
    if (apiStatus.status == 200) {
        
         // Remove the group reference from the user entity
        var userRefToGroup = {};
        userRefToGroup["groupId"] = null;
        
        // Update via the singleton API - the entity will be created if it 
        // doesn't already exist
        apiStatus = userEntityService.updateSingleton(
            "myGroup",          // Entity type name (all you need for singletons)
            userRefToGroup,     // Entity data to store
            { "other": 0 });    // Keep the object private
        if (apiStatus.status == 200) {
            results.success = true;
            results.message = "Group updated!";
            results.members = group.data.members;
        } else {
            results.success = false;
            results.message = 'Error writing User Entity!';
            results.apiStatus = apiStatus;
        }
    } else {
        results.success = false;
        results.message = 'Error writing Global Entity!';
        results.apiStatus = apiStatus;
    }
} else {
    results.success = false;
    results.message = "Group not found!";
    results.apiStatus = null;
}

results;</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading -->
<h2>Step 4 - Test some more</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Once again, utilize the <strong>API Explorer</strong> to test out these new methods.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And confirm that the Global Entities are being written properly using the <strong>Global Monitoring | Global Entities</strong> viewer.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finally, we're utilizing User Entities now too - so go to <strong>User Monitoring</strong> and go to the <strong>User Entities</strong> page to confirm the user's reference to the group that they belong to.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Step 5 - Explore</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There is a lot more functionality that can be built upon the base that we've provided here. Happy Coding!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2651</wp:post_id>
		<wp:post_date><![CDATA[2016-02-25 00:32:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-25 05:32:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cloud-code-tutorial3-working-with-entities]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>2611</wp:post_parent>
		<wp:menu_order>15</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="api-explorer"><![CDATA[api explorer]]></category>
		<category domain="yst_prominent_words" nicename="cloud-code"><![CDATA[cloud code]]></category>
		<category domain="yst_prominent_words" nicename="code"><![CDATA[code]]></category>
		<category domain="yst_prominent_words" nicename="combination-of-cloud"><![CDATA[combination of cloud]]></category>
		<category domain="yst_prominent_words" nicename="combination-of-cloud-code"><![CDATA[combination of cloud code]]></category>
		<category domain="yst_prominent_words" nicename="entities"><![CDATA[entities]]></category>
		<category domain="yst_prominent_words" nicename="entities-viewer"><![CDATA[entities viewer]]></category>
		<category domain="yst_prominent_words" nicename="global"><![CDATA[global]]></category>
		<category domain="yst_prominent_words" nicename="global-and-user"><![CDATA[global and user]]></category>
		<category domain="yst_prominent_words" nicename="global-entities"><![CDATA[global entities]]></category>
		<category domain="yst_prominent_words" nicename="global-entities-viewer"><![CDATA[global entities viewer]]></category>
		<category domain="yst_prominent_words" nicename="global-monitoring"><![CDATA[global monitoring]]></category>
		<category domain="yst_prominent_words" nicename="group"><![CDATA[group]]></category>
		<category domain="yst_prominent_words" nicename="group-management"><![CDATA[group management]]></category>
		<category domain="yst_prominent_words" nicename="parameters"><![CDATA[parameters]]></category>
		<category domain="yst_prominent_words" nicename="script"><![CDATA[script]]></category>
		<category domain="yst_prominent_words" nicename="step"><![CDATA[step]]></category>
		<category domain="yst_prominent_words" nicename="test"><![CDATA[test]]></category>
		<category domain="yst_prominent_words" nicename="user"><![CDATA[user]]></category>
		<category domain="yst_prominent_words" nicename="user-entities"><![CDATA[user entities]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Network Error Message Caching</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/general-api-tutorials/network-error-message-caching/</link>
		<pubDate>Thu, 03 Mar 2016 15:07:13 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=2739</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>The Network Error Message Caching feature in the brainCloud SDK allows developers to centralize their handling of network outages. Mobile devices are prone to&nbsp;dropping network connections. As such, it's important to handle network outages with the brainCloud server gracefully. The Network Error Message Caching system aims to make this an easier task.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>The Problem</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The brainCloud SDK provides granular error handling by allowing developers to register callbacks for almost any API call offered by the system. Your error handling routines may be specific to an API call, and to facilitate this granular handling of errors, brainCloud allows you to register unique&nbsp;callbacks per API call. However, this becomes somewhat problematic when dealing with network outages. For instance, you may have 5 API calls which are in transit to the brainCloud server. Without the Network Error Message Caching, each error handler for those 5 API calls will be executed in turn. How would you determine which error callback gets to "take charge" when a network error happens?</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>The Solution</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To solve this issue, brainCloud provides a single <strong>Network Error</strong> callback which is called when&nbsp;a network error is&nbsp;encountered. brainCloud also caches all in transit messages while the error is being handled (for instance a dialog is presented to the user to retry/cancel their connection). Once the Network Error callback has been issued, the developer can decide to <strong>RetryCachedMessages</strong> which causes the brainCloud SDK to attempt to resend the messages or <strong>FlushCachedMessages</strong>&nbsp;which discards all cached messages.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The basic flow is as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2741,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/03/NetworkErrorMessageCaching-Sequence-Diagram.png"><img src="/apidocs/wp-content/uploads/2016/03/NetworkErrorMessageCaching-Sequence-Diagram.png" alt="NetworkErrorMessageCaching Sequence Diagram" class="wp-image-2741"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>Implementation</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Here are the steps to use the Network Error Message Cache:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Enable the network error message&nbsp;caching using&nbsp;<a href="/apiref/#capi-client-enablenetworkerrormessagecaching" target="_blank" rel="noreferrer noopener">EnableNetworkErrorMessageCaching()</a></li><li>Register a network error callback using&nbsp;<a href="/apiref/#capi-client-registernetworkerrorcallback" target="_blank" rel="noreferrer noopener">RegisterNetworkErrorCallback()</a></li><li>On receiving a network error callback either
<ol><li>Call <a href="/apidocs/apiref/#capi-client-retrycachedmessages" target="_blank" rel="noreferrer noopener">RetryCachedMessages()</a> to attempt a retry or,</li><li>Call <a href="/apidocs/apiref/#capi-client-flushcachedmessages" target="_blank" rel="noreferrer noopener">FlushCachedMessages()</a> to flush all messages</li></ol>
</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Note that once you enable network message caching,&nbsp;<strong>all messages to brainCloud</strong> will be cached upon a network error callback being raised. Until your app takes an action to retry or flush, no messages will be sent to brainCloud.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2739</wp:post_id>
		<wp:post_date><![CDATA[2016-03-03 10:07:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-03 15:07:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[network-error-message-caching]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>2468</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="5-api"><![CDATA[5 api]]></category>
		<category domain="yst_prominent_words" nicename="5-api-calls"><![CDATA[5 api calls]]></category>
		<category domain="yst_prominent_words" nicename="api-call"><![CDATA[api call]]></category>
		<category domain="yst_prominent_words" nicename="api-calls"><![CDATA[api calls]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-sdk"><![CDATA[braincloud sdk]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-server"><![CDATA[braincloud server]]></category>
		<category domain="yst_prominent_words" nicename="caching"><![CDATA[caching]]></category>
		<category domain="yst_prominent_words" nicename="callback"><![CDATA[callback]]></category>
		<category domain="yst_prominent_words" nicename="error-callback"><![CDATA[error callback]]></category>
		<category domain="yst_prominent_words" nicename="error-handling"><![CDATA[error handling]]></category>
		<category domain="yst_prominent_words" nicename="error-message"><![CDATA[error message]]></category>
		<category domain="yst_prominent_words" nicename="error-message-caching"><![CDATA[error message caching]]></category>
		<category domain="yst_prominent_words" nicename="message"><![CDATA[message]]></category>
		<category domain="yst_prominent_words" nicename="message-caching"><![CDATA[message caching]]></category>
		<category domain="yst_prominent_words" nicename="messages"><![CDATA[messages]]></category>
		<category domain="yst_prominent_words" nicename="network-error-callback"><![CDATA[network error callback]]></category>
		<category domain="yst_prominent_words" nicename="network-error-message"><![CDATA[network error message]]></category>
		<category domain="yst_prominent_words" nicename="network-error-message-caching"><![CDATA[network error message caching]]></category>
		<category domain="yst_prominent_words" nicename="network-outages"><![CDATA[network outages]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>API Reference</title>
		<link>https://staging.getbraincloud.com/apidocs/api-reference-new/</link>
		<pubDate>Thu, 03 Mar 2016 19:02:31 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=2779</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>The&nbsp;<strong>brainCloud API Reference</strong>&nbsp;can be found <a href="https://staging.getbraincloud.com/apidocs/apiref/#introduction" target="_blank" rel="noreferrer noopener">here</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The API Reference is&nbsp;organized&nbsp;<em>subject</em>, and then sub-divided&nbsp;by <em>service. </em>The top-level subjects are:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="https://staging.getbraincloud.com/apidocs/apiref/#wrapper" target="_blank" rel="noreferrer noopener">BrainCloudWrapper</a> - the optional wrapper class that makes using the Client API easier, especially for authentication details</li><li><a href="https://staging.getbraincloud.com/apidocs/apiref/#capi" target="_blank" rel="noreferrer noopener">Client API</a> - the standard user-oriented API for interacting with brainCloud.</li><li><a href="https://staging.getbraincloud.com/apidocs/apiref/#cc" target="_blank" rel="noreferrer noopener">Cloud Code</a> - information and special APIs for writing custom&nbsp;cloud code scripts</li><li><a href="https://staging.getbraincloud.com/apidocs/apiref/#s2s" target="_blank" rel="noreferrer noopener">Server to Server (S2s)</a> - information for writing&nbsp;scripts to be called from external services</li><li><a href="https://staging.getbraincloud.com/apidocs/apiref/#appendix" target="_blank" rel="noreferrer noopener">Appendix</a>&nbsp;- references to reason&nbsp;codes, commonly used ids, the stats grammar syntax, etc.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Be sure to choose the appropriate programming language via the tab in the top-right corner of the docs. Options include <em>C#</em>, <em>C++</em>, <em>Objective-C</em>, <em>Java</em>, <em>JavaScript</em>, and <em>Cloud Code</em>.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2779</wp:post_id>
		<wp:post_date><![CDATA[2016-03-03 14:02:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-03 19:02:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[api-reference-new]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>21</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="api"><![CDATA[api]]></category>
		<category domain="yst_prominent_words" nicename="api-reference"><![CDATA[api reference]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="client"><![CDATA[client]]></category>
		<category domain="yst_prominent_words" nicename="client-api"><![CDATA[client api]]></category>
		<category domain="yst_prominent_words" nicename="cloud"><![CDATA[cloud]]></category>
		<category domain="yst_prominent_words" nicename="cloud-code"><![CDATA[cloud code]]></category>
		<category domain="yst_prominent_words" nicename="code"><![CDATA[code]]></category>
		<category domain="yst_prominent_words" nicename="information"><![CDATA[information]]></category>
		<category domain="yst_prominent_words" nicename="reference"><![CDATA[reference]]></category>
		<category domain="yst_prominent_words" nicename="scripts"><![CDATA[scripts]]></category>
		<category domain="yst_prominent_words" nicename="server"><![CDATA[server]]></category>
		<category domain="yst_prominent_words" nicename="writing"><![CDATA[writing]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>JS File Upload</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/javascript-tutorials/js-file-upload/</link>
		<pubDate>Thu, 14 Apr 2016 14:32:13 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=2803</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>Overview</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The Javascript File Upload API works a bit differently than other clients. When working within Javascript, you have access to built-in classes&nbsp;to handle uploading a file as well as determining the status of that upload - specifically the XMLHttpRequest object. As a result, we've geared the brainCloud upload implementation to make use of these built-in classes and methods.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Create the Form</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The first thing you'll want to set up is a form for selecting a file. Note that in this form we also include a few divs so that we can display information about the file selected as well as the progress of the upload.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"xml"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="xml" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">&lt;form id="form1" enctype="multipart/form-data" method="post" action="Upload.aspx">
  &lt;div class="row">
    &lt;label for="fileToUpload">Select a File to Upload&lt;/label>&lt;br />
    &lt;input type="file" name="fileToUpload" id="fileToUpload" onchange="fileSelected();" />
  &lt;/div>
  &lt;div id="fileName" />
  &lt;div id="fileSize" />
  &lt;div id="fileType" />
  &lt;div class="row">
    &lt;input type="button" onclick="uploadFile()" value="Upload" />
  &lt;/div>
  &lt;div id="progress">
  &lt;div id="log">
&lt;/form></pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading -->
<h2>Upload the File</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Here are the functions defined to select a file and upload it. Note that fileSelected simply populates the divs defined in the form with information about the selected file. The uploadFile method creates the XMLHttpRequest object and, registers callback methods for various events. It then calls the <a href="/apidocs/apiref/index.html#preparefileupload-js-only">brainCloudClient.file.prepareFileUpload()</a> method with various details&nbsp;about the file being uploaded. The callback of this method will then (on success) start the upload of the file to the brainCloud server using the <a href="/apidocs/apiref/index.html#uploadfile-js-only">brainCloudClient.file.uploadFile()</a> method. and starts the upload of the file with brainCloud.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">function fileSelected() {
  var file = document.getElementById('fileToUpload').files[0];
  if (file) {
    var fileSize = 0;
    if (file.size &gt; 1024 * 1024)
      fileSize = (Math.round(file.size * 100 / (1024 * 1024)) / 100).toString() + 'MB';
    else
      fileSize = (Math.round(file.size * 100 / 1024) / 100).toString() + 'KB';

    document.getElementById('fileName').innerHTML = 'Name: ' + file.name;
    document.getElementById('fileSize').innerHTML = 'Size: ' + fileSize;
    document.getElementById('fileType').innerHTML = 'Type: ' + file.type;
  }
}
		
function uploadFile() {
  var xhr = new XMLHttpRequest();
  var file = document.getElementById('fileToUpload').files[0];
  var fileSize = file.size;
		
  // register event listeners
  xhr.upload.addEventListener("progress", uploadProgress, false);
  xhr.addEventListener("load", uploadComplete, false);
  xhr.addEventListener("error", uploadFailed, false);
  xhr.addEventListener("abort", uploadCanceled, false);

  brainCloudClient.file.prepareFileUpload(
    "path", "filename", true, true, fileSize, 
    function(result) {
      if (result.status == 200) {
        var uploadId = result.data.fileDetails.uploadId;
        brainCloudClient.file.uploadFile(xhr, file, uploadId);
      }
    }
  );
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading -->
<h2>Register Event Listeners</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Here are the registered event listeners. Of interest, uploadProgress is called periodically by the XMLHttpRequest object to indicate the progress of the file upload. You can attach your progress bar to this event listener.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">function updateProgress(progress) {
  progress = progress &gt;= 0 ? (progress &lt;= 100 ? progress : 100) : 0;
  document.getElementById('progress').innerHTML = "Progress: " + progress + "%";
}
	
function uploadProgress(oEvent) {
  if (oEvent.lengthComputable) {
    var percentComplete = oEvent.loaded / oEvent.total;
    updateProgress(percentComplete * 100.0);
  }
  else {
    // Unable to compute progress information since the total size is unknown
  }
}
	
function uploadComplete(evt) {
  console.log("Upload complete: " + evt);
  if (this.status == 200) {
    var response = JSON.parse(this.responseText);
    console.log(JSON.stringify(response, null, 2));
  }
}
	
function uploadFailed(evt) {
  console.log("Upload failed: " + evt);
}
	
function uploadCanceled(evt) {
  console.log("Upload canceled: " + evt);
}</pre>
<!-- /wp:enlighter/codeblock -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2803</wp:post_id>
		<wp:post_date><![CDATA[2016-04-14 10:32:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-14 14:32:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[js-file-upload]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>822</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="built-in"><![CDATA[built-in]]></category>
		<category domain="yst_prominent_words" nicename="built-in-classes"><![CDATA[built-in classes]]></category>
		<category domain="yst_prominent_words" nicename="classes"><![CDATA[classes]]></category>
		<category domain="yst_prominent_words" nicename="divs"><![CDATA[divs]]></category>
		<category domain="yst_prominent_words" nicename="event"><![CDATA[event]]></category>
		<category domain="yst_prominent_words" nicename="event-listeners"><![CDATA[event listeners]]></category>
		<category domain="yst_prominent_words" nicename="file-upload"><![CDATA[file upload]]></category>
		<category domain="yst_prominent_words" nicename="form"><![CDATA[form]]></category>
		<category domain="yst_prominent_words" nicename="information"><![CDATA[information]]></category>
		<category domain="yst_prominent_words" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="yst_prominent_words" nicename="method"><![CDATA[method]]></category>
		<category domain="yst_prominent_words" nicename="methods"><![CDATA[methods]]></category>
		<category domain="yst_prominent_words" nicename="note"><![CDATA[note]]></category>
		<category domain="yst_prominent_words" nicename="object"><![CDATA[object]]></category>
		<category domain="yst_prominent_words" nicename="progress"><![CDATA[progress]]></category>
		<category domain="yst_prominent_words" nicename="selected"><![CDATA[selected]]></category>
		<category domain="yst_prominent_words" nicename="upload-of-the-file"><![CDATA[upload of the file]]></category>
		<category domain="yst_prominent_words" nicename="xmlhttprequest"><![CDATA[xmlhttprequest]]></category>
		<category domain="yst_prominent_words" nicename="xmlhttprequest-object"><![CDATA[xmlhttprequest object]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>2FA for Team Members</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/two-factor-authentication-for-team-members/</link>
		<pubDate>Wed, 11 May 2016 15:14:17 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=2903</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>brainCloud's Two-factor Authentication (2FA) support keeps intruders out of your Team Member account by requiring&nbsp;both your password and your phone to log in.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It works by sending a special verification code to your mobile device whenever you log into brainCloud from a new computer (or if it's been 30 days since your last verification). This&nbsp;significantly increases the security of your brainCloud account and it's associated applications.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":3995,"align":"center","linkDestination":"custom"} -->
<div class="wp-block-image"><figure class="aligncenter"><a href="/apidocs/wp-content/uploads/2016/05/2017-06-15_20-26-34.png"><img src="/apidocs/wp-content/uploads/2016/05/2017-06-15_20-26-34.png" alt="" class="wp-image-3995"/></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>brainCloud 2FA uses <a href="https://www.authy.com" target="_blank" rel="noreferrer noopener">Authy</a>, which&nbsp;gives the flexibility of performing authentication via text message or the Authy App (which is available for iOS, Android, Mac OS, Windows, Chrome and more). For the best possible experience, we recommend that folks download the <a href="https://www.authy.com/app/mobile/" target="_blank" rel="noreferrer noopener">Authy App</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>To enable 2FA</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Log into the brainCloud Portal</li><li>Choose the <strong>Edit Profile</strong> option from the top-right <strong>Power</strong> menu</li><li>Go to the <strong>Two-factor</strong> tab</li><li>Click the green <strong>[Click to enable 2FA]</strong> button</li><li>Follow the prompts!</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_Dashboard_tfa2.jpg" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2016/08/brainCloud_Dashboard_tfa2.jpg" alt="brainCloud"/></a></figure>
<!-- /wp:image -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_Dashboard_tfa3.jpg" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2016/08/brainCloud_Dashboard_tfa3.jpg" alt="brainCloud"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>Logging in with 2FA</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Logging in with 2FA&nbsp;is pretty simple:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/05/Login_2FA.png" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2016/05/Login_2FA.png" alt="brainCloud"/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Log into the brainCloud Portal with <strong>email + password</strong> just like normal</li><li>If it's your first time using this computer (or it's been more than 30 days since your last verification), you'll be prompted to enter a verification code (i.e. one-time password)</li><li>Check your phone. You may have been sent the code via SMS, or you may have received a push notification to the Authy app if you have it installed. Even if you didn't receive the push notification, you can just launch the authy app directly.</li><li>Enter the code into the dialog and hit <strong>[Verify]</strong>. If you're on a public computer, be sure to un-check the "remember this computer" option during verification. Otherwise, leave it checked so that you don't have to do this for another 30 days!</li><li>Voila, you're in.</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Disabling 2FA</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you decide that you no longer want to use 2FA for your account, you can click the red <strong>[Unlink]</strong> button from the Edit Profile screen.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/08/brainCloud_Dashboard_tfa4.jpg" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2016/08/brainCloud_Dashboard_tfa4.jpg" alt="brainCloud"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>Frequently Asked Questions</h2>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><li><strong>Will I need my phone to log in *every time*?</strong><br>No. You can tell brainCloud to remember the computer that you are logging in from. It will remember it for 30 days, and thus not ask you for the verification code during that time.</li><li><strong>Is the Authy app like Google Authenticator? Can I use that instead?</strong><br>The Authy app *is* a lot like Google Authenticator, and you can even configure it&nbsp;to perform authentication for Google Authenticator-based sites. But the inverse is not true.&nbsp;You cannot use Google Authenticator for sites that use Authy (i.e.&nbsp;brainCloud).</li><li><strong>Why did brainCloud choose Authy?</strong><br>We choose Authy&nbsp;for the richness of features (app, text or voice authentication, plus one-touch, which we'll be adding soon), ease of integration, and better management features for our users (i.e. you can switch phones, use multiple devices, etc. without issue using Authy).</li><li><strong>I don't have a cellphone. Can I still use 2FA?</strong><br>Yes, though it isn't recommended (since a land-line phone is less likely to be dedicated to a single person). But if you find yourself in that situation, you can enter the number for the phone, and choose the voice call options during authentication.</li><li><strong>This is cool. Can I add Authy to my apps?</strong><br>Funny you should mention that. We're working on it right now. :)</li></ol>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2903</wp:post_id>
		<wp:post_date><![CDATA[2016-05-11 11:14:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-11 15:14:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[two-factor-authentication-for-team-members]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>18</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="2fa"><![CDATA[2fa]]></category>
		<category domain="yst_prominent_words" nicename="app"><![CDATA[app]]></category>
		<category domain="yst_prominent_words" nicename="authentication"><![CDATA[authentication]]></category>
		<category domain="yst_prominent_words" nicename="authy"><![CDATA[authy]]></category>
		<category domain="yst_prominent_words" nicename="authy-app"><![CDATA[authy app]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-portal"><![CDATA[braincloud portal]]></category>
		<category domain="yst_prominent_words" nicename="choose-authy"><![CDATA[choose authy]]></category>
		<category domain="yst_prominent_words" nicename="code"><![CDATA[code]]></category>
		<category domain="yst_prominent_words" nicename="edit-profile"><![CDATA[edit profile]]></category>
		<category domain="yst_prominent_words" nicename="google-authenticator"><![CDATA[google authenticator]]></category>
		<category domain="yst_prominent_words" nicename="log"><![CDATA[log]]></category>
		<category domain="yst_prominent_words" nicename="log-into-the-braincloud"><![CDATA[log into the braincloud]]></category>
		<category domain="yst_prominent_words" nicename="log-into-the-braincloud-portal"><![CDATA[log into the braincloud portal]]></category>
		<category domain="yst_prominent_words" nicename="logging-in-with-2fa"><![CDATA[logging in with 2fa]]></category>
		<category domain="yst_prominent_words" nicename="phone"><![CDATA[phone]]></category>
		<category domain="yst_prominent_words" nicename="phone-to-log"><![CDATA[phone to log]]></category>
		<category domain="yst_prominent_words" nicename="push-notification"><![CDATA[push notification]]></category>
		<category domain="yst_prominent_words" nicename="verification"><![CDATA[verification]]></category>
		<category domain="yst_prominent_words" nicename="verification-code"><![CDATA[verification code]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>CC Tutorial4 - Pre and Post Hooks</title>
		<link>https://staging.getbraincloud.com/apidocs/cloud-code-central/cloud-code-tutorials/cc-tutorial-4-pre-and-post-hooks/</link>
		<pubDate>Tue, 24 May 2016 18:41:30 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=2955</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Pre and Post Hooks allow you to attach Cloud Code scripts to brainCloud's Client API - in effect, "hooking" into the API either before (pre) or after (post) the API method has been executed.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Pre-hooks allow you to pre-process data before it is sent to the API method. You can even change the parameters that are sent or abort the API call altogether.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Post-hooks allows you to massage the data that is returned after an API method executes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To utilize a pre or post-hook to modify brainCloud's behaviour, you:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>First write the cloud code script&nbsp;with the appropriate parameter/return syntax (see below, or the <a href="/apidocs/apiref/?cloudcode#cc-ccscripts-apihooks" target="_blank" rel="noopener noreferrer">API Reference</a>)</li><li>Then attach the cloud code script to the API method via the <strong>Design | Cloud Code | API Hooks</strong> page of the portal</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The format and function of cloud code&nbsp;scripts are different from standard cloud code, so we've created two examples below.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Pre Hooks</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Pre-hook scripts are executed&nbsp;<strong>before</strong> the API call they are hooked to. &nbsp;They allow you to preprocess the data that gets passed to the API call, or even return an error immediately and skip the API call altogether.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To create a pre-hook script starts by creating a new Cloud Code script in the&nbsp;Cloud Code | Scripts section of the design tab.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once you've created the script, go to the Edit tab and we'll write the logic for our hook.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Accessing &amp; Returning Data</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Similar to how regular Cloud Code scripts work, the parameters passed into the hook can be accessed through the "data" object. &nbsp;However, the fields&nbsp;inside the object are different when the script is a hook. These are the available fields:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>service&nbsp;</strong> - The service that the API being hooked belongs to</li><li><strong>operation&nbsp;</strong>- The operation name for the hooked API</li><li><strong>message&nbsp;</strong>- The parameters being passed to the API</li><li><strong>parms&nbsp;</strong>- The custom parameters for the hook. &nbsp;These are configured when adding the hook in the API Hooks page (covered further down).</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>In addition to the unique data object passed in, pre-hook scripts return a specific object that contains several fields that must be present for certain operations:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>status</strong> - When set to a non-200 value the API call will be aborted, and an error return to the calling client</li><li><strong>messageOverride</strong> - When a hook wants to modify the parameters being passed on to the API, the modified parameters must be assigned to this field of the return object</li><li><strong>reasonCode </strong>-<strong> </strong> A custom reason code for when the status is set to non-200. This is returned to the client as part of the error</li><li><strong>errorMessage</strong> - A custom error message for when the status is set to non-200. This is returned to the client as part of the error</li><li><strong>parms </strong>- The custom parameters for the hook.  These are configured when adding the hook in the API Hooks page (covered further down).</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>For this tutorial, we will hook onto the PlayerStatisitics | SetExperiencePoints API, and we need to keep in mind the parameters that get passed to it when writing our pre-hook. A single parameter is passed to the SetExperiencePoints API:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
    "xp_points": 1
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>The goal of our pre-hook is to multiply all XP values passed into this API method, therefore we need to modify the "xp_points" field of the "message" and add it to the "messageOverride" field of the return object.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To give an example of returning an error, our script will also abort the call if the "xp_points" value is over a certain threshold.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"js"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="js" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">message = data.message; //get the passed in API parameters
hookParms = data.parms; //get the custom hook parameters

message.xp_points *= hookParms.experienceMultiplier; //multiply the XP points value that was passed in

var retval = {}; //prepare the return object

if(message.xp_points > 10000) // the xp value is too large, return an error
{
   retval.status = 500;
   retval.reasonCode = 50000;
   retval.errorMessage = "XP value is too high!";
} 
else // pass the multiplied XP value onto the API
{
   retval.status = 200;
   retval.messageOverride = message;
}

retval; //return the object</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading -->
<h2>Post Hooks</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Post-hook scripts are called after executing a particular API call. Post-hook scripts can do some post-processing for an API call as well as optionally modifying the data returned to the client.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let's create a post hook for the SetExperiencePoints method. &nbsp;The process is similar to creating a pre-hook, but once again the input "data" object and return object fields have changed.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Accessing &amp; Returning Data</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Similar to pre-hook scripts, the “service”, “operation” and “parms” are passed to the script. The “message” component is the result of the call rather than the original calling message data. The original calling message is passed in as “callingMessage”.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>service&nbsp;</strong> - The service that the API being hooked belongs to</li><li><strong>operation&nbsp;</strong>- The operation name for the hooked API</li><li><strong>message&nbsp;</strong>- The&nbsp;result of the API call</li><li><strong>callingMessage</strong> - The original message parameters passed into the API</li><li><strong>parms&nbsp;</strong>- The custom parameters for the hook. &nbsp;These are configured when adding the hook in the API Hooks page (covered further down).</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The returned object for post hooks also differs slightly from pre hooks.  First, a null return object from the script will cause the return message from the API to be sent without modification.  Like the pre-hook, returning a non-200 status will return an error to the calling client with the specified reason code and error message.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To override the message data returned to the client, assign the modified message to the "data" field of the return object.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>These are all the return object fields:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>status</strong> - When set to a non-200 value the API call will be aborted, and an error return to the calling client</li><li><strong>data</strong>- When a hook wants to modify the message being returned to the client, the modified parameters must be assigned to this field of the return object</li><li><strong>reasonCode </strong>-<strong> </strong> A custom reason code for when the status is set to non-200. This is returned to the client as part of the error</li><li><strong>errorMessage</strong> - A custom error message for when the status is set to non-200. This is returned to the client as part of the error</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>In our example script, we will simply append a bool to the return data.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"js"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="js" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">message = data.message; //get the result of the API call

message.wasPostHooked = true; //append the bool to the result

var retval = {};
retval.status = 200;
retval.data = message;  //add the modified message to the return object

retval; //return the object</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading -->
<h2>Adding&nbsp;A Hook</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Now&nbsp;we'll go over how a hook is configured in the portal. &nbsp;This is the process of assigning a script to a specific API method, as a pre or post hook.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>First, you will need to have your script created in the Cloud Code | Scripts section of the design tab.</li><li>Next, go to the API Hooks tab (also under the&nbsp;Cloud Code heading).</li><li>Click the Create button to configure a new hook. You will see the dialogue below.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":4260,"align":"center","linkDestination":"custom"} -->
<div class="wp-block-image"><figure class="aligncenter"><a href="/apidocs/wp-content/uploads/2018/03/Tut4_PrePostHook-1.png"><img src="/apidocs/wp-content/uploads/2018/03/Tut4_PrePostHook-1.png" alt="" class="wp-image-4260"/></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The dialogue is fairly straightforward. &nbsp;Select the Service and Operation you want to hook, choose whether it is a pre (before API execution) or post (after API execution) hook, and then select the actual hook script.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The Params section is where you can configure the custom data passed into your hook. &nbsp;In our example, we are hooking onto the SetExperiencePoints method, and our post hook script will modify the XP amount that gets set. &nbsp;It will multiply the original value passed in with the call and multiply it by the parameter we have set here, experienceMultiplier.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once you've configured your parameters you're done! &nbsp;Your hook script will be executed whenever and wherever the hooked API method is called.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2955</wp:post_id>
		<wp:post_date><![CDATA[2016-05-24 14:41:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-24 18:41:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cc-tutorial-4-pre-and-post-hooks]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>2611</wp:post_parent>
		<wp:menu_order>16</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="api-call"><![CDATA[api call]]></category>
		<category domain="yst_prominent_words" nicename="api-hooks-page"><![CDATA[api hooks page]]></category>
		<category domain="yst_prominent_words" nicename="api-hooks-page-covered"><![CDATA[api hooks page covered]]></category>
		<category domain="yst_prominent_words" nicename="api-method"><![CDATA[api method]]></category>
		<category domain="yst_prominent_words" nicename="cloud-code"><![CDATA[cloud code]]></category>
		<category domain="yst_prominent_words" nicename="cloud-code-script"><![CDATA[cloud code script]]></category>
		<category domain="yst_prominent_words" nicename="cloud-code-scripts"><![CDATA[cloud code scripts]]></category>
		<category domain="yst_prominent_words" nicename="custom-parameters-for-the-hook"><![CDATA[custom parameters for the hook]]></category>
		<category domain="yst_prominent_words" nicename="errormessage-a-custom-error-message"><![CDATA[errormessage a custom error message]]></category>
		<category domain="yst_prominent_words" nicename="field-of-the-return"><![CDATA[field of the return]]></category>
		<category domain="yst_prominent_words" nicename="field-of-the-return-object"><![CDATA[field of the return object]]></category>
		<category domain="yst_prominent_words" nicename="hook-in-the-api-hooks"><![CDATA[hook in the api hooks]]></category>
		<category domain="yst_prominent_words" nicename="hooks-page-covered"><![CDATA[hooks page covered]]></category>
		<category domain="yst_prominent_words" nicename="non-200-value-the-api-call"><![CDATA[non-200 value the api call]]></category>
		<category domain="yst_prominent_words" nicename="parms-the-custom-parameters"><![CDATA[parms the custom parameters]]></category>
		<category domain="yst_prominent_words" nicename="reasoncode-a-custom-reason-code"><![CDATA[reasoncode a custom reason code]]></category>
		<category domain="yst_prominent_words" nicename="return-object"><![CDATA[return object]]></category>
		<category domain="yst_prominent_words" nicename="returned-to-the-client"><![CDATA[returned to the client]]></category>
		<category domain="yst_prominent_words" nicename="scripts-section-of-the-design"><![CDATA[scripts section of the design]]></category>
		<category domain="yst_prominent_words" nicename="section-of-the-design-tab"><![CDATA[section of the design tab]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>C++ Tutorials</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/c-tutorials/</link>
		<pubDate>Wed, 25 May 2016 16:24:23 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=2978</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Below is a list of C++ SDK Tutorials</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Project Setup</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="/apidocs/tutorials/c-tutorials/marmalade-project-setup/">Marmalade Project Setup</a></li><li><a href="/apidocs/tutorials/c-tutorials/windows-desktop-project-setup/">Windows Desktop Project Setup</a></li><li><a href="/apidocs/windows-store-project-setup/">Windows Store Project Setup</a></li><li><a href="/apidocs/tutorials/c-tutorials/windows-universal-project-setup/">Windows Universal Project Setup</a></li><li><a href="/apidocs/tutorials/c-tutorials/xcode-cocoapods-project-setup/">Xcode Cocoapods Project Setup</a></li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2978</wp:post_id>
		<wp:post_date><![CDATA[2016-05-25 12:24:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-25 16:24:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c-tutorials]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>63</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Windows Universal Project Setup</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/c-tutorials/windows-universal-project-setup/</link>
		<pubDate>Wed, 25 May 2016 16:24:43 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=2980</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Windows Universal Projects can make sure of the NuGet system built into Visual Studio 2015 to download and install the brainCloud SDK.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Open or Create a new Windows Universal Project in Visual Studio 2015</li><li>Right click on the project (or solution) in Solution Explorer and select "Manage NuGet packages..."</li><li>Click the Browse tab and search for "brainCloud"</li><li>Install the "brainCloudCppSdk" NuGet package</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Done!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2980</wp:post_id>
		<wp:post_date><![CDATA[2016-05-25 12:24:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-25 16:24:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[windows-universal-project-setup]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>2978</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="2015"><![CDATA[2015]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="click"><![CDATA[click]]></category>
		<category domain="yst_prominent_words" nicename="install"><![CDATA[install]]></category>
		<category domain="yst_prominent_words" nicename="nuget"><![CDATA[nuget]]></category>
		<category domain="yst_prominent_words" nicename="project"><![CDATA[project]]></category>
		<category domain="yst_prominent_words" nicename="solution"><![CDATA[solution]]></category>
		<category domain="yst_prominent_words" nicename="studio"><![CDATA[studio]]></category>
		<category domain="yst_prominent_words" nicename="studio-2015"><![CDATA[studio 2015]]></category>
		<category domain="yst_prominent_words" nicename="universal"><![CDATA[universal]]></category>
		<category domain="yst_prominent_words" nicename="visual"><![CDATA[visual]]></category>
		<category domain="yst_prominent_words" nicename="visual-studio"><![CDATA[visual studio]]></category>
		<category domain="yst_prominent_words" nicename="visual-studio-2015"><![CDATA[visual studio 2015]]></category>
		<category domain="yst_prominent_words" nicename="windows"><![CDATA[windows]]></category>
		<category domain="yst_prominent_words" nicename="windows-universal"><![CDATA[windows universal]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Windows Store Project Setup</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/c-tutorials/windows-store-project-setup/</link>
		<pubDate>Wed, 25 May 2016 18:59:40 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=2983</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Follow these steps&nbsp;to&nbsp;set up your project with the Windows Store brainCloud C++ SDK.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that Microsoft also refers to this as a WinRT build. This will target Windows Store Apps using the WinRT libraries on Tablets, Windows Phone, and Windows Desktop.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Create or open a Windows Store App project with Visual Studio 2013 or 2015</li><li>Download the Windows Store App brainCloud C++ SDK from the "Client Libs" section of the portal</li><li>Unzip the SDK into a folder. In our case we will unzip to a "bc" folder within the solution folder.</li><li>Right click your project in Solution Explorer and select Properties</li><li>Under Configuration Properties &gt; C/C++ &gt; Preprocessor &gt; General &gt; Additional Include Directories, enter the following include:
<ul><li>$(ProjectDir)..\bc\include;$(ProjectDir)..\bc\thirdparty\jsoncpp-1.0.0</li><li>Note that you should do this for all configurations and all platforms</li></ul>
</li><li>Under Configuration Properties &gt; Linker &gt; Input enter the following libraries:
<ul><li>brainCloudClient.lib;cpprest120_2_0.lib</li><li>Note that you should do this for all configurations and all platforms</li></ul>
</li><li>Under Configuration Properties &gt; Linker &gt; General &gt; Additional Library Directories, enter the following path:
<ul><li>$(ProjectDir)\..\bc\lib\win8.1\x64\debug &nbsp;&lt;--- for X64 | Debug</li><li>Note you will need to enter a unique path for each platform and configuration. Here is the matrix for Windows 8.1 RT. For Windows Phone 8.0 and 8.1, replace the "win8.1" part of the path with "winPhone8.0" or "winPhone8.1"&nbsp;respectively.
<ul><li>ARM | Debug: &nbsp;$(ProjectDir)\..\bc\lib\win8.1\arm\debug</li><li>ARM | Release: &nbsp;$(ProjectDir)\..\bc\lib\win8.1\arm\release</li><li>X64 | Debug: &nbsp;$(ProjectDir)\..\bc\lib\win8.1\x64\debug</li><li>X64 | Release: &nbsp;$(ProjectDir)\..\bc\lib\win8.1\x64\release</li><li>Win32 | Debug:&nbsp; $(ProjectDir)\..\bc\lib\win8.1\win32\debug</li><li>Win32&nbsp;| Release: &nbsp;$(ProjectDir)\..\bc\lib\win8.1\win32\release</li></ul>
</li></ul>
</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Done!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2983</wp:post_id>
		<wp:post_date><![CDATA[2016-05-25 14:59:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-25 18:59:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[windows-store-project-setup]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>2978</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="braincloud-c-sdk"><![CDATA[braincloud c sdk]]></category>
		<category domain="yst_prominent_words" nicename="c-sdk"><![CDATA[c sdk]]></category>
		<category domain="yst_prominent_words" nicename="configuration"><![CDATA[configuration]]></category>
		<category domain="yst_prominent_words" nicename="configuration-properties"><![CDATA[configuration properties]]></category>
		<category domain="yst_prominent_words" nicename="configuration-properties-linker"><![CDATA[configuration properties linker]]></category>
		<category domain="yst_prominent_words" nicename="configurations-and-all-platforms"><![CDATA[configurations and all platforms]]></category>
		<category domain="yst_prominent_words" nicename="directories-enter"><![CDATA[directories enter]]></category>
		<category domain="yst_prominent_words" nicename="enter"><![CDATA[enter]]></category>
		<category domain="yst_prominent_words" nicename="general-additional"><![CDATA[general additional]]></category>
		<category domain="yst_prominent_words" nicename="note"><![CDATA[note]]></category>
		<category domain="yst_prominent_words" nicename="project"><![CDATA[project]]></category>
		<category domain="yst_prominent_words" nicename="properties"><![CDATA[properties]]></category>
		<category domain="yst_prominent_words" nicename="properties-linker"><![CDATA[properties linker]]></category>
		<category domain="yst_prominent_words" nicename="sdk"><![CDATA[sdk]]></category>
		<category domain="yst_prominent_words" nicename="store"><![CDATA[store]]></category>
		<category domain="yst_prominent_words" nicename="store-app"><![CDATA[store app]]></category>
		<category domain="yst_prominent_words" nicename="windows-phone"><![CDATA[windows phone]]></category>
		<category domain="yst_prominent_words" nicename="windows-store"><![CDATA[windows store]]></category>
		<category domain="yst_prominent_words" nicename="windows-store-app"><![CDATA[windows store app]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Windows Desktop Project Setup</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/c-tutorials/windows-desktop-project-setup/</link>
		<pubDate>Wed, 25 May 2016 20:12:24 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=3001</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Follow these steps&nbsp;to&nbsp;set up your project with the Windows Desktop&nbsp;brainCloud C++ SDK.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that if you are developing a Windows Store App, you should use the Window Store brainCloud C++ SDK. This SDK is specifically for Windows Desktop apps that do not include in the Windows Store runtime.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Create or open a Windows Desktop/Win32 App project with Visual Studio 2013 (<strong>or 2015 with Platform Toolset set to Visual Studio 2013</strong>)</li><li>Download the Windows Desktop App brainCloud C++ SDK from the "Client Libs" section of the portal</li><li>Unzip the SDK into a folder. In our case, we will unzip to a "bc" folder within the solution folder.</li><li>Right click your project in Solution Explorer and select Properties</li><li>Under Configuration Properties > C/C++ > Preprocessor > General > Additional Include Directories, enter the following include: <ul><li>$(ProjectDir)..\bc\include;$(ProjectDir)..\bc\thirdparty\jsoncpp-1.0.0</li><li>Note that you should do this for all configurations and all platforms </li></ul></li><li>Under Configuration Properties > Linker > Input enter the following libraries: <ul><li>brainCloud.lib;cpprest120_2_0.lib;winhttp.lib;bcrypt.lib;crypt32.lib</li><li>Note that you should do this for all configurations and all platforms </li></ul></li><li>Under Configuration Properties > Linker > General > Additional Library Directories, enter the following path: <ul><li>$(ProjectDir)\..\bc\lib\win32\debug  &lt;--- for Win32 | Debug</li><li>Note you will need to enter a unique path for each platform and configuration. For instance: <ul><li>X64 | Debug:  $(ProjectDir)\..\bc\lib\x64\debug</li><li>X64 | Release:  $(ProjectDir)\..\bc\lib\x64\release</li><li>Win32 | Debug:  $(ProjectDir)\..\bc\lib\win32\debug</li><li>Win32 | Release:  $(ProjectDir)\..\bc\lib\win32\release  </li></ul></li></ul></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Done!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3001</wp:post_id>
		<wp:post_date><![CDATA[2016-05-25 16:12:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-25 20:12:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[windows-desktop-project-setup]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>2978</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="braincloud-c"><![CDATA[braincloud c]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-c-sdk"><![CDATA[braincloud c sdk]]></category>
		<category domain="yst_prominent_words" nicename="c-sdk"><![CDATA[c sdk]]></category>
		<category domain="yst_prominent_words" nicename="configuration"><![CDATA[configuration]]></category>
		<category domain="yst_prominent_words" nicename="configuration-properties"><![CDATA[configuration properties]]></category>
		<category domain="yst_prominent_words" nicename="configuration-properties-linker"><![CDATA[configuration properties linker]]></category>
		<category domain="yst_prominent_words" nicename="configurations-and-all-platforms"><![CDATA[configurations and all platforms]]></category>
		<category domain="yst_prominent_words" nicename="directories-enter"><![CDATA[directories enter]]></category>
		<category domain="yst_prominent_words" nicename="enter"><![CDATA[enter]]></category>
		<category domain="yst_prominent_words" nicename="general-additional"><![CDATA[general additional]]></category>
		<category domain="yst_prominent_words" nicename="note"><![CDATA[note]]></category>
		<category domain="yst_prominent_words" nicename="properties"><![CDATA[properties]]></category>
		<category domain="yst_prominent_words" nicename="properties-linker"><![CDATA[properties linker]]></category>
		<category domain="yst_prominent_words" nicename="sdk"><![CDATA[sdk]]></category>
		<category domain="yst_prominent_words" nicename="studio-2013"><![CDATA[studio 2013]]></category>
		<category domain="yst_prominent_words" nicename="visual-studio"><![CDATA[visual studio]]></category>
		<category domain="yst_prominent_words" nicename="visual-studio-2013"><![CDATA[visual studio 2013]]></category>
		<category domain="yst_prominent_words" nicename="windows"><![CDATA[windows]]></category>
		<category domain="yst_prominent_words" nicename="windows-desktop"><![CDATA[windows desktop]]></category>
		<category domain="yst_prominent_words" nicename="windows-store"><![CDATA[windows store]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Marmalade Project Setup</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/c-tutorials/marmalade-project-setup/</link>
		<pubDate>Thu, 26 May 2016 19:44:11 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=3009</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Use the following steps to setup a Marmalade project with brainCloud.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Create or open your Marmalade C++ project</li><li>Download the brainCloud Marmalade C++ SDK from the Client Libs section of the brainCloud portal</li><li>Unzip the SDK into your project folder. This should create a folder called "brainCloud" in your project folder.</li><li>Open your project MKB file and add "braincloud" as a subproject</li><li>In the Marmalade HUB, click the "Update from MKB" button.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Done!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3009</wp:post_id>
		<wp:post_date><![CDATA[2016-05-26 15:44:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-26 19:44:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[marmalade-project-setup]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>2978</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="create"><![CDATA[create]]></category>
		<category domain="yst_prominent_words" nicename="folder"><![CDATA[folder]]></category>
		<category domain="yst_prominent_words" nicename="marmalade"><![CDATA[marmalade]]></category>
		<category domain="yst_prominent_words" nicename="marmalade-c"><![CDATA[marmalade c]]></category>
		<category domain="yst_prominent_words" nicename="mkb"><![CDATA[mkb]]></category>
		<category domain="yst_prominent_words" nicename="open"><![CDATA[open]]></category>
		<category domain="yst_prominent_words" nicename="project"><![CDATA[project]]></category>
		<category domain="yst_prominent_words" nicename="project-folder"><![CDATA[project folder]]></category>
		<category domain="yst_prominent_words" nicename="sdk"><![CDATA[sdk]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Xcode Cocoapods Project Setup</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/c-tutorials/xcode-cocoapods-project-setup/</link>
		<pubDate>Fri, 27 May 2016 18:47:46 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=3035</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>The brainCloud C++ SDK can be used through Cocoapods on Apple platforms. Simply add the following pod to your Podfile:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">pod 'BrainCloudCpp'</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>If you're a newcomer to the <code>CocoaPods</code> world, you can find documentation on how to set up your Xcode project here:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://guides.cocoapods.org/">https://guides.cocoapods.org/</a></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3035</wp:post_id>
		<wp:post_date><![CDATA[2016-05-27 14:47:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-27 18:47:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[xcode-cocoapods-project-setup]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>2978</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Cocoapods Project Setup</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/objective-c-tutorials/xcode-objcswift-cocoapods-project-setup/</link>
		<pubDate>Fri, 27 May 2016 18:54:50 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=3041</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>The Objective-C/Swift brainCloud SDK is distributed through <code>CocoaPods</code>. In order to install the library, simply add the following to your <code>Podfile</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"shell","linenumbers":"false"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="shell" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">pod 'BrainCloud'</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>If you're a newcomer to the <code>CocoaPods</code> world, you can find documentation on how to set up your Xcode project here:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://guides.cocoapods.org/">https://guides.cocoapods.org/</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that if you are using Swift or the "use_frameworks!" flag and Cocoapods 1.0.0, you'll get an error about transitive dependencies when including brainCloud. To fix this update Cocoapods to version 1.1.0.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3041</wp:post_id>
		<wp:post_date><![CDATA[2016-05-27 14:54:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-27 18:54:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[xcode-objcswift-cocoapods-project-setup]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>1516</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="cocoapods"><![CDATA[cocoapods]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Xamarin Project Setup</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/c-sharp-tutorials/xamarin-project-setup/</link>
		<pubDate>Mon, 30 May 2016 17:17:46 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=3050</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>brainCloud supports both Android and iOS development through Xamarin (Windows, Windows Phone, and UWP are not yet supported). &nbsp;This tutorial goes through the steps of adding the brainCloud .NET library&nbsp;to a Xamarin&nbsp;Shared Project.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Preparing &amp; Including&nbsp;The&nbsp;Library</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The first step is to download the latest brainCloud library from GitHub: &nbsp;https://github.com/getbraincloud/Unity-Csharp</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>From there we need to remove some non-Xamarin compatible files from the library.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Navigate to the&nbsp;BrainCloudClient | src directory and move the BrainCloud folder to another location (like your desktop)</li><li>Inside the BrainCloud folder, delete the following directories:
<ul>
<li>LitJson</li>
<li>Unity</li>
</ul>
</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Finally, we can add the library to the shared code project. &nbsp;Drag and drop the BrainCloud folder onto the shared code project in Visual Studio and it will automatically be copied to the correct directory and added to the project.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":3056,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/05/xamarinDocAddToProject.png"><img src="/apidocs/wp-content/uploads/2016/05/xamarinDocAddToProject.png" alt="xamarinDocAddToProject" class="wp-image-3056"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>That's all the setup needed to add the brainCloud library to your project! Now you can get started using brainCloud in your app.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3050</wp:post_id>
		<wp:post_date><![CDATA[2016-05-30 13:17:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-30 17:17:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[xamarin-project-setup]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>3060</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-folder"><![CDATA[braincloud folder]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-library"><![CDATA[braincloud library]]></category>
		<category domain="yst_prominent_words" nicename="code"><![CDATA[code]]></category>
		<category domain="yst_prominent_words" nicename="code-project"><![CDATA[code project]]></category>
		<category domain="yst_prominent_words" nicename="directory"><![CDATA[directory]]></category>
		<category domain="yst_prominent_words" nicename="folder"><![CDATA[folder]]></category>
		<category domain="yst_prominent_words" nicename="library"><![CDATA[library]]></category>
		<category domain="yst_prominent_words" nicename="project"><![CDATA[project]]></category>
		<category domain="yst_prominent_words" nicename="shared"><![CDATA[shared]]></category>
		<category domain="yst_prominent_words" nicename="shared-code"><![CDATA[shared code]]></category>
		<category domain="yst_prominent_words" nicename="shared-code-project"><![CDATA[shared code project]]></category>
		<category domain="yst_prominent_words" nicename="windows"><![CDATA[windows]]></category>
		<category domain="yst_prominent_words" nicename="xamarin"><![CDATA[xamarin]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>C# Tutorials</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/c-sharp-tutorials/</link>
		<pubDate>Mon, 30 May 2016 17:17:13 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=3060</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Below is a list of C# tutorials:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="/apidocs/tutorials/c-sharp-tutorials/xamarin-project-setup/">Xamarin Project Setup</a></li><li><a href="/apidocs/tutorials/c-sharp-tutorials/getting-started-with-c-sharp/">Getting Started With C#</a></li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3060</wp:post_id>
		<wp:post_date><![CDATA[2016-05-30 13:17:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-30 17:17:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c-sharp-tutorials]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>63</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="c"><![CDATA[c#]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Getting Started With C#</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/c-sharp-tutorials/getting-started-with-c-sharp/</link>
		<pubDate>Mon, 30 May 2016 20:07:10 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=3066</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This tutorial goes over the basics of using brainCloud in C#. &nbsp;This applies to .NET applications, Xamarin, and even Unity.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Accessing brainCloud</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>All of brainCloud's features are accessible through the BrainCloudClient class. Typically you will only ever need one instance of the BrainCloudClient in your application.  For this reason, the BrainCloudClient can function as a singleton, and can be accessed through the <strong>BrainCloudClient.Instance</strong> property.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Initializing</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Before you can do anything with brainCloud the BrainCloudClient must be initialized. &nbsp;This is accomplished by providing your App’s details to the Client via the Initialize function.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">BrainCloudClient.Instance.Initialize(
    "https://sharedprod.braincloudservers.com/dispatcherv2",
    "49e1d5ad-12345-4144-ac59-6e02c64f1b12",
    "123456",
    "1.0.0");</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":3} -->
<h3>Updating the Client</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To ensure callbacks are executed on the main thread you must call the Update method of the BrainCloudClient. &nbsp;Typically you will want to set up some version of an Update loop in your app that will constantly update the client every so often (ex. every 100ms).</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">void MyUpdateMethod()
{
    BrainCloudClient.Instance.Update();
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":3} -->
<h3>Authenticating</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Once a method is in place to run the callbacks via the Update() method you can start making API calls.  The first call you'll likely need to make is one of the authentication methods to get an active session.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>All API methods in brainCloud that contact the brainCloud server take callbacks as parameters, one for success and one for failure. &nbsp;These will get called when a response is received from the server, or the request times out. &nbsp;Here is a simple example of the authentication process in a console application:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">private void Authenticate()
{
    // Get username
    Console.WriteLine("Enter your username: ");
    string username = Console.ReadLine();

    // Get password
    Console.WriteLine("Enter your password: ");
    string password = Console.ReadLine();

    //Authenticate
    BrainCloudClient.Instance.AuthenticationService.AuthenticateUniversal(
        username,
        password,
        true,
        ApiSuccess,
        ApiError);
}

private void ApiSuccess(string jsonResponse, object cb)
{
    Console.WriteLine("Authenticate Success!");
}

private void ApiError(int statusCode, int reasonCode, string statusMessage, object cb)
{
    Console.WriteLine("Authenticate Failed!");
}</pre>
<!-- /wp:enlighter/codeblock -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3066</wp:post_id>
		<wp:post_date><![CDATA[2016-05-30 16:07:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-30 20:07:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[getting-started-with-c-sharp]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>3060</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="api"><![CDATA[api]]></category>
		<category domain="yst_prominent_words" nicename="application"><![CDATA[application]]></category>
		<category domain="yst_prominent_words" nicename="authentication"><![CDATA[authentication]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloudclient"><![CDATA[braincloudclient]]></category>
		<category domain="yst_prominent_words" nicename="call"><![CDATA[call]]></category>
		<category domain="yst_prominent_words" nicename="callbacks"><![CDATA[callbacks]]></category>
		<category domain="yst_prominent_words" nicename="client"><![CDATA[client]]></category>
		<category domain="yst_prominent_words" nicename="function"><![CDATA[function]]></category>
		<category domain="yst_prominent_words" nicename="method"><![CDATA[method]]></category>
		<category domain="yst_prominent_words" nicename="methods"><![CDATA[methods]]></category>
		<category domain="yst_prominent_words" nicename="server"><![CDATA[server]]></category>
		<category domain="yst_prominent_words" nicename="typically"><![CDATA[typically]]></category>
		<category domain="yst_prominent_words" nicename="update"><![CDATA[update]]></category>
		<category domain="yst_prominent_words" nicename="update-method"><![CDATA[update method]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Building The Plugin For Older Versions of Unreal</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/unreal-tutorials/building-the-plugin-for-older-versions-of-unreal/</link>
		<pubDate>Tue, 12 Jul 2016 20:14:18 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=3159</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>New versions of brainCloud will always include both C++ source code and compiled binaries for&nbsp;the latest version of Unreal available when released. &nbsp;However, if you are required to use an older version of Unreal but need the latest brainCloud features you will need to recompile the binaries.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>NOTE:</strong> This is only required if your project is a <strong>Blueprint Only</strong> project! Source code projects will automatically prompt you to recompile if the binaries do not match your engine version.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Building The brainCloud Plugin</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To begin, download the latest version of the brainCloud plugin from the Portal. &nbsp;Client downloads can be found under Core App Info | Platforms.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once you've got the latest plugin perform these steps:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Extract the zip</li><li>Inside the extracted folder, find the Binaries folder under BCClient</li><li>Delete the Binaries folder</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>We now need to create a project to recompile the source in.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Open the Unreal Editor and create a new&nbsp;<strong>C++&nbsp;</strong>project.</li><li>Close the editor and Visual Studio/Xcode if they are open</li><li>Navigate to the newly created project's root directory</li><li>Create a new folder called Plugins</li><li>Move the BCClient folder from the extracted zip into the Plugins folder</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Now we're ready to recompile the binaries. &nbsp;Open the uproject file for the project and you should see this prompt:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":3160,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/07/unreal_plugin_build.png"><img src="/apidocs/wp-content/uploads/2016/07/unreal_plugin_build.png" alt="unreal_plugin_build" class="wp-image-3160"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Click Yes to rebuild the binaries for the plugin. &nbsp;Once the build&nbsp;is complete the editor will open, close the editor to continue.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Navigate to the Project Root | Plugins | BCClient folder and you should see two new folders,&nbsp;Binaries and Intermediate.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Delete the Intermediate folder</li><li>Copy the BCClient folder out of the build project</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The new BCClient folder is now ready to be added to your blueprint only project! &nbsp;If you haven't yet installed the plugin in your project see <a href="/apidocs/tutorials/unreal-tutorials/setting-up-the-braincloud-plugin/">here for instructions</a>.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3159</wp:post_id>
		<wp:post_date><![CDATA[2016-07-12 16:14:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-12 20:14:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[building-the-plugin-for-older-versions-of-unreal]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>2206</wp:post_parent>
		<wp:menu_order>10</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="bcclient"><![CDATA[bcclient]]></category>
		<category domain="yst_prominent_words" nicename="bcclient-folder"><![CDATA[bcclient folder]]></category>
		<category domain="yst_prominent_words" nicename="binaries"><![CDATA[binaries]]></category>
		<category domain="yst_prominent_words" nicename="binaries-folder"><![CDATA[binaries folder]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-plugin"><![CDATA[braincloud plugin]]></category>
		<category domain="yst_prominent_words" nicename="close-the-editor"><![CDATA[close the editor]]></category>
		<category domain="yst_prominent_words" nicename="create"><![CDATA[create]]></category>
		<category domain="yst_prominent_words" nicename="editor"><![CDATA[editor]]></category>
		<category domain="yst_prominent_words" nicename="latest-version"><![CDATA[latest version]]></category>
		<category domain="yst_prominent_words" nicename="open"><![CDATA[open]]></category>
		<category domain="yst_prominent_words" nicename="plugin"><![CDATA[plugin]]></category>
		<category domain="yst_prominent_words" nicename="plugins"><![CDATA[plugins]]></category>
		<category domain="yst_prominent_words" nicename="recompile"><![CDATA[recompile]]></category>
		<category domain="yst_prominent_words" nicename="recompile-the-binaries"><![CDATA[recompile the binaries]]></category>
		<category domain="yst_prominent_words" nicename="source"><![CDATA[source]]></category>
		<category domain="yst_prominent_words" nicename="source-code"><![CDATA[source code]]></category>
		<category domain="yst_prominent_words" nicename="unreal"><![CDATA[unreal]]></category>
		<category domain="yst_prominent_words" nicename="version"><![CDATA[version]]></category>
		<category domain="yst_prominent_words" nicename="version-of-unreal"><![CDATA[version of unreal]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Push Notifications</title>
		<link>https://staging.getbraincloud.com/apidocs/introduction-2/notifications/</link>
		<pubDate>Tue, 23 Aug 2016 15:48:03 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=3251</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Reach out to your players, no matter what their device.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>brainCloud supports push notifications across <em>iOS</em>, <em>Android</em> and <em>Facebook</em> - with more platforms coming soon.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>brainCloud's advanced notifications features include:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Localization</strong> - deliver the push notification in the user's native language</li><li><strong>Segments</strong> - organize your users into segments based on the criteria you specify - and send push notifications&nbsp;accordingly</li><li><strong>Promotions</strong> - automatically send notifications to indicate the start of new promotions</li><li><strong>Scheduled</strong> - schedule notifications to happen at a later date - even specific to timezone</li><li><strong>Groups</strong> - send notifications to specific user Groups</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>For more information on brainCloud notifications, refer to the <a href="https://staging.getbraincloud.com/apidocs/portal-usage/">Push Notification tutorials</a> in the Connecting to Third Party Systems section.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3251</wp:post_id>
		<wp:post_date><![CDATA[2016-08-23 11:48:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-23 15:48:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[notifications]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>73</wp:post_parent>
		<wp:menu_order>16</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="groups"><![CDATA[groups]]></category>
		<category domain="yst_prominent_words" nicename="notification"><![CDATA[notification]]></category>
		<category domain="yst_prominent_words" nicename="notifications"><![CDATA[notifications]]></category>
		<category domain="yst_prominent_words" nicename="promotions"><![CDATA[promotions]]></category>
		<category domain="yst_prominent_words" nicename="push"><![CDATA[push]]></category>
		<category domain="yst_prominent_words" nicename="push-notification"><![CDATA[push notification]]></category>
		<category domain="yst_prominent_words" nicename="push-notifications"><![CDATA[push notifications]]></category>
		<category domain="yst_prominent_words" nicename="segments"><![CDATA[segments]]></category>
		<category domain="yst_prominent_words" nicename="send"><![CDATA[send]]></category>
		<category domain="yst_prominent_words" nicename="send-notifications"><![CDATA[send notifications]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Compatibility Settings</title>
		<link>https://staging.getbraincloud.com/apidocs/api-modules/compatibility-settings/</link>
		<pubDate>Tue, 23 Aug 2016 19:44:40 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=3263</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>brainCloud is constantly improving.&nbsp;We work very hard to ensure&nbsp;that your apps still work even as the platform evolves.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To achieve this, we sometimes introduce <em>compatibility settings</em> that preserve legacy behaviours for older apps.&nbsp;These settings are configured on the <strong>Design | Core App Info | Advanced Settings</strong> page of the portal.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As new compatibility settings are added, they normally:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Default to <em><strong>enabled</strong></em> for <em>existing apps</em> to ensure compatibility</li><li>Default to <em><strong>disabled</strong></em> for <em>new apps</em>, so that they aren't subject to&nbsp;legacy system limitations</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>It&nbsp;is best for&nbsp;overall behaviour and performance if the compatibility settings are *not* enabled. It is therefore recommended that app developers periodically review these settings, to ensure that <em>only required compatibility settings are enabled</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>Use legacy Cloud Code result format</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In <a href="https://staging.getbraincloud.com/apidocs/release-2-10-0/">brainCloud 2.10</a> we adjusted the JSON returns from Cloud Code scripts to align them better with the returns from regular API calls. This setting allows older scripts to still run.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Enable checking of Incoming Events with each API message</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>brainCloud includes an <a rel="noreferrer noopener" aria-label=" (opens in a new tab)" href="https://staging.getbraincloud.com/apidocs/apiref/#capi-event" target="_blank">Events</a> system that can be used to send messages (events) to individual users. This is useful for sending chat messages, awards, gifts, challenges and the like. Earlier builds of brainCloud would automatically check for any incoming events for a user during the processing of each and every API call. This processing has a server toll, and as most apps aren't using events, unnecessarily slowed down processing for everyday apps. Apps can instead use the <a rel="noreferrer noopener" aria-label=" (opens in a new tab)" href="https://staging.getbraincloud.com/apidocs/apiref/#capi-event-getevents" target="_blank">GetEvents()</a> method to poll for new events.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This behavior is now turned off by default since <a href="https://staging.getbraincloud.com/apidocs/release-2-14-0/">brainCloud 2.14</a>, and can only be enabled for Business Plan (or above) apps. <em>Note that enabling this feature incurs an additional 1/2 point bulk API count per brainCloud API method call.</em></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Return User Entities during Authenticate and ReadPlayerState methods</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Prior to <a href="https://staging.getbraincloud.com/apidocs/release-2-22-0/">Release 2.22</a>, brainCloud used to return all of a user's User Entities in response to Authenticate() and ReadPlayerState() methods. This was pretty convenient for quickly launching and logging into apps - but didn't scale when some apps started storing thousands of entities per user!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>brainCloud no longer does this by default.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Return legacy-format Social Leaderboard results</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>brainCloud added support for manually managed friends in <a href="https://staging.getbraincloud.com/apidocs/release-2-22-0/">Release 2.22</a> - the implementation of which forced some changes to the JSON-data returned from the social leaderboard APIs. This flag should only be enabled if your app pre-dates 2.22 and depends upon the details of the old format.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Enable legacy Currency handling (balance not enforced for Consume)</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In <a href="https://staging.getbraincloud.com/apidocs/release-2-25-0/">brainCloud 2.25</a> we fixed a defect where the server was not correctly enforcing currency balances under all scenarios in currency consumption. This has since been addressed, but the compatibility flag exists in case some apps were depending upon the prior behaviour.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Default to returning full Entity contents for create and update operations</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Prior to <a href="/apidocs/release-2-25-0/">Release&nbsp;2.25</a>, brainCloud always returned the full contents of an entity object after Create() and Update() operations. This seemed to make sense at the time, but as some customers expanded to writing objects of 100K or more, it became painfully obvious that this was a waste of bandwidth.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Funnel Custom and User File retrieval through app servers (slower)</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Enabling this setting disables the Content Distribution Network (CDN) optimizations that were introduced in <a href="https://staging.getbraincloud.com/apidocs/release-2-25-0/">brainCloud 2.25</a>. The main reason you might want to do this is because your client doesn't properly handle the HTTP-based Redirects that are part of CDN processing. [Basically, your app asks us for a particular file, and we redirect the request to the appropriate CDN server. Older versions of Unity in particular do not support redirects - so this *should* be enabled for existing Unity-based apps.]</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>Work-around: Apps without redirect support should&nbsp;use the <a href="/apidocs/apiref/#capi-s3-getcdnurl" target="_blank" rel="noreferrer noopener"><code>GetCDNUrl()</code></a> method to retrieve&nbsp;the CDN version of a file's URL for faster downloads (instead of enabling this setting).</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em><strong>For best results, the file retrieval compatibility flag should be left un-checked.</strong></em></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Allow Currency Calls from Client</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In brainCloud 3.2, as a security +&nbsp;anti-fraud measure, we removed [by default] the ability for client apps to directly manage virtual currency balances. The effected methods, <code>AwardCurrency()</code>, <code>ConsumeCurrency()</code> and <code>ResetCurrency()</code> are still callable from server-side Cloud Code, which is much more secure.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Enabling this compatibility flag overrides this new restriction, and allows these calls to continue to be called from the client libraries.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Generate Legacy Event Ids</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Prior to release 3.2, the brainCloud Event System used numeric event ids: <code>eventId</code>. These ids had some significant limitations, including being slow to generate. The system has now been refactored to use a new-and-improved id: <code>evId</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Enabling this compatibility flag tells the system to continue to create (at some performance penalty) the old <code>eventId</code> for Events. This is required if your app is still using the older API methods. <em>It is recommended that all apps move to the newer APIs, and the new <code>evId</code>, at their earliest convenience.</em></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3263</wp:post_id>
		<wp:post_date><![CDATA[2016-08-23 15:44:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-23 19:44:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[compatibility-settings]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>21</wp:post_parent>
		<wp:menu_order>27</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="apps"><![CDATA[apps]]></category>
		<category domain="yst_prominent_words" nicename="authenticate-and-readplayerstate"><![CDATA[authenticate and readplayerstate]]></category>
		<category domain="yst_prominent_words" nicename="authenticate-and-readplayerstate-methods"><![CDATA[authenticate and readplayerstate methods]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-2-25"><![CDATA[braincloud 2.25]]></category>
		<category domain="yst_prominent_words" nicename="cloud-code"><![CDATA[cloud code]]></category>
		<category domain="yst_prominent_words" nicename="compatibility"><![CDATA[compatibility]]></category>
		<category domain="yst_prominent_words" nicename="compatibility-flag"><![CDATA[compatibility flag]]></category>
		<category domain="yst_prominent_words" nicename="compatibility-settings"><![CDATA[compatibility settings]]></category>
		<category domain="yst_prominent_words" nicename="create-and-update"><![CDATA[create and update]]></category>
		<category domain="yst_prominent_words" nicename="create-and-update-operations"><![CDATA[create and update operations]]></category>
		<category domain="yst_prominent_words" nicename="currency-balances"><![CDATA[currency balances]]></category>
		<category domain="yst_prominent_words" nicename="enabling-this-compatibility"><![CDATA[enabling this compatibility]]></category>
		<category domain="yst_prominent_words" nicename="enabling-this-compatibility-flag"><![CDATA[enabling this compatibility flag]]></category>
		<category domain="yst_prominent_words" nicename="incoming-events"><![CDATA[incoming events]]></category>
		<category domain="yst_prominent_words" nicename="prior-to-release"><![CDATA[prior to release]]></category>
		<category domain="yst_prominent_words" nicename="readplayerstate-methods"><![CDATA[readplayerstate methods]]></category>
		<category domain="yst_prominent_words" nicename="release-2-22"><![CDATA[release 2.22]]></category>
		<category domain="yst_prominent_words" nicename="social-leaderboard"><![CDATA[social leaderboard]]></category>
		<category domain="yst_prominent_words" nicename="user-entities"><![CDATA[user entities]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>One Way Offline Example</title>
		<link>https://staging.getbraincloud.com/apidocs/api-modules/multiplayer/one-way-offline-multiplayer-example/</link>
		<pubDate>Fri, 02 Sep 2016 17:12:18 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=3477</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><em>This example describes an approach for implementing a Clash of Clans, Boom Beach, etc. type of game.</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are many ways to solve this functionality, but in the following example, the player creates <strong>Read Only</strong> User Entities to define their defense information.  All player data manipulation is done on the server via Cloud Code.  In this tutorial, we represent the entire map in just one entity, but the same theory would apply if you represented each defense<em> in a separate entity (which would definitely be more efficient for larger maps).</em></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Shared Entity Data</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following is an example of the type of data that might be created and shared in a One Way match. &nbsp;It defines a grid of defenses set up beforehand by the defender that will be constructed for the attacking player to attempt to defeat. &nbsp;This data is created and managed via the <a href="/apidocs/apiref/#capi-entity">User Entity APIs</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that this data has an ACL of Read-Only.  This ensures that it cannot be edited by anyone except the owner of the data (in this case the defender).  This is not necessary but recommended to increase the security of the data.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The example below is the data portion of the shared user entity.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
    "grid": {
        "gridType": "field",
        "dimesionX": 14,
        "dimensionY": 10,
        "background": "image.png"
    },
    "defenses": [
        {
            "type": "Turret",
            "x": 3,
            "y": 3,
            "dmg": 3.5,
            "hp": 100,
            "state": "active"
        }, {
            "type": "Catapult",
            "x": 9,
            "y": 9,
            "dmg": 7,
            "hp": 215,
            "state": "active"
        }
    ]
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading -->
<h2>Match Lifecycle</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To start a match all that is required is the target player's profileId&nbsp;to call <a href="https://staging.getbraincloud.com/apidocs/apiref/#capi-oneway-startmatch">StartMatch()</a>&nbsp;with.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><span style="font-weight: 400;">All read-only and read-write data shared by the opponent will be returned within the “entities” section of the StartMatch response.  In this case, our example entity from above would be returned, so that the attacker can set up the defense that they are about to attack.</span></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It is important at this time to store the&nbsp;<span style="font-weight: 400;"><code>playbackStreamId</code> returned from <code>StartMatch</code> as you will need it to add events as the attack occurs.</span></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here is an example response to StartMatch:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
    "status": 200,
    "data": {
        "playbackStreamId": "56fa4fce-6df1-4c74-8b71-81bdc17166a3",
        "initiatingPlayerId": "b67b2d73-1e8c-42e9-9be5-9c1879a48555",
        "targetPlayerId": "0da5ad24-2341-42f8-acb5-57aa2dd4ae94",
        "status": "STARTED",
        "summary": {},
        "initialSharedData": {
            "entities": [
                {
                    "playerId": "0da5ad24-2341-42f8-acb5-57aa2dd4ae94",
                    "gameId": "20484",
                    "entityId": "017ad242-62c9-47d0-ad60-626cb649571b",
                    "entityType": "defenseData",
                    "version": 1,
                    "data": {
                        "grid": {
                            "gridType": "field",
                            "dimesionX": 14,
                            "dimensionY": 10,
                            "background": "image.png"
                        },
                        "defenses": [
                            {
                                "type": "Turret",
                                "x": 3,
                                "y": 3,
                                "dmg": 3.5,
                                "hp": 100,
                                "state": "active"
                            },
                            {
                                "type": "Catapult",
                                "x": 9,
                                "y": 9,
                                "dmg": 7,
                                "hp": 215,
                                "state": "active"
                            }
                        ]
                    },
                    "acl": {
                        "other": 1
                    },
                    "createdAt": 1472760716905,
                    "updatedAt": 1472760716905
                }
            ],
            "statistics": {}
        },
        "events": [],
        "expiryTime": 1472761351046,
        "createdAt": 1472760751058,
        "updatedAt": 1472760751058
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Now that the match has started its time to update the Playback Stream of the match with the events that occur while the attacker is playing. &nbsp;This is done via the <a href="http://internal.braincloudservers.com/s3/apidocs/index.html#capi-playback">Playback Stream APIs</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Use the <a href="http://internal.braincloudservers.com/s3/apidocs/index.html#capi-playback-addevent">AddEvent()</a>&nbsp;API to save events like&nbsp;<em>Initial Attackers</em>, <em>Unit Attacked</em>, <em>User Tapped</em>, <em>Boost Used</em>, <em>Match Complete</em>, etc. &nbsp;Data for the event being added should go in <code>eventData</code>,&nbsp;whereas&nbsp;the summary data should be&nbsp;used&nbsp;to store information about the completion of the attack, so that we can modify items in the cloud script on completion of the match.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here is an example of an <code>AddEvent()</code> call's summary data:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
    "unitsDestroyedAtIndex": [
        "entity1",
        "entity2"
    ],
    "goldStolen": 100,
    "ratingChange": 5
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Once the attack is complete its time to finalize the match result with <a href="http://internal.braincloudservers.com/s3/apidocs/index.html#capi-oneway-completematch">CompleteMatch()</a>. &nbsp;We will do this using a cloud code script to limit how much control the App has over sensitive data.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Since we were keeping our Playback Stream updated all we need to pass our Cloud Code script is the <code>playbackStreamId</code> and it can retrieve all the data it needs.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here is the example script:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"js"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="js" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">// data is the incoming json object
sStreamId = data.streamId;      // string: match to Complete


// active players services
oneWayMatchService = bridge.getOneWayMatchServiceProxy(); // grab the One way match service
playbackService = bridge.getPlaybackStreamServiceProxy(); // grab the playback stream service
productService = bridge.getProductServiceProxy();         // grab the product service
matchMakingService = bridge.getMatchMakingServiceProxy(); // grab the matchmaking service

// get the match info
matchData = playbackService.ReadStream(sStreamId);      // read the stream data, to get the summary data

// get the target player id, as well as create a bridge to create its target versions of its services
sTargetPlayerId = matchData.targetPlayerId;     
targetSession = bridge.getSessionForProfile(sProfileId); 
targetEntityService = bridge.getEntityServiceProxy(); 
targetMatchMakingService = bridge.getMatchMakingServiceProxy(targetSession);
targetProductService = bridge.getProductServiceProxy(targetSession); 

pSummaryData = matchData.data.summary;
aUnitsDestroyed = pSummaryData.unitsDestroyedAtIndex;

// set the units to be destroyed, and update them
for (var i = 0; i &lt; aUnitsDestroyed.Length; ++i) { 
    entToDestroy = targetEntityService.getEntity(aUnitsDestroyed[i]); 
    entToDestroy.hp = 0; entToDestroy.state = "destroyed"; 
    targetEntityService.updateEntity(entToDestroy.entityId, entToDestroy.entityType, 
    entToDestroy, entToDestroy.acl, entToDestroy.version + 1); 
} 

// steal and award the currency 
iGoldStolen = pSummaryData.goldStolen; 
targetProductService.consumeCurrency("gold", iGoldStolen); 
productService.awardCurrency("gold", iGoldStolen); 

// update the player ratings 
iRatingChange = pSummaryData.ratingChange; 
if (iRatingChange > 0)
{
    matchMakingService.incrementPlayerRating(iRatingChange);
    targetMatchMakingService.decrementPlayerRating(iRatingChange);
}
else
{
    matchMakingService.decrementPlayerRating(iRatingChange);
    targetMatchMakingService.incrementPlayerRating(iRatingChange);
}

oneWayMatchService.CompleteMatch(sStreamId);                       // complete the match

true;</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Use the Playback Stream Service ReadStream() API in order to read all the events associated with a One Way Offline Multiplayer match. All events are returned in sequential order, thus you will be able to replay all the events that occurred in the match. These streams are accessible by all, if the client can get the ID of the Playback Stream, they will be able to replay it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now the one-way match is complete, and both users’ information has been updated via cloud code. This helps prevent client-side manipulation or user's data.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For more information:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" aria-label=" (opens in a new tab)" href="https://staging.getbraincloud.com/apidocs/apiref/#capi-oneway" target="_blank">One-Way Match API</a></li><li><a rel="noreferrer noopener" aria-label=" (opens in a new tab)" href="https://staging.getbraincloud.com/apidocs/apiref/#capi-playback" target="_blank">PlaybackStream API</a></li><li><a href="https://staging.getbraincloud.com/apidocs/apiref/#capi-matchmaking" target="_blank" rel="noreferrer noopener" aria-label=" (opens in a new tab)">Matchmaking API</a></li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3477</wp:post_id>
		<wp:post_date><![CDATA[2016-09-02 13:12:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-09-02 17:12:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[one-way-offline-multiplayer-example]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>102</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="able-to-replay"><![CDATA[able to replay]]></category>
		<category domain="yst_prominent_words" nicename="api"><![CDATA[api]]></category>
		<category domain="yst_prominent_words" nicename="cloud"><![CDATA[cloud]]></category>
		<category domain="yst_prominent_words" nicename="cloud-code"><![CDATA[cloud code]]></category>
		<category domain="yst_prominent_words" nicename="cloud-code-script"><![CDATA[cloud code script]]></category>
		<category domain="yst_prominent_words" nicename="code"><![CDATA[code]]></category>
		<category domain="yst_prominent_words" nicename="code-script"><![CDATA[code script]]></category>
		<category domain="yst_prominent_words" nicename="data"><![CDATA[data]]></category>
		<category domain="yst_prominent_words" nicename="entity"><![CDATA[entity]]></category>
		<category domain="yst_prominent_words" nicename="events"><![CDATA[events]]></category>
		<category domain="yst_prominent_words" nicename="example"><![CDATA[example]]></category>
		<category domain="yst_prominent_words" nicename="information"><![CDATA[information]]></category>
		<category domain="yst_prominent_words" nicename="match"><![CDATA[match]]></category>
		<category domain="yst_prominent_words" nicename="one-way-match"><![CDATA[one-way match]]></category>
		<category domain="yst_prominent_words" nicename="playback"><![CDATA[playback]]></category>
		<category domain="yst_prominent_words" nicename="playback-stream"><![CDATA[playback stream]]></category>
		<category domain="yst_prominent_words" nicename="stream"><![CDATA[stream]]></category>
		<category domain="yst_prominent_words" nicename="summary-data"><![CDATA[summary data]]></category>
		<category domain="yst_prominent_words" nicename="user"><![CDATA[user]]></category>
		<category domain="yst_prominent_words" nicename="user-entity"><![CDATA[user entity]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Recent Blog Posts</title>
		<link>https://staging.getbraincloud.com/apidocs/recent-blogs/</link>
		<pubDate>Thu, 29 Sep 2016 20:10:23 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=3535</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:shortcode -->
[display-posts category="Blog" include_excerpt="true" wrapper="div" include_date="true" posts_per_page="50" ]
<!-- /wp:shortcode -->

<!-- wp:heading -->
<h2>&nbsp;</h2>
<!-- /wp:heading -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3535</wp:post_id>
		<wp:post_date><![CDATA[2016-09-29 16:10:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-09-29 20:10:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[recent-blogs]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>10</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Email Authentication</title>
		<link>https://staging.getbraincloud.com/apidocs/api-modules/authentication/email-authentication/</link>
		<pubDate>Fri, 21 Oct 2016 17:20:43 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=3619</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>brainCloud's email authentication&nbsp;service allows end-users to identify themselves with their email address and a unique password for the app. Developers may optionally decide to validate these email addresses via our Email Authentication service (which involves sending an email to the user with an URL that the user must click on to validate).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As of brainCloud 3.1, this feature&nbsp;utilizes the&nbsp;developer's own email service account to ensure that emails sent on behalf of the application&nbsp;are customizable and fully controlled by the developer. brainCloud currently supports <a href="http://sendgrid.com" target="_blank" rel="noreferrer noopener">SendGrid</a> integration - but may add additional email providers in the future.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To being using Email Verification, first, create a SendGrid account, and configure it for use with brainCloud via the <a href="https://portal.braincloudservers.com/admin/dashboard#/development/integrations-manage-integrations" target="_blank" rel="noreferrer noopener"><strong>Design | Integrations | Manage Integrations</strong></a> section of the portal.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once the integration is configured, the following settings can be customized for Email Verification on the <a href="https://portal.braincloudservers.com/admin/dashboard#/development/authentication-email" target="_blank" rel="noreferrer noopener"><strong>Design | Authentication | Email Authentication</strong></a> page:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><em>Send Verification Email Using...</em> &nbsp;- confirms that a verification email should be sent to the&nbsp;email address of the end-user when they sign up</li><li><em>Reject Unverified Email Logins</em> - if selected, it means that brainCloud will not allow that user into the app until they have clicked the verification link sent in the email</li><li><em>Send Confirmation Email</em> - if selected, means that brainCloud will send a response email back to the user after they have clicked the verification link. This is a good time to add a welcome message, plus it improves your email completion ratio (since it is guaranteed to work).</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Click for&nbsp;<a href="/apidocs/portal-usage/email-integration-sendgrid/">step-by-step instructions</a> on integrating brainCloud with your SendGrid account.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Authentication Template Types</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>brainCloud allows you to configure the presentation of the emails to be sent to your users. There are two options:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><em>Simple plain text</em> -&nbsp;use&nbsp;plain text templates for the authentication emails to your users. These are the simplest to set up (since you don't need to create custom templates), but they aren't very professional looking</li><li><em>Rich Email templates</em> - uses the email service's template system for formatting the emails to be sent. Much more professional looking, but of course requires additional configuration work in the email system's portal to set up</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Configuring Templates</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following substitutions are available when creating templates:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>{{appName}} the name of the app, as data filled in brainCloud</li><li>{{profileId}} the profile id of the user</li><li>{{userName}} the name of the end-user (note - not available at the beginning of account creation, so not useful for use in email verification templates)</li><li>{{userEmail}} the user's email</li><li>{{userCountryCode}} the user's <g class="gr_ gr_274 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins replaceWithoutSep" id="274" data-gr-id="274">country</g> code, as detected from their device</li><li>{{userLanguage}} the user's language, as detected from their device</li><li>{{webUrl}} a web-<g class="gr_ gr_19 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace" id="19" data-gr-id="19">url</g> passed into the message. For example - for email verification or password reset</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3619</wp:post_id>
		<wp:post_date><![CDATA[2016-10-21 13:20:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-10-21 17:20:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[email-authentication]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>23</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="account"><![CDATA[account]]></category>
		<category domain="yst_prominent_words" nicename="authentication"><![CDATA[authentication]]></category>
		<category domain="yst_prominent_words" nicename="authentication-service"><![CDATA[authentication service]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="clicked-the-verification"><![CDATA[clicked the verification]]></category>
		<category domain="yst_prominent_words" nicename="clicked-the-verification-link"><![CDATA[clicked the verification link]]></category>
		<category domain="yst_prominent_words" nicename="detected-from-their-device"><![CDATA[detected from their device]]></category>
		<category domain="yst_prominent_words" nicename="email-address"><![CDATA[email address]]></category>
		<category domain="yst_prominent_words" nicename="email-authentication"><![CDATA[email authentication]]></category>
		<category domain="yst_prominent_words" nicename="email-authentication-service"><![CDATA[email authentication service]]></category>
		<category domain="yst_prominent_words" nicename="email-verification"><![CDATA[email verification]]></category>
		<category domain="yst_prominent_words" nicename="plain-text"><![CDATA[plain text]]></category>
		<category domain="yst_prominent_words" nicename="professional-looking"><![CDATA[professional looking]]></category>
		<category domain="yst_prominent_words" nicename="sendgrid-account"><![CDATA[sendgrid account]]></category>
		<category domain="yst_prominent_words" nicename="sent"><![CDATA[sent]]></category>
		<category domain="yst_prominent_words" nicename="templates"><![CDATA[templates]]></category>
		<category domain="yst_prominent_words" nicename="user"><![CDATA[user]]></category>
		<category domain="yst_prominent_words" nicename="verification"><![CDATA[verification]]></category>
		<category domain="yst_prominent_words" nicename="verification-email"><![CDATA[verification email]]></category>
		<category domain="yst_prominent_words" nicename="verification-link"><![CDATA[verification link]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Google Authentication</title>
		<link>https://staging.getbraincloud.com/apidocs/api-modules/authentication/authentication-google/</link>
		<pubDate>Tue, 25 Oct 2016 20:35:58 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=3634</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This tutorial outlines how to set up Google authentication with the new Google Play API (v4) using the new server auth token.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Configure Google IDs</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Navigate to the&nbsp;<a href="https://sharedprod.braincloudservers.com/admin/dashboard#/development/core-settings-information">Application IDs page</a> for your app in the brainCloud portal. Under Configure Platforms select Google. &nbsp;There are four new application IDs required to handle Google’s updated authentication paradigm. &nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To retrieve them&nbsp;go to Google Play Developer Portal. &nbsp;Navigate to Games Services. &nbsp;Select Linked Apps. &nbsp;At the bottom under Authorization are two values for the new application IDs.<br></p>
<!-- /wp:paragraph -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/11/googleAuth_01_1.jpg" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2016/11/googleAuth_01_1.jpg" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><strong>Google App ID</strong><br>Google Play Developer Portal -&gt; “Application ID“</p>
<!-- /wp:paragraph -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/10/googleAuth_02.jpg" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2016/10/googleAuth_02.jpg" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Next go to Google APIs portal, https://console.developers.google.com/apis/credentials?project=&lt;your project&gt;. &nbsp;Navigate to Credentials, <strong>ENSURE A WEB APPLICATION</strong> is setup for the project you wish to authenticate with brainCloud with. Select the Web Application under OAuth 2.0 client IDs. &nbsp;The remaining information to fill this out is located on this screen.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/10/googleAuth_03.jpg" target="_blank" rel="noreferrer noopener"><img src="/apidocs/wp-content/uploads/2016/10/googleAuth_03.jpg" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><strong>Google Client&nbsp;ID</strong><br>Google API Portal| OAuth 2.0 Client IDs | Web Application | "Client ID"</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Google Client Secret</strong><br>Google API Portal| OAuth 2.0 Client IDs | Web Application | "Client secret"</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Unity - Using GooglePlayServices</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>A step by step tutorial on brainCloud with GooglePlayServices and Unity can be found <a href="/apidocs/portal-usage/authentication-google/">here</a>.</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3634</wp:post_id>
		<wp:post_date><![CDATA[2016-10-25 16:35:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-10-25 20:35:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[authentication-google]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>23</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="2-0-client"><![CDATA[2.0 client]]></category>
		<category domain="yst_prominent_words" nicename="2-0-client-ids"><![CDATA[2.0 client ids]]></category>
		<category domain="yst_prominent_words" nicename="api-portal-oauth"><![CDATA[api portal| oauth]]></category>
		<category domain="yst_prominent_words" nicename="api-portal-oauth-2-0"><![CDATA[api portal| oauth 2.0]]></category>
		<category domain="yst_prominent_words" nicename="api-portal-oauth-2-0-client"><![CDATA[api portal| oauth 2.0 client]]></category>
		<category domain="yst_prominent_words" nicename="application-ids"><![CDATA[application ids]]></category>
		<category domain="yst_prominent_words" nicename="google-api-portal"><![CDATA[google api portal|]]></category>
		<category domain="yst_prominent_words" nicename="google-api-portal-oauth"><![CDATA[google api portal| oauth]]></category>
		<category domain="yst_prominent_words" nicename="google-api-portal-oauth-2-0"><![CDATA[google api portal| oauth 2.0]]></category>
		<category domain="yst_prominent_words" nicename="google-play"><![CDATA[google play]]></category>
		<category domain="yst_prominent_words" nicename="google-play-developer"><![CDATA[google play developer]]></category>
		<category domain="yst_prominent_words" nicename="google-play-developer-portal"><![CDATA[google play developer portal]]></category>
		<category domain="yst_prominent_words" nicename="oauth-2-0"><![CDATA[oauth 2.0]]></category>
		<category domain="yst_prominent_words" nicename="oauth-2-0-client"><![CDATA[oauth 2.0 client]]></category>
		<category domain="yst_prominent_words" nicename="oauth-2-0-client-ids"><![CDATA[oauth 2.0 client ids]]></category>
		<category domain="yst_prominent_words" nicename="play-developer-portal"><![CDATA[play developer portal]]></category>
		<category domain="yst_prominent_words" nicename="portal-oauth-2-0"><![CDATA[portal| oauth 2.0]]></category>
		<category domain="yst_prominent_words" nicename="portal-oauth-2-0-client"><![CDATA[portal| oauth 2.0 client]]></category>
		<category domain="yst_prominent_words" nicename="portal-oauth-2-0-client-ids"><![CDATA[portal| oauth 2.0 client ids]]></category>
		<category domain="yst_prominent_words" nicename="web-application"><![CDATA[web application]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Email Integration - SendGrid</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/email-integration-sendgrid/</link>
		<pubDate>Wed, 26 Oct 2016 18:35:07 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=3659</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>Background</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>brainCloud 3.1 introduced SendGrid transaction email integration. By integrating brainCloud with their own SendGrid account, app developers can:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Utilize SendGrid for all Email Authentication-related emails (validation, reset password, etc.)</li><li>Customize the brainCloud-generated emails using SendGrids template feature</li><li>Send emails to users via the new brainCloud Mail API</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Setup</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following sections will guide you through the process of integrating SendGrid with brainCloud.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Step 1 - Create a SendGrid account</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you haven't already, go to <a href="https://app.sendgrid.com/signup?id=8b9ae93b-ce8a-11e4-b4e5-5fcde71ee009" target="_blank" rel="noopener noreferrer">http://sendgrid.com</a> and create an account. &nbsp;SendGrid offers free accounts that allow you to send up to 12,000 emails per month.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Step 2 - Create a&nbsp;SendGrid&nbsp;API Key</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Note - it can take a few hours for SendGrid to provision your new account - during which time you will be unable to access your SendGrid application ID.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Log into <strong>SendGrid.</strong></li><li>Choose the <strong>Settings | API Keys</strong> page from the left-hand menu.</li><li>Click on <strong>[Create API Key]</strong> in the top-right - choosing the <em>General API Key</em> option.</li><li>Give the key a <strong>Name</strong> - for example, "brainCloud app".</li><li>Configure the <strong>Permissions</strong> for the API key.<br>SendGrid's documentation isn't great in this area. We normally recommend giving your API Key the following minimal permissions:<ul><li>Mail Send - Full Access</li><li>Email Activity - Read Access</li><li>Suppressions - Full Access</li><li>Whitelabel - Full Access</li><li>Template Engine - Full Access</li><li>Inbound Parse - Full Access (for future use - spoiler!)</li><li>Marketing Campaigns - Full Access (future use) </li></ul></li><li>Hit <strong>[Save]</strong>, and copy the API Key into your clipboard or a document for safe keeping.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":3663,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/10/2016-10-26_13-57-29.png"><img src="/apidocs/wp-content/uploads/2016/10/2016-10-26_13-57-29.png" alt="2016-10-26_13-57-29" class="wp-image-3663"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>Step 3 - Configure the SendGrid Integration in brainCloud</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Log into the brainCloud Portal.</li><li>Go to <strong>Design | Integrations | Manage Integrations</strong>, and scroll down to the SendGrid integration.</li><li>Click <strong>[x] Enable SendGrid Integration</strong>, and enter the <em>SendGrid API Key</em> that you created in Step 2.</li><li>Enter in a <em>Default From Address</em> (email) and <em>Default From Name</em>&nbsp;to use in emails sent from your app. &nbsp;You can optionally fill in the Reply-To fields as well.</li><li>Click the <strong>[Test]</strong> button to validate that everything is hooked up properly. brainCloud should send a test email to the email address that you've used to log into the portal.</li><li>Once you've confirmed that the email was sent, click the <strong>[Save]</strong> button to save the configuration and activate the SendGrid integration.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":3665,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/10/2016-10-26_14-05-36.png"><img src="/apidocs/wp-content/uploads/2016/10/2016-10-26_14-05-36.png" alt="SendGrid Integration" class="wp-image-3665"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>Step 4 - Enable&nbsp;Email&nbsp;Verification</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If your app is using Email Authentication, and you'd like to validate the user's email when they create an account, you can do so using our Email Authentication service.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Enabling verification using plain text emails is quick and simple:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Go to <strong>Design | Authentication | Email Authentication</strong> in the portal.</li><li>Click&nbsp;<strong>[x] Send Verification Email Using Sendgrid</strong> to enable sending a verification email to users that create new accounts using their email identity. The email sent to them will contain a link to click to confirm their email address.</li><li>Enable&nbsp;<strong>[x] Reject Unverified Email Login</strong>s to prevent users from logging into their app until they have clicked the link.</li><li>Enable <strong>[x] Send Confirmation Email</strong> to send a final confirmation to the user after they have clicked the link, and successfully signed up to your app. This is a useful time to welcome them to your app, and also helps your email "bounce" ratio (which you have to watch so that your email endpoint doesn't get mistaken&nbsp;for a spam account).</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Then confirm your email templates:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>For now, we assume that you have selected <strong>(x) Use Simple Plain Text</strong> emails.</li><li>Customize the contents of the email templates. Use the Template combo-box to cycle between the different templates. Click on the [+ Add Language] button on the bottom to add additional languages.</li><li>Click [Test] to test individual templates.</li><li>Click&nbsp;[Save]&nbsp;when you are happy with your changes.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":3666,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/10/2016-10-26_14-24-13.png"><img src="/apidocs/wp-content/uploads/2016/10/2016-10-26_14-24-13.png" alt="2016-10-26_14-24-13" class="wp-image-3666"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>&nbsp;</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>Step 5 -&nbsp;Create SendGrid Templates</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The real power of integrating with SendGrid lies in using custom, professional templates in your app.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We won't go through all the&nbsp;ins and outs of creating templates in SendGrid, but we'll take you through the basics:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Log into SendGrid</li><li>Choose the <strong>Templates | Transactional</strong> feature from the left-hand menu</li><li>Click <strong>[Create Template]</strong></li><li>Enter a <strong>Name</strong> for the template - for example, "brainCloud Email Verification"</li><li>Now choose <strong>+ Add Version</strong> from the <strong>Actions</strong> menu.</li><li>Enter a <strong>Version Name</strong> in the <em>Template Name</em> field of the left-hand menu. I would suggest "VerifyV1".<br><em>[Note - this terminology from SendGrid is confusing, and they seem to use it inconsistently. The basics are that a template can have multiple versions, only one of which will be active.]</em></li><li>Edit the <strong>Email Subject</strong> - you should identify your app and the purpose of the email</li><li>Use the editor to <strong>create your template</strong>.  You could use some variation of the text below.</li><li>You'll need to use a substitution parameter to ensure that the web-url gets placed in your email. The valid parameters are listed at the bottom of this page.  For now, add "-weburl-" to the bottom of the page.</li><li>Click <strong>[Save]</strong> to save the template, and then the <strong>left-arrow</strong> on the left-hand side of the screen to exit the editor.</li><li>In the templates list screen, click on the <strong>action button</strong> of the template version, and choose <strong>[Preview &amp; Test]</strong>. Then click <strong>[Send Test], </strong>and then<strong> [Send]</strong> to send yourself a raw test email (without substitution). Click <strong>[Cancel]</strong> to exit the screen.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":3690,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2016/10/2016-11-02_17-08-19.png"><img src="/apidocs/wp-content/uploads/2016/10/2016-11-02_17-08-19.png" alt="verify_email_template" class="wp-image-3690"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>While you're at it, you should create the templates for the <em>Reset Password</em> and <em>Confirmation</em> emails as well. When configuring Rich Templates for email authentication, you must configure all templates for a language at the same time.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Suggested text for <em>Reset Password</em> is:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Hi,</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This e-mail has been sent automatically by AwesomeApp3 based on your request to reset your forgotten password.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To reset your password please click on the link below (or copy and paste the link into your browser) and then enter your new password.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you did not forget your password, please ignore this e-mail.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>{{webUrl}}</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For the confirmation app, the suggested text is totally up to you. Just thank them for registering for your app, and tell them where to get more info!</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Step 6&nbsp;- Configure the Rich Templates in brainCloud</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Now that we've created our SendGrid templates, let's hook them up.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Go to <strong>Design | Authentication | Email Authentication</strong> in the brainCloud Portal</li><li>Select <strong>(x) Use rich email service templates</strong></li><li>Go to the <em>Verification Email</em> combo box, and choose the appropriate template from the list. Click <strong>[Test]</strong> to send yourself a test email.</li><li>Do the same for the <em>Password Reset</em> and <em>Verification Confirmation</em> settings, and then click <strong>[Save]</strong></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Voila!&nbsp;You are&nbsp;all set!</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Step 7&nbsp;- [Optional] Send email from your app!</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You can also send emails to users programmatically. Check out our new <a href="https://staging.getbraincloud.com/apidocs/apiref/#capi-mail" target="_blank" rel="noreferrer noopener" aria-label=" (opens in a new tab)">Mail Service</a> APIs!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3659</wp:post_id>
		<wp:post_date><![CDATA[2016-10-26 14:35:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-10-26 18:35:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[email-integration-sendgrid]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>54</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="api-key"><![CDATA[api key]]></category>
		<category domain="yst_prominent_words" nicename="app"><![CDATA[app]]></category>
		<category domain="yst_prominent_words" nicename="click"><![CDATA[click]]></category>
		<category domain="yst_prominent_words" nicename="click-the-button"><![CDATA[click the button]]></category>
		<category domain="yst_prominent_words" nicename="create-a-sendgrid"><![CDATA[create a sendgrid]]></category>
		<category domain="yst_prominent_words" nicename="create-an-account"><![CDATA[create an account]]></category>
		<category domain="yst_prominent_words" nicename="email-authentication"><![CDATA[email authentication]]></category>
		<category domain="yst_prominent_words" nicename="emails-to-users"><![CDATA[emails to users]]></category>
		<category domain="yst_prominent_words" nicename="full-access"><![CDATA[full access]]></category>
		<category domain="yst_prominent_words" nicename="left-hand-menu"><![CDATA[left-hand menu]]></category>
		<category domain="yst_prominent_words" nicename="log-into-sendgrid"><![CDATA[log into sendgrid]]></category>
		<category domain="yst_prominent_words" nicename="plain-text-emails"><![CDATA[plain text emails]]></category>
		<category domain="yst_prominent_words" nicename="reset-password"><![CDATA[reset password]]></category>
		<category domain="yst_prominent_words" nicename="send-emails-to-users"><![CDATA[send emails to users]]></category>
		<category domain="yst_prominent_words" nicename="sendgrid"><![CDATA[sendgrid]]></category>
		<category domain="yst_prominent_words" nicename="sendgrid-api-key"><![CDATA[sendgrid api key]]></category>
		<category domain="yst_prominent_words" nicename="sendgrid-integration"><![CDATA[sendgrid integration]]></category>
		<category domain="yst_prominent_words" nicename="templates"><![CDATA[templates]]></category>
		<category domain="yst_prominent_words" nicename="test-email"><![CDATA[test email]]></category>
		<category domain="yst_prominent_words" nicename="verification-email"><![CDATA[verification email]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>CC Tutorial6 – S2S Scripts</title>
		<link>https://staging.getbraincloud.com/apidocs/cloud-code-central/cloud-code-tutorials/s2s-cloud-code-scripts/</link>
		<pubDate>Fri, 21 Jul 2017 17:14:12 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=4035</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Want to create S2S cloud code script, but don't know where to start?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this tutorial, we will take you through the process of creating a simple S2S script, and calling it from an external client (Postman).</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Step 1 - Create the S2S Script (AddNumbers)</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Go to the&nbsp;brainCloud&nbsp;Portal and open the <strong>Design | Cloud&nbsp;Code | Scripts</strong> page</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":4076,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2017/07/S2S-Start-1.png"><img src="/apidocs/wp-content/uploads/2017/07/S2S-Start-1.png" alt="" class="wp-image-4076"/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Click the <strong>[+]</strong> Plus icon to start adding a new Script</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":4068,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2017/07/S2S-AddScript-1.png"><img src="/apidocs/wp-content/uploads/2017/07/S2S-AddScript-1.png" alt="" class="wp-image-4068"/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Give the Script a <em>name</em> and <em>description</em>. Also, ensure the <em>[x] S2S</em> checkbox is checked.<br><em>Note: Client callable is optional, but it's a good idea to disable it if&nbsp;the script&nbsp;will never be used client side.</em></li><li>&nbsp;</li><li>Create some Test Parameters to use. For this tutorial, enter:<br><em>{ "a": 4, "b": 3 }</em></li><li>&nbsp;</li><li>You're&nbsp;done in the <strong>Details</strong> tab, click on the <strong>Editor</strong> tab. Here, enter the following:</li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {"language":"js"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="js" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">var response = {};
response.answer = data.a + data.b;
response;</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p><em>Note: The last line is always what will be returned in the response.</em></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>&nbsp;You should have something that looks like this after.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":4059,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2017/07/S2S-Details.png"><img src="/apidocs/wp-content/uploads/2017/07/S2S-Details.png" alt="" class="wp-image-4059"/></a></figure>
<!-- /wp:image -->

<!-- wp:image {"id":4065,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2017/07/S2S-Editor-1.png"><img src="/apidocs/wp-content/uploads/2017/07/S2S-Editor-1.png" alt="" class="wp-image-4065"/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>The last tab is the <strong>Run</strong> tab. Here, you can do a <strong>[Quick Authenticate]</strong>, and <strong>[Run]</strong> your new script to view the return!<br>(<strong>[Save]</strong> and <strong>[Close]</strong> when you are&nbsp;done editing and testing your script)</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":4060,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2017/07/S2S-RunScript.png"><img src="/apidocs/wp-content/uploads/2017/07/S2S-RunScript.png" alt="" class="wp-image-4060"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>Step 2 - Configure an S2S Server to call it from</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Now go to the brainCloud Portal and open the <strong>Design | Cloud Code | My Servers</strong> page, and click <strong>[New Server]</strong></li><li>Enter a name for your server, such as APP_SERVER, and click save. This will generate a secret for your server<br>Note: You can also limit the IP ranges for your server. This is highly recommended for production deployments.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><em>Your script and server should now be visible in the S2S Explorer.</em></p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":4072,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2017/07/S2S-Explorer-1.png"><img src="/apidocs/wp-content/uploads/2017/07/S2S-Explorer-1.png" alt="" class="wp-image-4072"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>Step 3 - Call it!</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Let's try calling it from Postman! &nbsp;(If you don't already have it, you can download it from <a rel="noopener noreferrer" href="https://www.getpostman.com" target="_blank">here</a>.)</li><li>Launch Postman, and configure a new request.</li><li>Set the <em>request type</em> to "POST"</li><li>Set the <em>request URL</em> to "https://sharedprod.braincloudservers.com/s2sdispatcher"</li><li>Send the following in the body (setting a type of "raw", sub-type "JSON"), replacing the: <ul><li><em>gameId</em> with your appId</li><li><em>serverName</em> with the name of the server that you configured above in <em>step 2</em></li><li>and the <em>gameSecret</em> with the secret of the server that you configured above in <em>step 2</em> </li></ul></li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
    "gameId": "11549",
    "serverName": "APP_SERVER",
    "gameSecret": "97e1d95d-69f4-472e-904f-39f372777aee",
    "service": "script",
    "operation": "RUN",
    "data": {
        "scriptName": "AddNums",
        "scriptData": {
            "a": 3,
            "b": 4
        }
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:image {"id":4061,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2017/07/S2S-PostMan.png"><img src="/apidocs/wp-content/uploads/2017/07/S2S-PostMan.png" alt="" class="wp-image-4061"/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Hit <strong>[Send]</strong>. If you app is properly configured, you should see this response:</li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
    "response": {
        "answer": 7
    },
    "success": true
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":3} -->
<h3>Step 4 - Experiment!</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>That's cool, but let's try&nbsp;exercising&nbsp;the brainCloud&nbsp;API? &nbsp;Try creating and executing the following script:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"js"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="js" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">var profileId = "";
//Get the passed in profileId
//ex. {
// "profileId": "c82b45c0-d906-42a9-8879-2db9c9d8dbc2"
// }
profileId = data.profileId;
//Create a session with that user
var session = bridge.getSessionForProfile(profileId);

//Grab the enity service with the current profile session
var entityProxy = bridge.getEntityServiceProxy(session);

//Now let's create a new entity that will be attached to that profile
var entityType = "address";
var entityData = { "street" : "1309 Carling" };
var acl = { "other": 0 };
var response = entityProxy.createEntity(entityType, entityData, acl);

//And return the response
response;</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:image {"id":4063,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="/apidocs/wp-content/uploads/2017/07/S2S-Documentation.png"><img src="/apidocs/wp-content/uploads/2017/07/S2S-Documentation.png" alt="" class="wp-image-4063"/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>If you haven't checked out our API docs yet, you should check them out here:<br><a href="/apidocs/apiref/?cloudcode#s2s">/apidocs/apiref/?cloudcode#s2s</a><br>You can find more examples on how to use the brainCloud cloud scripts for your application!</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4035</wp:post_id>
		<wp:post_date><![CDATA[2017-07-21 13:14:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-07-21 17:14:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[s2s-cloud-code-scripts]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>2611</wp:post_parent>
		<wp:menu_order>18</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-portal"><![CDATA[braincloud portal]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-portal-and-open"><![CDATA[braincloud portal and open]]></category>
		<category domain="yst_prominent_words" nicename="click"><![CDATA[click]]></category>
		<category domain="yst_prominent_words" nicename="cloud"><![CDATA[cloud]]></category>
		<category domain="yst_prominent_words" nicename="cloud-code"><![CDATA[cloud code]]></category>
		<category domain="yst_prominent_words" nicename="configured-above-in-step"><![CDATA[configured above in step]]></category>
		<category domain="yst_prominent_words" nicename="configured-above-in-step-2"><![CDATA[configured above in step 2]]></category>
		<category domain="yst_prominent_words" nicename="new-script"><![CDATA[new script]]></category>
		<category domain="yst_prominent_words" nicename="open-the-design"><![CDATA[open the design]]></category>
		<category domain="yst_prominent_words" nicename="portal-and-open"><![CDATA[portal and open]]></category>
		<category domain="yst_prominent_words" nicename="portal-and-open-the-design"><![CDATA[portal and open the design]]></category>
		<category domain="yst_prominent_words" nicename="s2s"><![CDATA[s2s]]></category>
		<category domain="yst_prominent_words" nicename="s2s-script"><![CDATA[s2s script]]></category>
		<category domain="yst_prominent_words" nicename="script"><![CDATA[script]]></category>
		<category domain="yst_prominent_words" nicename="server"><![CDATA[server]]></category>
		<category domain="yst_prominent_words" nicename="set-the-request"><![CDATA[set the request]]></category>
		<category domain="yst_prominent_words" nicename="step"><![CDATA[step]]></category>
		<category domain="yst_prominent_words" nicename="step-2"><![CDATA[step 2]]></category>
		<category domain="yst_prominent_words" nicename="tab"><![CDATA[tab]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_dc6fbbae16116b656c2c4f068fdfabab]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Push Notification Setup - Firebase</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/push-notification-setup-firebase/</link>
		<pubDate>Mon, 31 Jul 2017 20:57:14 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=4081</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This tutorial will walk you through the steps to configure Firebase Cloud Messaging (FCM) with brainCloud.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Prerequisites</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Must have created an app on the&nbsp;<a href="https://console.firebase.google.com/">Firebase console</a></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 id="use-the-fcm-api-key-for-braincloud">Step1: Configure FCM cloud messaging server-key to brainCloud</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Navigate your browser to the <a rel="noreferrer noopener" href="https://console.firebase.google.com/" target="_blank">Firebase console</a> and select your project. Click the Settings Icon -> “Project settings” in the top left nav bar.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/363163268/df61c0644eed17b7c7720fdd/image.png" alt=""/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/363163268/df61c0644eed17b7c7720fdd/image.png" target="_blank"></a>Select “Cloud Messaging” and copy the Server Key.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/363163674/9784d263d41547231f100d3f/image.png" alt=""/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/363163674/9784d263d41547231f100d3f/image.png" target="_blank"></a>Navigate to the brainCloud development console Design | Notification | Settings page, click Edit Settings.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/363164687/0b9686fb11a02b479228e124/image.png" alt=""/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/363164687/0b9686fb11a02b479228e124/image.png" target="_blank"></a>Paste this key into Google Play API key field, and set expiration days for this key.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/363165313/52201f99da60522b0a3b76f3/image.png" alt=""/></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3 id="enable-fcm-for-your-app">Step2: Register a notification token to your device via your app</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Use the Keystore file of your Android app to create a fingerprint SHA1 and add it to your Firebase project.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/363170155/8a1b3fd682b55062c117f921/image.png" alt=""/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/363170155/8a1b3fd682b55062c117f921/image.png" target="_blank"></a>Download <code>google-services.json</code> file and add it to your app <code>root</code> folder (for Unity will under <code>Assets</code> folder). This file contains most of the credentials you’ll need to connect your app to Firebase.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/363171394/676a6832ba89d7e8c5d15600/image.png" alt=""/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/363171394/676a6832ba89d7e8c5d15600/image.png" target="_blank"></a>Follow the <code>SDK Instruction</code> to finish settings for your app. (If you are using the Unity Firebase Messaging package, after importing, your <code>Assets</code> folder should similar to the structure below)</li></ul>
<!-- /wp:list -->

<!-- wp:image {"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://downloads.intercomcdn.com/i/o/363172566/c331289185689feda4332a47/image.png" alt=""/></figure></div>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/363172566/c331289185689feda4332a47/image.png" target="_blank"></a>In your app, after authenticating a user with brainCloud, you will need to register the <code>Firebase Registration token</code> with brainCloud. Specifically, you’ll want to call the <a rel="noreferrer noopener" href="https://getbraincloud.com/apidocs/apiref/?cloudcode#capi-pushnotification-registerpushnotificationdevicetoken" target="_blank">RegisterPushNotificationDeviceToken()</a> method to pass in the token.</li><li>If you are using Unity SDK, your code should be similar to the following. </li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">    void InitializeFirebase()
    {
        Firebase.Messaging.FirebaseMessaging.MessageReceived += OnMessageReceived;
        Firebase.Messaging.FirebaseMessaging.TokenReceived += OnTokenReceived;
        Firebase.Messaging.FirebaseMessaging.SubscribeAsync(topic).ContinueWithOnMainThread(task => {
            LogTaskCompletion(task, "SubscribeAsync");
        });
        DebugLog("Firebase Messaging Initialized");
        Firebase.Messaging.FirebaseMessaging.RequestPermissionAsync().ContinueWithOnMainThread(
            task => {
                LogTaskCompletion(task, "RequestPermissionAsync");
            }
        );
        isFirebaseInitialized = true;
    } 

...
    public virtual void OnTokenReceived(object sender, Firebase.Messaging.TokenReceivedEventArgs token)
    {
        DebugLog("Received Registration Token: " + token.Token);
        firebaseToken = token.Token;
        AddStatusText("Received Registration Token: " + token.Token);
    }
...
    public void OnRegisterToken()
    {
        _bc.PushNotificationService.RegisterPushNotificationDeviceToken(Platform.GooglePlayAndroid, firebaseToken, authSuccess_BCcall, authError_BCcall);
    }
...</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:list -->
<ul><li>If using Java Android studio</li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {"language":"java"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="java" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">  FirebaseInstanceId.getInstance().getInstanceId()
  .addOnCompleteListener(new OnCompleteListener&lt;InstanceIdResult>() {
      @Override
      public void onComplete(@NonNull Task&lt;InstanceIdResult> task) {
          if (!task.isSuccessful()) {
              Log.w(TAG, "getInstanceId failed", task.getException());
              return;
          }

          // Get new Instance ID token
          String token = task.getResult().getToken();
          _bc.GetWrapper().getPushNotificationService().registerPushNotificationToken(Platform.GooglePlayAndroid, token, theCallback);
      }
  });</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":3} -->
<h3 id="h_2a25d450c6">Step3: Test</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Run your app, authenticate an end-user to brainCloud and call RegisterPushNotificationDeviceToken() method to register device token.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/363178357/3c1e5a09827267caede11b8d/image.png" alt=""/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/363178357/3c1e5a09827267caede11b8d/image.png" target="_blank"></a>Once your test device is registered the notification token to brainClound from your app, you can check it from the <strong>User</strong> <strong>Monitoring | User Summary</strong> page. </li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/363176360/1474feee11f5367407b4e4b1/image.png" alt=""/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/363176360/1474feee11f5367407b4e4b1/image.png" target="_blank"></a>Hit <code>Send Notification</code> button from the above page will pop-up a <code>Send Notification</code> window, fill some text and Click <code>Send</code>. Your test device should receive this notification from brainCloud. You can always use brainCloud Push Notification <a href="https://getbraincloud.com/apidocs/apiref/?cloudcode#capi-pushnotification">methods</a> to test push notifications too.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://downloads.intercomcdn.com/i/o/363181329/3755b318ffa0dd79912cbb1f/image.png" alt=""/></figure></div>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/363181329/3755b318ffa0dd79912cbb1f/image.png" target="_blank"></a>Note that the above example is the settings for Android, however, the configuration steps are almost the same, for detail of setting up iOS with FCM, please visit Firebase documentation.</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4081</wp:post_id>
		<wp:post_date><![CDATA[2017-07-31 16:57:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-07-31 20:57:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[push-notification-setup-firebase]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>55</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="app"><![CDATA[app]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-portal"><![CDATA[braincloud portal]]></category>
		<category domain="yst_prominent_words" nicename="cloud-messaging"><![CDATA[cloud messaging]]></category>
		<category domain="yst_prominent_words" nicename="fcm"><![CDATA[fcm]]></category>
		<category domain="yst_prominent_words" nicename="fcmnotification-token"><![CDATA[fcmnotification token]]></category>
		<category domain="yst_prominent_words" nicename="fcmnotification-token-with-braincloud"><![CDATA[fcmnotification token with braincloud]]></category>
		<category domain="yst_prominent_words" nicename="file"><![CDATA[file]]></category>
		<category domain="yst_prominent_words" nicename="firebase"><![CDATA[firebase]]></category>
		<category domain="yst_prominent_words" nicename="firebase-console"><![CDATA[firebase console]]></category>
		<category domain="yst_prominent_words" nicename="google-services-json-file"><![CDATA[google-services.json file]]></category>
		<category domain="yst_prominent_words" nicename="key"><![CDATA[key]]></category>
		<category domain="yst_prominent_words" nicename="project-settings"><![CDATA[project settings]]></category>
		<category domain="yst_prominent_words" nicename="registration-id"><![CDATA[registration id]]></category>
		<category domain="yst_prominent_words" nicename="server"><![CDATA[server]]></category>
		<category domain="yst_prominent_words" nicename="server-key"><![CDATA[server key]]></category>
		<category domain="yst_prominent_words" nicename="settings"><![CDATA[settings]]></category>
		<category domain="yst_prominent_words" nicename="steps"><![CDATA[steps]]></category>
		<category domain="yst_prominent_words" nicename="token"><![CDATA[token]]></category>
		<category domain="yst_prominent_words" nicename="token-with-braincloud"><![CDATA[token with braincloud]]></category>
		<category domain="yst_prominent_words" nicename="using-unity"><![CDATA[using unity]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Global Entity File Formats</title>
		<link>https://staging.getbraincloud.com/apidocs/api-modules/global-entity-file-formats/</link>
		<pubDate>Tue, 10 Oct 2017 01:14:30 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">http://18.220.113.13/apidocs/?page_id=4127</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>brainCloud supports the importing and exporting of Global Entities via JSON files. This is useful for:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>backing up global entity data</li><li>migrating entities from app to app</li><li>easy integration with external tools</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>There are three different JSON file formats supported. There are pros and cons to each of them:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><em>Raw JSON Object format</em> - highly recommended for backups and data migration. Not as clean for use with external tools.</li><li><em>Simplified JSON Object format</em> - very good for integration with external tools.</li><li><em>Simplified JSON Line format</em> - useful for integration with external tools that support JSON line format. Limited to a single entity-type per file.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Each of the file formats is described in more detail below.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3 id="Export/ImportGlobalEntities-RawJSONObjectFile">Raw JSON Object Format</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Below is a raw JSON object file. Note that:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>EntityTypes are enclosed in JSON arrays - and thus multiple entityTypes are supported.</li><li>brainCloud meta-data is preserved
<ul>
<li>entityId</li>
<li>entityIndexedId</li>
<li>timeToLive</li>
<li>expiresAt</li>
<li>createdAt</li>
<li>updatedAt</li>
<li>version</li>
<li>acl</li>
<li>ownerId ← only if the appId of the record matches the currently selected gameId</li>
</ul>
</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><em>Note that although the example below only shows a single entity type, "hero",&nbsp;the file structure does allow multiple types of entities to be present in a single file.</em></p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"json","title":"Raw JSON Object Example File"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="Raw JSON Object Example File" data-enlighter-group="">{
  "hero" : [ 
    {
      "entityIndexedId" : "superman",
      "timeToLive" : null,
      "createdAt" : 1506914746453,
      "data" : {
        "name" : "Superman",
        "alignment" : "Lawful Good",
        "cape" : true,
        "sex" : "m",
        "secretIdentity" : {
          "firstName" : "Clark",
          "lastName" : "Kent"
        },
        "attributes" : {
          "intelligence" : 90,
          "strength" : 300,
          "charisma" : 95
        },
        "powers" : [ "flight", "xray vision", "heat vision", "super strength", "invulnerable" ],
        "skills" : [ "combat" ],
        "equipment" : [ "glasses" ]
      },
      "entityType" : "hero",
      "appId" : "22436",
      "entityId" : "2642b324-0c86-4779-817a-832c30884c81",
      "acl" : {
        "other" : 1
      },
      "ownerId" : null,
      "version" : 1,
      "expiresAt" : 9223372036854775807,
      "updatedAt" : 1506914746453
    }, {
      "entityIndexedId" : "batman",
      "timeToLive" : null,
      "createdAt" : 1506914673444,
      "data" : {
        "name" : "Batman",
        "alignment" : "Neutral Good",
        "cape" : true,
        "sex" : "m",
        "secretIdentity" : {
          "firstName" : "Bruce",
          "lastName" : "Wayne"
        },
        "attributes" : {
          "intelligence" : 99,
          "strength" : 95,
          "charisma" : 90
        },
        "powers" : [ ],
        "skills" : [ "martial arts", "combat", "detective", "stealth", "tactics" ],
        "equipment" : [ "grapple gun", "batarangs", "utility belt" ]
      },
      "entityType" : "hero",
      "appId" : "22436",
      "entityId" : "9e73c19a-f82e-4385-8bce-320c249b2c9b",
      "acl" : {
        "other" : 1
      },
      "ownerId" : null,
      "version" : 1,
      "expiresAt" : 9223372036854775807,
      "updatedAt" : 1506914673444
    }, {
      "entityIndexedId" : "wonder woman",
      "timeToLive" : null,
      "createdAt" : 1506914835429,
      "data" : {
        "name" : "Wonder Woman",
        "alignment" : "Neutral Good",
        "cape" : false,
        "sex" : "f",
        "secretIdentity" : {
          "firstName" : "Diana",
          "lastName" : "Prince"
        },
        "attributes" : {
          "intelligence" : 90,
          "strength" : 250,
          "charisma" : 92
        },
        "powers" : [ "flight", "super strength", "invulnerability" ],
        "skills" : [ "combat" ],
        "equipment" : [ "lasso", "sword", "shield" ]
      },
      "entityType" : "hero",
      "appId" : "22436",
      "entityId" : "dce12974-d76d-4922-b011-ec596ec14d47",
      "acl" : {
        "other" : 1
      },
      "ownerId" : null,
      "version" : 1,
      "expiresAt" : 9223372036854775807,
      "updatedAt" : 1506914835429
    } 
  ]
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3 id="Export/ImportGlobalEntities-SimplifiedJSONObjectFile">Simplified JSON Object Format</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Simplified JSON is very readable, and suitable for round-trip importing and exporting with tools like Google Sheets.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It minimizes the structure and overheads that brainCloud imposes - though that comes with limitations (record-level ACL, ownership, and entityIds are not preserved).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>File format specifics:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>EntityTypes are enclosed in JSON arrays - and thus multiple entityTypes are supported.&nbsp;← Same as RAW</li><li>brainCloud meta-data is NOT preserved, other than <strong><code>entityIndexedId</code></strong>&nbsp;(encoded as <code>_eiid</code>)&nbsp;and&nbsp;<strong><code>entityType</code></strong> (represented by the enclosing array)</li><li>The lack of a "data" section makes the object easier to view and understand</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><em>NOTE - _eiid is not unique - it is simply a lookup index.&nbsp;This is one of the reasons that we delete all entities of a type before importing&nbsp;- so that each import doesn't create more and more entities!</em></p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
  "hero" : [ 
    {
      "name" : "Superman",
      "alignment" : "Lawful Good",
      "cape" : true,
      "sex" : "m",
      "secretIdentity" : {
        "firstName" : "Clark",
        "lastName" : "Kent"
      },
      "attributes" : {
        "intelligence" : 90,
        "strength" : 300,
        "charisma" : 95
      },
      "powers" : [ "flight", "xray vision", "heat vision", "super strength", "invulnerable" ],
      "skills" : [ "combat" ],
      "equipment" : [ "glasses" ],
      "_eiid" : "superman"
    }, {
      "name" : "Batman",
      "alignment" : "Neutral Good",
      "cape" : true,
      "sex" : "m",
      "secretIdentity" : {
        "firstName" : "Bruce",
        "lastName" : "Wayne"
      },
      "attributes" : {
        "intelligence" : 99,
        "strength" : 95,
        "charisma" : 90
      },
      "powers" : [ ],
      "skills" : [ "martial arts", "combat", "detective", "stealth", "tactics"],
      "equipment" : [ "grapple gun", "batarangs", "utility belt" ],
      "_eiid" : "batman"
    }, {
      "name" : "Wonder Woman",
      "alignment" : "Neutral Good",
      "cape" : false,
      "sex" : "f",
      "secretIdentity" : {
        "firstName" : "Diana",
        "lastName" : "Prince"
      },
      "attributes" : {
        "intelligence" : 90,
        "strength" : 250,
        "charisma" : 92
      },
      "powers" : [ "flight", "super strength", "invulnerability" ],
      "skills" : [ "combat" ],
      "equipment" : [ "lasso", "sword", "shield" ],
      "_eiid" : "wonder woman"
    } 
  ]
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3 id="Export/ImportGlobalEntities-SimplifiedJSONLinesFile">Simplified JSON Lines Format</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>JSON Lines files are a bit simpler in structure that JSON object files - in that they don't require the enclosing object array structure.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Basically each line of the file is considered a separate JSON object.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Because of this, JSON Lines files can only support a single <em>entityType</em> per file.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that we are using a simpler example for better readability. Also note that the file below contains just 3 lines (it looks like more due to word-wrapping - notice the line numbers).</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{"name":"Superman","alignment":"Lawful Good","cape":true,"sex":"m","secretIdentity":{"firstName":"Clark","lastName":"Kent"},"_eiid":"superman"}
{"name":"Batman","alignment":"Neutral Good","cape":true,"sex":"m","secretIdentity":{"firstName":"Bruce","lastName":"Wayne"},,"_eiid":"batman"}
{"name":"Wonder Woman","alignment":"Neutral Good","cape":false,"sex":"f","secretIdentity":{"firstName":"Diana","lastName":"Prince"},"_eiid":"wonder woman"}</pre>
<!-- /wp:enlighter/codeblock -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4127</wp:post_id>
		<wp:post_date><![CDATA[2017-10-09 21:14:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-10-10 01:14:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[global-entity-file-formats]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>21</wp:post_parent>
		<wp:menu_order>22</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="enclosed-in-json"><![CDATA[enclosed in json]]></category>
		<category domain="yst_prominent_words" nicename="enclosed-in-json-arrays"><![CDATA[enclosed in json arrays]]></category>
		<category domain="yst_prominent_words" nicename="external-tools"><![CDATA[external tools]]></category>
		<category domain="yst_prominent_words" nicename="file"><![CDATA[file]]></category>
		<category domain="yst_prominent_words" nicename="importing-and-exporting"><![CDATA[importing and exporting]]></category>
		<category domain="yst_prominent_words" nicename="integration-with-external"><![CDATA[integration with external]]></category>
		<category domain="yst_prominent_words" nicename="integration-with-external-tools"><![CDATA[integration with external tools]]></category>
		<category domain="yst_prominent_words" nicename="json-line-format"><![CDATA[json line format]]></category>
		<category domain="yst_prominent_words" nicename="json-lines"><![CDATA[json lines]]></category>
		<category domain="yst_prominent_words" nicename="json-lines-files"><![CDATA[json lines files]]></category>
		<category domain="yst_prominent_words" nicename="json-object"><![CDATA[json object]]></category>
		<category domain="yst_prominent_words" nicename="json-object-format"><![CDATA[json object format]]></category>
		<category domain="yst_prominent_words" nicename="object"><![CDATA[object]]></category>
		<category domain="yst_prominent_words" nicename="object-format"><![CDATA[object format]]></category>
		<category domain="yst_prominent_words" nicename="raw-json"><![CDATA[raw json]]></category>
		<category domain="yst_prominent_words" nicename="raw-json-object"><![CDATA[raw json object]]></category>
		<category domain="yst_prominent_words" nicename="raw-json-object-format"><![CDATA[raw json object format]]></category>
		<category domain="yst_prominent_words" nicename="simplified-json"><![CDATA[simplified json]]></category>
		<category domain="yst_prominent_words" nicename="simplified-json-object"><![CDATA[simplified json object]]></category>
		<category domain="yst_prominent_words" nicename="simplified-json-object-format"><![CDATA[simplified json object format]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Lobbies</title>
		<link>https://staging.getbraincloud.com/apidocs/api-modules/multiplayer/lobbies/</link>
		<pubDate>Sun, 15 Jul 2018 18:01:36 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=4418</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>Background</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The addition of <em>Real-Time Tech</em> to brainCloud brings with it many features, including <em>Lobbies</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A <em>lobby</em> is used to gather up participants in preparation for a <em>multi-user experience</em>, which we call a <em>room experience</em>. Lobbies are essential for online games but are also valuable for non-gaming applications like online meetings, desktop sharing, etc. The process of randomly selecting a group of suitable participants for a lobby is referred to as <em>matchmaking</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":4438,"linkDestination":"custom"} -->
<div class="wp-block-image"><figure class="aligncenter"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/07/Online-Multiplayer-Process-1.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/07/Online-Multiplayer-Process-1.png" alt="" class="wp-image-4438"/></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Some important things to understand about lobbies:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>lobby participants are called <em>members</em></li><li>the <em>member</em> that created the lobby is also called the <em>owner</em></li><li><em>members</em> are organized into <em>teams</em>. All lobbies must have <em>at least</em> <em>one</em> team.</li><li>teams specify a <em>minimum</em> and <em>a maximum</em> number of members. Room experiences cannot be started until the minimums are satisfied</li><li>members indicate when they are <em>ready</em> to proceed to the room experience</li><li>progression rules are configured by <em>lobby type</em> in the Design Portal. Every lobby is an instance of a <em>lobby type</em></li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Online Matchmaking</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The <em>Lobby Service</em> provides an <em>Online Matchmaking API</em> - not to be confused with the <em>Offline Matchmaking API</em> supplied by the <em>Matchmaking Service</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Offline Matchmaking, as you would expect, is suitable for offline experiences - like async turn-by-turn games (Words with Friends, etc.) and one-way offline multiplayer (i.e. Clash-style games). In these games, you don't care whether the matched user is online or not.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Online matchmaking is very different - you need all players to be online and concurrently looking for a match.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The following features are supported:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>basic filtering by <em>lobby type</em> and user <em>skill rating</em></li><li>automated expansion of skill rating <em>range</em></li><li>custom matchmaking filters (via cloud code scripts)</li><li>automatic creation of lobbies if no eligible ones are found</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Lobby Experience</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Once in a lobby, brainCloud prepares the users for the <em>room experience</em> according to the rules configured for the lobby type in the Design Portal.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":4440,"linkDestination":"custom"} -->
<div class="wp-block-image"><figure class="aligncenter"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/07/Lobby-Lifecycle-simple.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/07/Lobby-Lifecycle-simple.png" alt="" class="wp-image-4440"/></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The lobby lifecycle involves the following states:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>setup</strong> - the initial state upon creation. New members can join, but it is too early for the experience to start.</li><li><strong>early</strong> - once the <em>earliest start</em> time is past, the lobby enters the <em>early</em> state - and the room experience is partially start-able. In this state, the room experience will launch if: <ul><li>the lobby teams are all <em>full</em> and enough members are ready; or...</li><li><em>allow early start without max participates</em> option is enabled, the teams satisfy the <em>minimum</em> participation requirements, and enough members are ready </li></ul></li><li><strong>pending</strong> - once the <em>on-time start</em> time is past, the lobby enters the <em>pending</em> state. Ideally, the room experience is <em>supposed</em> to start at this time. Indeed, it <em>will</em> start if and when: <ul><li>the lobby teams meet the <em>minimum</em> size requirements, and enough members are ready</li><li>if the <em>force on-time start without ready</em> option is enabled, the lobby will skip the ready-check, and simply start if the minimum team members are available </li></ul></li><li><strong>starting</strong> - in this state, the room experience has been asked to launch, and the lobby is just waiting on confirmation that a room service has been <em>allocated</em>, and is <em>ready</em>. If a <em>room server manager</em> is configured in the design portal, the launch endpoint will be called to allocate a room server. If a peer-to-peer experience is being used instead, the owner client should listen for the lobby to enter the <em>starting</em> state to begin preparing the room experience</li><li><strong>success</strong> - the lobby will move to the <em>success</em> state once the room service provides calls back with the <code>sysRoomReady()</code> API call. At that point, all lobby members will be sent the <code>ROOM_READY</code> event, and should respond by connecting to the room experience. Immediately after participants will receive the <code>DISBANDED</code> event as the lobby is destroyed.</li><li><strong>fail</strong> - the lobby moves to the <strong>fail</strong> state if the lobby <em>too late start</em> time is past. It also fails is the room service sends in <code>sysRoomCancelled()</code>.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The full set of Lobby methods and events can be found in the <a title="Lobby Service" href="https://staging.getbraincloud.com/apidocs/apiref/#capi-lobby">Lobby Service</a> API documentation.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Room Experience</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The Room Experience is completely up to the room server developer.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>brainCloud supports two architectural strategies for room services:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>custom room servers</strong> - brainCloud customers can write their own room servers that work with our lobby services. These services should be managed by a room server manager that brainCloud calls to launch new room servers. <em>brainCloud does not currently host/manage 3rd party room servers. We plan to expand our offering in the near future to offer a built-in Room Server Manager with the ability to launch custom Docker-based Room Services.</em></li><li><strong>peer-to-peer</strong> - alternatively, room experiences can be provided in a peer-to-peer manner by a member of the lobby (typically the owner). In this case, the lobby member should wait for the lobby to enter the "starting" state to launch the experience.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Important things to understand about Room Experiences:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Room Experiences are given all lobby data upon start. Thus they have access to the list of members, team allotments, the static lobby config, and dynamic lobby settings data. <ul><li>Room Server Managers receive this data when brainCloud calls the &lt;rsm-url&gt;/&lt;rsm-endpoint&gt;/assign-room.</li><li>Peer-provided services have access to the data via the <code>lobby</code> data present in the </li></ul></li><li>Room Experiences should validate participants as they join. Have them provide their profile ids and sessionIds and check them against the member data provided</li><li>Be advised that the lobby is destroyed once the <code>ROOM_READY</code> event has been sent to the participants</li><li>The technologies and protocols used for room experiences are completely up to the developers</li><li>Room Experiences can communicate with the brainCloud API via the S2S interface. Be sure to configure the servers via the Design | Cloud Code | S2S Config page, and provide an IP range to restrict access to the API to just the hosted servers.</li><li>Peer-to-peer Room Experiences should use <em>not</em> use the S2S API (since you can't restrict the IPs of clients). They should continue to use the standard Client API instead.</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4418</wp:post_id>
		<wp:post_date><![CDATA[2018-07-15 14:01:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-15 18:01:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[lobbies]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>102</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="design-portal"><![CDATA[design portal]]></category>
		<category domain="yst_prominent_words" nicename="enter-the-starting-state"><![CDATA[enter the starting state]]></category>
		<category domain="yst_prominent_words" nicename="experience"><![CDATA[experience]]></category>
		<category domain="yst_prominent_words" nicename="lobby-to-enter-the-starting"><![CDATA[lobby to enter the starting]]></category>
		<category domain="yst_prominent_words" nicename="lobby-type"><![CDATA[lobby type]]></category>
		<category domain="yst_prominent_words" nicename="lobby-type-in-the-design"><![CDATA[lobby type in the design]]></category>
		<category domain="yst_prominent_words" nicename="online-matchmaking"><![CDATA[online matchmaking]]></category>
		<category domain="yst_prominent_words" nicename="requirements-and-enough-members"><![CDATA[requirements and enough members]]></category>
		<category domain="yst_prominent_words" nicename="room-experience"><![CDATA[room experience]]></category>
		<category domain="yst_prominent_words" nicename="room-experiences"><![CDATA[room experiences]]></category>
		<category domain="yst_prominent_words" nicename="room-server"><![CDATA[room server]]></category>
		<category domain="yst_prominent_words" nicename="room-server-manager"><![CDATA[room server manager]]></category>
		<category domain="yst_prominent_words" nicename="room-servers"><![CDATA[room servers]]></category>
		<category domain="yst_prominent_words" nicename="room-servers-braincloud"><![CDATA[room servers braincloud]]></category>
		<category domain="yst_prominent_words" nicename="room-service"><![CDATA[room service]]></category>
		<category domain="yst_prominent_words" nicename="server-manager"><![CDATA[server manager]]></category>
		<category domain="yst_prominent_words" nicename="start-time"><![CDATA[start time]]></category>
		<category domain="yst_prominent_words" nicename="state-the-room-experience"><![CDATA[state the room experience]]></category>
		<category domain="yst_prominent_words" nicename="type-in-the-design"><![CDATA[type in the design]]></category>
		<category domain="yst_prominent_words" nicename="type-in-the-design-portal"><![CDATA[type in the design portal]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>brainCloud RTT</title>
		<link>https://staging.getbraincloud.com/apidocs/introduction-2/braincloud-rtt/</link>
		<pubDate>Sun, 15 Jul 2018 17:50:45 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=4421</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"id":4422,"align":"center","linkDestination":"custom"} -->
<div class="wp-block-image"><figure class="aligncenter"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/07/braincloudrtt.tagline.500x160.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/07/braincloudrtt.tagline.500x160.png" alt="" class="wp-image-4422"/></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><strong>RTT</strong> is the new <em>Real-Time Technology</em> extension of brainCloud.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>RTT adds a real-time channel to the brainCloud client libraries. This channel allows clients to <em>listen for&nbsp;</em>and <em>react to</em>&nbsp;real-time events – without polling.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This opens up a slew of new features:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Real-time Events<br></li><li>Real-time Messaging<br></li><li>Online Chat<br></li><li>Online Lobbies &amp; Matchmaking<br></li><li>Custom Multiplayer Servers<br></li><li>and more!</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><em>Note - brainCloud RTT is optional, and included in select brainCloud Subscription Plans.</em></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4421</wp:post_id>
		<wp:post_date><![CDATA[2018-07-15 13:50:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-15 17:50:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[braincloud-rtt]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>73</wp:post_parent>
		<wp:menu_order>13</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="channel"><![CDATA[channel]]></category>
		<category domain="yst_prominent_words" nicename="events"><![CDATA[events]]></category>
		<category domain="yst_prominent_words" nicename="online"><![CDATA[online]]></category>
		<category domain="yst_prominent_words" nicename="real-time"><![CDATA[real-time]]></category>
		<category domain="yst_prominent_words" nicename="real-time-events"><![CDATA[real-time events]]></category>
		<category domain="yst_prominent_words" nicename="rtt"><![CDATA[rtt]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Client Libraries</title>
		<link>https://staging.getbraincloud.com/apidocs/client-libraries/</link>
		<pubDate>Thu, 16 Aug 2018 20:55:32 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=4490</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>The following brainCloud client libraries are available:</p>
<!-- /wp:paragraph -->

<!-- wp:shortcode -->
[table id=1 /]
<!-- /wp:shortcode -->

<!-- wp:paragraph -->
<p><em>Click on a link to go to the associated Github repository or tutorial.</em></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4490</wp:post_id>
		<wp:post_date><![CDATA[2018-08-16 16:55:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-08-16 20:55:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[client-libraries]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>20</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Cloud Code Central</title>
		<link>https://staging.getbraincloud.com/apidocs/cloud-code-central/</link>
		<pubDate>Fri, 17 Aug 2018 19:36:28 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=4509</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><em>What is Cloud Code?</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>brainCloud allows&nbsp;developers to write custom <a href="/apidocs/apiref/#cc" target="_blank" rel="noopener">Cloud Code</a> routines&nbsp;in JavaScript, that reside and run on the brainCloud servers, allowing execution of code more securely and efficiently than if it were run client-side.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>brainCloud uses the <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino">Mozilla Rhino</a> engine to run scripts.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Scripts can be quickly written and tested via the <a href="https://portal.braincloudservers.com/admin/dashboard#/development/serverscripts-edit" target="_blank" rel="noopener"><strong>Design | Cloud Code | Scripts</strong></a> page of the Design Portal.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Handy references</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><a href="https://staging.getbraincloud.com/apidocs/api-modules/cloud-code/">Capabilities</a> -&nbsp;<em>an overview of how cloud code can be used in brainCloud</em></li><li><a href="https://staging.getbraincloud.com/apidocs/cloud-code-central/cloud-code-tutorials/cloud-code-tutorial-background/">Rules</a> - <em>an overview of cloud code scripts</em></li><li><a href="https://staging.getbraincloud.com/apidocs/tutorials/cloud-code-tutorials/">Tutorials</a> - <em>recommended for all developers!</em></li><li><a href="https://staging.getbraincloud.com/apidocs/handy-cloud-code-scripts/">Examples</a> - <em>handy example scripts</em></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>&nbsp;</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>Even more references</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Additional pages from the web:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide" target="_blank" rel="noopener">JavaScript Guide</a> - Mozilla's guide to JavaScript syntax</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4509</wp:post_id>
		<wp:post_date><![CDATA[2018-08-17 15:36:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-08-17 19:36:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cloud-code-central]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>26</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="cloud"><![CDATA[cloud]]></category>
		<category domain="yst_prominent_words" nicename="cloud-code"><![CDATA[cloud code]]></category>
		<category domain="yst_prominent_words" nicename="code"><![CDATA[code]]></category>
		<category domain="yst_prominent_words" nicename="design"><![CDATA[design]]></category>
		<category domain="yst_prominent_words" nicename="developers"><![CDATA[developers]]></category>
		<category domain="yst_prominent_words" nicename="guide"><![CDATA[guide]]></category>
		<category domain="yst_prominent_words" nicename="handy"><![CDATA[handy]]></category>
		<category domain="yst_prominent_words" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="yst_prominent_words" nicename="overview"><![CDATA[overview]]></category>
		<category domain="yst_prominent_words" nicename="references"><![CDATA[references]]></category>
		<category domain="yst_prominent_words" nicename="run"><![CDATA[run]]></category>
		<category domain="yst_prominent_words" nicename="scripts"><![CDATA[scripts]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Handy Cloud Code Scripts</title>
		<link>https://staging.getbraincloud.com/apidocs/cloud-code-central/handy-cloud-code-scripts/</link>
		<pubDate>Fri, 17 Aug 2018 19:37:02 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=4513</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":3} -->
<h3>Scripts</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following scripts implement common operations that may be handy for your app.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="https://staging.getbraincloud.com/apidocs/example-blockifbanned-script/">BlockIfBanned</a> - blocks banned users from logging into your app</li><li><a href="https://staging.getbraincloud.com/apidocs/cloud-code-central/handy-cloud-code-scripts/deletelistofusers-script/">DeleteListOfUsers</a> - deletes a list of provided users</li><li><a href="https://staging.getbraincloud.com/apidocs/cloud-code-central/handy-cloud-code-scripts/onregisternewuser-script/">OnRegisterNewUser</a> - ensures registration calls will fail if the user already exists. Offers a place to put first-time signup logic</li><li><a href="https://staging.getbraincloud.com/apidocs/example-posttoleaderboards-script/">PostToLeaderboards</a> - efficiently post to multiple leaderboards</li><li><a href="https://staging.getbraincloud.com/apidocs/cloud-code-central/handy-cloud-code-scripts/rankgame_autojoinmatch/">RankGame_AutoJoinMatch</a> - pair two players looking for an async match</li><li><a href="https://staging.getbraincloud.com/apidocs/cloud-code-central/handy-cloud-code-scripts/rankgame_finishmatch/">RankGame_FinishMatch</a> - handle the conclusion of a match. Adjust player ratings based on winner/loser</li><li><a href="https://staging.getbraincloud.com/apidocs/cloud-code-central/handy-cloud-code-scripts/restrictclientcalls-script/">RestrictClientCalls</a> - restricts the client's ability to call brainCloud APIs. Provides additional security.</li><li><a href="https://staging.getbraincloud.com/apidocs/scriptscheduler-script/">ScriptScheduler</a> - helper script for regularly recurring cloud code jobs</li><li><a href="https://staging.getbraincloud.com/apidocs/cloud-code-central/handy-cloud-code-scripts/sharedscripts/">SharedScripts</a> - example of sharing scripts between cloud code with Global Properties</li><li><a href="https://staging.getbraincloud.com/apidocs/cloud-code-central/handy-cloud-code-scripts/uniquegroups_acceptgroupmember-script/">UniqueGroups_AcceptGroupMember</a> - enforce new group members to exist in only one group at a time</li><li><a href="https://staging.getbraincloud.com/apidocs/webhookspy-script/">WebHookSpy</a> - view the parameters being sent to a webhook</li><li><a href="https://staging.getbraincloud.com/apidocs/cloud-code-central/handy-cloud-code-scripts/validatecontactemail-script/">ValidateContactEmail</a>- example of validating user's contact Email </li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Importing Scripts</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To import a script into your app:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Download the script to your computer</li><li>Go to the <a href="https://portal.braincloudservers.com/admin/dashboard#/development/serverscripts-edit" target="_blank" rel="noopener noreferrer">Design | Cloud Code | Scripts</a> page of the portal</li><li>Choose <em>Import Scripts</em> from the <strong>[Import / Export]</strong>&nbsp;button
<ul>
<li>Click <strong>[Select],&nbsp;</strong>choose the script to import from the file selector</li>
<li>Click <strong>[Import]</strong></li>
</ul>
</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4513</wp:post_id>
		<wp:post_date><![CDATA[2018-08-17 15:37:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-08-17 19:37:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[handy-cloud-code-scripts]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>4509</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="app"><![CDATA[app]]></category>
		<category domain="yst_prominent_words" nicename="choose"><![CDATA[choose]]></category>
		<category domain="yst_prominent_words" nicename="click"><![CDATA[click]]></category>
		<category domain="yst_prominent_words" nicename="cloud"><![CDATA[cloud]]></category>
		<category domain="yst_prominent_words" nicename="cloud-code"><![CDATA[cloud code]]></category>
		<category domain="yst_prominent_words" nicename="code"><![CDATA[code]]></category>
		<category domain="yst_prominent_words" nicename="example"><![CDATA[example]]></category>
		<category domain="yst_prominent_words" nicename="group"><![CDATA[group]]></category>
		<category domain="yst_prominent_words" nicename="import"><![CDATA[import]]></category>
		<category domain="yst_prominent_words" nicename="match"><![CDATA[match]]></category>
		<category domain="yst_prominent_words" nicename="script"><![CDATA[script]]></category>
		<category domain="yst_prominent_words" nicename="scripts"><![CDATA[scripts]]></category>
		<category domain="yst_prominent_words" nicename="users"><![CDATA[users]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>BlockIfBanned script</title>
		<link>https://staging.getbraincloud.com/apidocs/cloud-code-central/handy-cloud-code-scripts/example-blockifbanned-script/</link>
		<pubDate>Fri, 17 Aug 2018 19:36:09 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=4519</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":3} -->
<h3>Purpose</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This script blocks a banned user from attempting to log into the app.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Banned users will be flagged by attaching a "banned" attribute to them, and setting it to "true." The script will optionally look for a "ban_reason" attribute to return in the response.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Attributes can be assigned to users via the <a href="https://staging.getbraincloud.com/apidocs/apiref/index.html#capi-playerstate-updateattributes" target="_blank" rel="noopener noreferrer">UpdateAttributes()</a>&nbsp; API call, or directly via the <a href="https://portal.braincloudservers.com/admin/dashboard#/monitoring/player-attributes" target="_blank" rel="noopener noreferrer">Monitoring | User Monitoring | Attributes</a> page of the portal.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Script</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Click <a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2022/10/BlockIfBanned.ccjs_.zip">BlockIfBanned.ccjs.zip</a> to download the file.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Usage / Setup</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To configure this script, simply import it into your app.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The script assumes any authenticate call made with a profile containing a "banned":&nbsp;"true" user attribute should be blocked.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Set the script to run on every authenticate call by setting it as a <a href="https://staging.getbraincloud.com/apidocs/tutorials/cloud-code-tutorials/cc-tutorial-4-pre-and-post-hooks/">Post API Hook</a> on Authenticate.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4519</wp:post_id>
		<wp:post_date><![CDATA[2018-08-17 15:36:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-08-17 19:36:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[example-blockifbanned-script]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>4513</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="api"><![CDATA[api]]></category>
		<category domain="yst_prominent_words" nicename="app"><![CDATA[app]]></category>
		<category domain="yst_prominent_words" nicename="attribute"><![CDATA[attribute]]></category>
		<category domain="yst_prominent_words" nicename="attributes"><![CDATA[attributes]]></category>
		<category domain="yst_prominent_words" nicename="authenticate"><![CDATA[authenticate]]></category>
		<category domain="yst_prominent_words" nicename="authenticate-call"><![CDATA[authenticate call]]></category>
		<category domain="yst_prominent_words" nicename="banned"><![CDATA[banned]]></category>
		<category domain="yst_prominent_words" nicename="call"><![CDATA[call]]></category>
		<category domain="yst_prominent_words" nicename="monitoring"><![CDATA[monitoring]]></category>
		<category domain="yst_prominent_words" nicename="script"><![CDATA[script]]></category>
		<category domain="yst_prominent_words" nicename="true"><![CDATA[true]]></category>
		<category domain="yst_prominent_words" nicename="user"><![CDATA[user]]></category>
		<category domain="yst_prominent_words" nicename="users"><![CDATA[users]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>PostToLeaderboards script</title>
		<link>https://staging.getbraincloud.com/apidocs/cloud-code-central/handy-cloud-code-scripts/example-posttoleaderboards-script/</link>
		<pubDate>Fri, 17 Aug 2018 20:14:34 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=4533</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":3} -->
<h3>Purpose</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This script allows you to efficiently post to multiple leaderboards.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Script</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Click <a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2022/10/PostToLeaderboards.ccjs_.zip">PostToLeaderboards.ccjs.zip</a> to download the file.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Usage / Setup</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To configure this script, simply import it into your app.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Then call it from your app via the <a href="https://staging.getbraincloud.com/apidocs/apiref/index.html#capi-script-runscript" target="_blank" rel="noopener noreferrer">RunScript()</a> API call.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The script takes the following parameters:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>leaderboards - Ids of leaderboards to post to.</li><li>score - new score being posted.</li><li>extra - extra data attached on leaderboard entry.</li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">// Example Parameters
{
   "leaderboards": ["regular", "alltime"],
   "score": 1000,
   "extras": {}
}</pre>
<!-- /wp:enlighter/codeblock -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4533</wp:post_id>
		<wp:post_date><![CDATA[2018-08-17 16:14:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-08-17 20:14:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[example-posttoleaderboards-script]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>4513</wp:post_parent>
		<wp:menu_order>11</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="app"><![CDATA[app]]></category>
		<category domain="yst_prominent_words" nicename="call"><![CDATA[call]]></category>
		<category domain="yst_prominent_words" nicename="extra"><![CDATA[extra]]></category>
		<category domain="yst_prominent_words" nicename="leaderboards"><![CDATA[leaderboards]]></category>
		<category domain="yst_prominent_words" nicename="post"><![CDATA[post]]></category>
		<category domain="yst_prominent_words" nicename="score"><![CDATA[score]]></category>
		<category domain="yst_prominent_words" nicename="script"><![CDATA[script]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>UniqueGroups_AcceptGroupMember script</title>
		<link>https://staging.getbraincloud.com/apidocs/cloud-code-central/handy-cloud-code-scripts/uniquegroups_acceptgroupmember-script/</link>
		<pubDate>Tue, 28 Aug 2018 18:16:50 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=4564</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":3} -->
<h3>Purpose</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This script allows the app to accept a group join request while enforcing that new group member is only added to the current group.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If the user is already in a group, this script will throw a failure message that the user is already in a group.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If the user has more group join requests, this script will clean up the remaining requests.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Script</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Click <a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2022/10/UniqueGroups_AcceptGroupMember.ccjs_.zip">UniqueGroups_AcceptGroupMember.ccjs.zip</a> to download the file.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Usage / Setup</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To configure this script, simply import it into your app.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The script is expected to be called from the over of the group owner after they have viewed join requests of potential new group members.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You call the script in the app via the <a href="https://staging.getbraincloud.com/apidocs/apiref/index.html#capi-script-runscript" target="_blank" rel="noopener noreferrer">RunScript()</a> API call.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The script takes the following parameters:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>profileId - profileId of the (potential) new member requesting to join the group</li><li>groupId - groupId of the group that the (potential) new member is requesting to join</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><em>Example script parameters:</em></p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
    "profileId" : "808e7a08-d5b2-4524-964e-9af80d6a6c41",
    "groupId" : "be195271-657e-4372-a107-23679047e7b6"
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":3} -->
<h3>Debug</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Click <a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/08/Test_UniqueGroups_AcceptGroupMember.cloudcode.js">UTest_UniqueGroups_AcceptGroupMember.cloudcode.js</a>&nbsp;to view the optional debug script. Right-click to download it.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Example success response</h4>
<!-- /wp:heading -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">// Example Success Response
{
 "data": {
  "response": {
   "data": {
    "status": 200,
    "message": "User has joined your group!",
    "debug": {
     "approvedRequest": {
      "data": null,
      "status": 200
     },
     "rejectedRequests": [
      {
       "data": null,
       "status": 200,
       "requestedOwnerId": "c2c32dfe-f9f0-488a-b9b8-88b2ae06f774",
       "requestedGroupId": "cc448c05-42d6-461a-9144-7e6a299be553"
      }
     ]
    }
   }
  },
  "success": true
 },
 "status": 200
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":4} -->
<h4>Example failure response</h4>
<!-- /wp:heading -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">// Example Failure Response  
{
 "data": {
  "response": {
   "data": {
    "status": 400,
    "message": "User is already in group TopTheCharts."
   }
  },
  "success": true
 },
 "status": 200
}</pre>
<!-- /wp:enlighter/codeblock -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4564</wp:post_id>
		<wp:post_date><![CDATA[2018-08-28 14:16:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-08-28 18:16:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[uniquegroups_acceptgroupmember-script]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>4513</wp:post_parent>
		<wp:menu_order>11</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="already-in-a-group"><![CDATA[already in a group]]></category>
		<category domain="yst_prominent_words" nicename="app"><![CDATA[app]]></category>
		<category domain="yst_prominent_words" nicename="call"><![CDATA[call]]></category>
		<category domain="yst_prominent_words" nicename="click"><![CDATA[click]]></category>
		<category domain="yst_prominent_words" nicename="download"><![CDATA[download]]></category>
		<category domain="yst_prominent_words" nicename="example"><![CDATA[example]]></category>
		<category domain="yst_prominent_words" nicename="failure"><![CDATA[failure]]></category>
		<category domain="yst_prominent_words" nicename="group"><![CDATA[group]]></category>
		<category domain="yst_prominent_words" nicename="group-join"><![CDATA[group join]]></category>
		<category domain="yst_prominent_words" nicename="join"><![CDATA[join]]></category>
		<category domain="yst_prominent_words" nicename="join-requests"><![CDATA[join requests]]></category>
		<category domain="yst_prominent_words" nicename="member"><![CDATA[member]]></category>
		<category domain="yst_prominent_words" nicename="new-group"><![CDATA[new group]]></category>
		<category domain="yst_prominent_words" nicename="new-member"><![CDATA[new member]]></category>
		<category domain="yst_prominent_words" nicename="potential"><![CDATA[potential]]></category>
		<category domain="yst_prominent_words" nicename="potential-new-member"><![CDATA[potential new member]]></category>
		<category domain="yst_prominent_words" nicename="requesting-to-join"><![CDATA[requesting to join]]></category>
		<category domain="yst_prominent_words" nicename="requests"><![CDATA[requests]]></category>
		<category domain="yst_prominent_words" nicename="script"><![CDATA[script]]></category>
		<category domain="yst_prominent_words" nicename="user"><![CDATA[user]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>OnRegisterNewUser script</title>
		<link>https://staging.getbraincloud.com/apidocs/cloud-code-central/handy-cloud-code-scripts/onregisternewuser-script/</link>
		<pubDate>Tue, 28 Aug 2018 19:56:25 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=4576</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":3} -->
<h3>Purpose</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This script enforces any registration attempts&nbsp;made to brainCloud will fail if the account already exists.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Use this to enforce a proper signup/login flow, so a user cannot attempt to register multiple times with the same account.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Script also offers a place to put first-time registration logic, such as awarding currency or setting a default name of the user.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Script</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Click <a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2022/10/OnRegisterNewUser.ccjs_.zip">OnRegisterNewUser.ccjs.zip</a> to download the file.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Usage / Setup</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To configure this script, simply import it into your app.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The script assumes any authenticate call made with forceCreate set to false is a login attempt. And any authenticate call made with forceCreate set to true is a registration attempt.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can have the script run on every authenticate call by setting it as a <a href="/apidocs/cloud-code-central/cloud-code-tutorials/cc-tutorial-4-pre-and-post-hooks/">Post API Hook</a> on Authenticate.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4576</wp:post_id>
		<wp:post_date><![CDATA[2018-08-28 15:56:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-08-28 19:56:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[onregisternewuser-script]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>4513</wp:post_parent>
		<wp:menu_order>11</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="account"><![CDATA[account]]></category>
		<category domain="yst_prominent_words" nicename="attempt"><![CDATA[attempt]]></category>
		<category domain="yst_prominent_words" nicename="authenticate"><![CDATA[authenticate]]></category>
		<category domain="yst_prominent_words" nicename="authenticate-call"><![CDATA[authenticate call]]></category>
		<category domain="yst_prominent_words" nicename="call"><![CDATA[call]]></category>
		<category domain="yst_prominent_words" nicename="forcecreate"><![CDATA[forcecreate]]></category>
		<category domain="yst_prominent_words" nicename="forcecreate-set"><![CDATA[forcecreate set]]></category>
		<category domain="yst_prominent_words" nicename="registration"><![CDATA[registration]]></category>
		<category domain="yst_prominent_words" nicename="script"><![CDATA[script]]></category>
		<category domain="yst_prominent_words" nicename="set"><![CDATA[set]]></category>
		<category domain="yst_prominent_words" nicename="user"><![CDATA[user]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>WebHookSpy script</title>
		<link>https://staging.getbraincloud.com/apidocs/cloud-code-central/handy-cloud-code-scripts/webhookspy-script/</link>
		<pubDate>Wed, 29 Aug 2018 18:52:40 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=4586</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>Purpose</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Used to discover and/or confirm the parameters being sent to a webhook.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The script simply:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>returns the parameters sent to it via the web response</li><li>writes an info-level log record, viewable via the <em>Recent Errors</em> section of <em>Monitoring</em></li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Script</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Click <a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2022/10/WebHookSpy.ccjs_.zip">WebHookSpy.ccjs.zip</a> to download the file.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Usage / Setup</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To configure this script, you must:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>First import it into your app</li><li>Then go to <strong>Design | Cloud Code | WebHooks</strong>, and link this script into a new or existing webhook</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>You can test calling the script using a browser, <a href="https://www.getpostman.com" target="_blank" rel="noopener noreferrer">Postman</a>, or something similar - just to confirm that the logging is working.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You will then to go to the external system (the one that is calling the webhook), and do whatever is required to get it to invoke the webhook.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finally, go to&nbsp;<strong>Quick | Recent Errors</strong> to view the results of invocation:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><em>change the filter to show info messages</em> - enable the [x] checkbox by the <span style="color: #008000;"><strong>green "i"</strong></span> and hit <strong>[Refresh]</strong></li><li>click on a log line to view the details. The parameters will be displayed in the <em>Context</em> field, which you can expand by dragging the bottom-right corner of the dialog</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4586</wp:post_id>
		<wp:post_date><![CDATA[2018-08-29 14:52:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-08-29 18:52:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[webhookspy-script]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>4513</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="calling"><![CDATA[calling]]></category>
		<category domain="yst_prominent_words" nicename="click"><![CDATA[click]]></category>
		<category domain="yst_prominent_words" nicename="confirm"><![CDATA[confirm]]></category>
		<category domain="yst_prominent_words" nicename="errors"><![CDATA[errors]]></category>
		<category domain="yst_prominent_words" nicename="log"><![CDATA[log]]></category>
		<category domain="yst_prominent_words" nicename="parameters"><![CDATA[parameters]]></category>
		<category domain="yst_prominent_words" nicename="recent-errors"><![CDATA[recent errors]]></category>
		<category domain="yst_prominent_words" nicename="script"><![CDATA[script]]></category>
		<category domain="yst_prominent_words" nicename="sent"><![CDATA[sent]]></category>
		<category domain="yst_prominent_words" nicename="view"><![CDATA[view]]></category>
		<category domain="yst_prominent_words" nicename="webhook"><![CDATA[webhook]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>ScriptScheduler script</title>
		<link>https://staging.getbraincloud.com/apidocs/cloud-code-central/handy-cloud-code-scripts/scriptscheduler-script/</link>
		<pubDate>Wed, 29 Aug 2018 19:40:59 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=4594</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>Purpose</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This script will schedule a script of an interval, and make sure it is not already scheduled.<span class="Apple-converted-space">&nbsp;</span></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If the interval is less then 60 min, it will only make sure there is no duplicate within 1 hour.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If the interval is more then 60 min (i.e not &lt; 60) it will make sure there is no duplicate within 24 hours.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Script</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Click <a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2022/10/ScriptScheduler.ccjs_.zip">ScriptScheduler.ccjs.zip</a> to download the file</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Usage</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To configure this script, simply import it into your app.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Then call it at the beginning of the script that you want to recur. See the code example below:</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4><code>DataCacheUpdate</code> cloud code script</h4>
<!-- /wp:heading -->

<!-- wp:enlighter/codeblock {"language":"js","theme":"twilight","linenumbers":"false","title":"DataCacheUpdate cloud code script"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="js" data-enlighter-theme="twilight" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="DataCacheUpdate cloud code script" data-enlighter-group="">// First, schedule this script to run again! 
// - Important to do this first - before any errors can occur!
var scriptProxy = bridge.getScriptServiceProxy();
var schedulerRetVal = scriptProxy.runScript( 
    "ScriptScheduler", 
    { "scriptName": "DataCacheUpdate",  "interval": 10, "args": {}}
);

// Now continue with this scripts activities!
// ...

</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>In this example, the script will <code>DataCacheUpdate</code> run every 10 minutes, and even if the script is triggered manually it will not cause multiple scheduling of itself.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4594</wp:post_id>
		<wp:post_date><![CDATA[2018-08-29 15:40:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-08-29 19:40:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[scriptscheduler-script]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>4513</wp:post_parent>
		<wp:menu_order>11</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>RankGame_AutoJoinMatch</title>
		<link>https://staging.getbraincloud.com/apidocs/cloud-code-central/handy-cloud-code-scripts/rankgame_autojoinmatch/</link>
		<pubDate>Wed, 05 Sep 2018 16:21:53 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=4605</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":3} -->
<h3>Purpose</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Starts a ranked match with a player looking for a match. Otherwise, will indicate that the current player is looking for a ranked match.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Based on the brainCloud <a href="https://github.com/getbraincloud/examples-unity">TicTacToe</a> example.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Script</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Click <a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2022/10/RankGame_AutoJoinMatch.ccjs_.zip">RankGame_AutoJoinMatch.ccjs.zip</a> to download the file.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Usage / Setup</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To configure this script, simply import it into your app.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The script is expected to be called when a player is trying to auto join an async match.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You call the script in the app via the <a href="https://staging.getbraincloud.com/apidocs/apiref/index.html#capi-script-runscript" target="_blank" rel="noopener noreferrer">RunScript()</a> API call.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The script takes the following parameters:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>rankRangeDelta - Elo range delta we will accept. A player will 1200 Elo and a delta of 200, will accept matches of players between 1000-1400</li><li>pushNotificationMessage - Notification opposing player will see. Note: you must first set your app up with push notifications</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><em>Example script parameters</em></p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{ 
   "rankRangeDelta":200,
   "pushNotificationMessage":"You are now in a ranked match!"
}</pre>
<!-- /wp:enlighter/codeblock -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4605</wp:post_id>
		<wp:post_date><![CDATA[2018-09-05 12:21:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-05 16:21:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[rankgame_autojoinmatch]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>4513</wp:post_parent>
		<wp:menu_order>11</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="accept"><![CDATA[accept]]></category>
		<category domain="yst_prominent_words" nicename="app"><![CDATA[app]]></category>
		<category domain="yst_prominent_words" nicename="call"><![CDATA[call]]></category>
		<category domain="yst_prominent_words" nicename="delta"><![CDATA[delta]]></category>
		<category domain="yst_prominent_words" nicename="elo"><![CDATA[elo]]></category>
		<category domain="yst_prominent_words" nicename="example"><![CDATA[example]]></category>
		<category domain="yst_prominent_words" nicename="looking"><![CDATA[looking]]></category>
		<category domain="yst_prominent_words" nicename="match"><![CDATA[match]]></category>
		<category domain="yst_prominent_words" nicename="parameters"><![CDATA[parameters]]></category>
		<category domain="yst_prominent_words" nicename="player"><![CDATA[player]]></category>
		<category domain="yst_prominent_words" nicename="ranked"><![CDATA[ranked]]></category>
		<category domain="yst_prominent_words" nicename="ranked-match"><![CDATA[ranked match]]></category>
		<category domain="yst_prominent_words" nicename="script"><![CDATA[script]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>RankGame_FinishMatch</title>
		<link>https://staging.getbraincloud.com/apidocs/cloud-code-central/handy-cloud-code-scripts/rankgame_finishmatch/</link>
		<pubDate>Wed, 05 Sep 2018 16:31:27 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=4609</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":3} -->
<h3>Purpose</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Ends a rank match. Adjust the players' rating and stats if not a tie. Updates player's standings in a rating's leaderboard.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Based on the brainCloud <a href="https://github.com/getbraincloud/examples-unity">TicTacToe</a> example.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Script</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Click <a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2022/10/RankGame_FinishMatch.ccjs_.zip">RankGame_AutoJoinMatch.ccjs.zip</a> to download the file.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Usage / Setup</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To configure this script, simply import it into your app.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The script is expected to be called when a player is completing the match.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You call the script in the app via the <a href="https://staging.getbraincloud.com/apidocs/apiref/index.html#capi-script-runscript" rel="noopener">RunScript()</a> API call.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The script takes the following parameters:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>ownerId - Owner id of the match played.</li><li>matchId - Id of the match played.</li><li>winnerId - Id of the winning player.</li><li>loserId - Id of the losing player.</li><li>winnerRating - Rating of the winning player.</li><li>loserRating - Rating of the losing player.</li><li>isTie - Whether the match state ended in a tie</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Example parameters JSON</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"json","title":"Example parameters"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="Example parameters" data-enlighter-group="">{
   "ownerId": "8f6b8fc3-cb19-4052-9bf6-ebf86a628536",
   "matchId": "a4b36631-a35c-4e2c-af8b-4c671c265b91",
   "winnerId": "8f6b8fc3-cb19-4052-9bf6-ebf86a628536",
   "loserId": "10627e1e-208f-4fb8-93a0-ca4ac014acef",
   "winnerRating": 1200,
   "loserRating": 1200,
   "isTie" : false
}</pre>
<!-- /wp:enlighter/codeblock -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4609</wp:post_id>
		<wp:post_date><![CDATA[2018-09-05 12:31:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-05 16:31:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[rankgame_finishmatch]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>4513</wp:post_parent>
		<wp:menu_order>11</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="app"><![CDATA[app]]></category>
		<category domain="yst_prominent_words" nicename="call"><![CDATA[call]]></category>
		<category domain="yst_prominent_words" nicename="example"><![CDATA[example]]></category>
		<category domain="yst_prominent_words" nicename="id"><![CDATA[id]]></category>
		<category domain="yst_prominent_words" nicename="id-of-the-match"><![CDATA[id of the match]]></category>
		<category domain="yst_prominent_words" nicename="id-of-the-match-played"><![CDATA[id of the match played]]></category>
		<category domain="yst_prominent_words" nicename="losing"><![CDATA[losing]]></category>
		<category domain="yst_prominent_words" nicename="losing-player"><![CDATA[losing player]]></category>
		<category domain="yst_prominent_words" nicename="match"><![CDATA[match]]></category>
		<category domain="yst_prominent_words" nicename="match-played"><![CDATA[match played]]></category>
		<category domain="yst_prominent_words" nicename="parameters"><![CDATA[parameters]]></category>
		<category domain="yst_prominent_words" nicename="played"><![CDATA[played]]></category>
		<category domain="yst_prominent_words" nicename="player"><![CDATA[player]]></category>
		<category domain="yst_prominent_words" nicename="rating"><![CDATA[rating]]></category>
		<category domain="yst_prominent_words" nicename="script"><![CDATA[script]]></category>
		<category domain="yst_prominent_words" nicename="tie"><![CDATA[tie]]></category>
		<category domain="yst_prominent_words" nicename="winning"><![CDATA[winning]]></category>
		<category domain="yst_prominent_words" nicename="winning-player"><![CDATA[winning player]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Making S2S API Calls from PostMan</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/using-postman-with-s2s/</link>
		<pubDate>Fri, 16 Nov 2018 20:42:10 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=4677</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>brainCloud support two varieties of S2S calls: with and without explicitly-allocated sessions.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><em>session-less</em> <ul><li>simpler, but less efficient</li><li>a disposable <code>sessionId</code> is automatically generated on the server (via authentication), and disposed of after the call</li><li>this takes time and costs an additional API count </li></ul></li><li><em>session-based</em> <ul><li>faster <em>and</em> less expensive!</li><li>supports request bundling</li><li>to use, you must first authenticate (similar to the Client API) to retrieve a sessionId, and then use that sessionId in future calls while incrementing the packetId associated with the message </li></ul></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><em>Note - the session-based S2S protocol, like the client protocol, supports the bundling of several API calls within a single HTTP request. In most circumstances it is more practical to combine the calls into a single cloud code script instead.&nbsp;</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Overall, the session-based S2S protocol is recommended for production applications, because it eliminates the redundant creation of disposable sessions. It performs better and costs you less! This tutorial will show you how to simulate both types of requests via Postman.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>Installing PostMan</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To install Postman, simply:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Download from&nbsp;<a href="https://www.getpostman.com/" target="_blank" rel="noreferrer noopener">https://www.getpostman.com/</a></li><li>Choose your platform, and complete the installation process</li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>Pre-requisite: Configuring S2S Servers</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Incoming servers must be configured (i.e. declared) in the brainCloud dashboard before making S2S calls. This allows brainCloud to confirm that the requests are coming from a server that you own and aren't malicious.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Launch the <a rel="noreferrer noopener" href="https://portal.braincloudservers.com" target="_blank">brainCloud Portal</a></li><li>Navigate to the <strong>Design | Cloud Code | My Servers</strong> page. Click  the <strong>[+New Server]</strong> button</li><li>Give your server a name, like "EXAMPLE_SERVER"</li><li>Entering IP ranges restricts access to requests coming from the specified network addresses. This is highly recommended for production apps! For now, you can leave the ranges blank. This will make all IP ranges acceptable.</li><li>Hit <strong>[Save]</strong>, and note your <em>server secret</em> - you will use it later.</li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>Session-less S2S Requests</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Session-less requests are simple. Each request is completely independent - no <code>sessionIds</code> or <code>packetIds</code> to manage. This API is best when calls into brainCloud are few and far between.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":4710,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/11/2018-11-17_17-16-51.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/11/2018-11-17_17-16-51.png" alt="" class="wp-image-4710"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><em>To simulate a session-less server request with Postman:</em></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Launch Postman</li><li>Add a new Request</li><li>Set the request type to <strong>POST</strong></li><li>Set the request URL to: "<a rel="noreferrer noopener" href="https://sharedprod.braincloudservers.com/s2sdispatcher" target="_blank">https://sharedprod.braincloudservers.com/s2sdispatcher</a>"</li><li>In the <strong>Body</strong> section of the request, choose <strong>raw</strong> and set the type to <strong><em>JSON (application/json)</em></strong></li><li>Copy this JSON into the body, setting the <code>appId</code>, <code>serverName</code>&nbsp;and <code>serverSecret</code> appropriately for your app</li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{  
   "appId":"12142",
   "serverName":"EXAMPLE_SERVER",
   "serverSecret":"b221c2a4-8df9-4937-8f9b-a95e4f71d5b6",
   "service":"globalApp",
   "operation":"READ_PROPERTIES",
   "data":{  

   }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:list {"className":"ol {start=7}"} -->
<ul class="ol {start=7}"><li>Select <strong>[Send]</strong></li><li>View the Response</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Unless you have added some properties, you will see an empty JSON response.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To change this, go to the&nbsp;<strong>Design | Custom Config | Global Properties</strong>&nbsp;page of the brainCloud Portal and configure a property or two - then run this request again. Voila!</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>Session-based S2S Requests</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Session-based requests require you to first request a <code>sessionId</code> to use via the Authenticate operation. You then reference that <code>sessionId</code>&nbsp;in subsequent requests, along with an incrementing <code>packetId</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>First, we need to Authenticate to get a SessionId</em></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>From Postman, Add a new Request</li><li>Set the request type to <strong>POST</strong></li><li>Use the same request URL: "<a rel="noreferrer noopener" href="https://sharedprod.braincloudservers.com/s2sdispatcher" target="_blank">https://sharedprod.braincloudservers.com/s2sdispatcher</a>"</li><li>In the <strong>Body</strong> tab of the request, choose <strong>raw</strong> and set the type to &nbsp;<strong><em>JSON (application/json)</em></strong></li><li>Copy this JSON into the body, setting <g class="gr_ gr_17 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace" id="17" data-gr-id="17"><g class="gr_ gr_12 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del" id="12" data-gr-id="12">the</g> </g><code>appId</code><g class="gr_ gr_17 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace" id="17" data-gr-id="17">,</g> <code>serverName</code>&nbsp;and <code>serverSecret</code> appropriately for your app</li><li><strong>(in both places!)</strong>  </li><li>View the response, and save <g class="gr_ gr_16 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace" id="16" data-gr-id="16">the </g><code>sessionId</code><g class="gr_ gr_16 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace" id="16" data-gr-id="16"> that</g> is returned.</li><li>Now, make a second request, using that <code>sessionId</code> and setting the&nbsp;<code>packetId</code> to&nbsp;<code>1</code> </li><li>For each subsequent request, be sure to increment the <code>packetId</code>. Try this one: </li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{  
   "packetId":0,
   "messages":[
       {
         "appId":"12142",
         "service":"authenticationV2",
         "operation":"AUTHENTICATE",
         "data": {  
            "appId":"12142",
            "serverName":"EXAMPLE_SERVER",
            "serverSecret":"b221c2a4-8df9-4937-8f9b-a95e4f71d5b6"
          }
       }
   ]
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:list {"className":"ol {\u0022start\u0022=\u00227\u0022} start="} -->
<ul class="ol {&quot;start&quot;=&quot;7&quot;} start="><li>View the response, and save the <g class="gr_ gr_17 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace" id="17" data-gr-id="17">sessionId</g> that is returned.</li><li>Now, make a second request, using that <g class="gr_ gr_30 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace" id="30" data-gr-id="30">sessionId</g> and setting the&nbsp;<g class="gr_ gr_42 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace" id="42" data-gr-id="42">packedId</g> to&nbsp;1 </li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
   "sessionId":"df5gelac0mhrpht31ffgtgatoe",
   "packetId":1,
   "messages":[
      {
         "service":"globalEntity",
         "operation":"CREATE_SYSTEM_ENTITY",
         "data":{
            "entityType":"address",
            "timeToLive":null,
            "acl":{
               "other":1
            },
            "data":{
               "street":"1309 Carling"
            }
         }
      }
   ]
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:list {"className":"ol {\u0022start\u0022=\u00229\u0022}"} -->
<ul class="ol {&quot;start&quot;=&quot;9&quot;}"><li>For each subsequent request, be sure to increment the <code>packetId</code>. Try this one: </li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{  
   "sessionId":"df5gelac0mhrpht31ffgtgatoe",
   "packetId":2,
   "messages":[  
      {  
         "service":"globalEntity",
         "operation":"GET_LIST",
         "data":{  
            "where":{  
               "entityType":"address"
            },
            "orderBy":{  

            },
            "maxReturn":50
         }
      }
   ]
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>So, you get the idea.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Important things to remember:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><em>Always</em> increment the <code>packetId</code>&nbsp;- <em>except for identical retries</em>. If you're retrying the same request because of a communications failure, you should keep the <code>packetId</code>&nbsp;the same (it helps the server to prevent duplicate operations from happening). If you got a response from the server though, successful or not, you should increment the packetId for you next request.</li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>Service and Operation Codes</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The API calls documented in the API Ref (<a href="https://staging.getbraincloud.com/apidocs/apiref/?raw#s2s" target="_blank" rel="noreferrer noopener">https://staging.getbraincloud.com/apidocs/apiref/?raw#s2s</a>) are mapped to discrete <em>Services</em> and <em>Operations</em> on the server.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The codes, together with operation-specific parameters (specified in the JSON <code>data</code>&nbsp;object) are used to send commands to the server.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":4684,"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/11/APIRef.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/11/APIRef.png" alt="" class="wp-image-4684"/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Only the API Calls in the S2S section of the API Ref can be used for S2S calls.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4677</wp:post_id>
		<wp:post_date><![CDATA[2018-11-16 15:42:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-11-16 20:42:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[using-postman-with-s2s]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>79</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="api-calls"><![CDATA[api calls]]></category>
		<category domain="yst_prominent_words" nicename="appropriately-for-your-app"><![CDATA[appropriately for your app]]></category>
		<category domain="yst_prominent_words" nicename="body-setting-the-and-appropriately"><![CDATA[body setting the and appropriately]]></category>
		<category domain="yst_prominent_words" nicename="choose-raw-and-set"><![CDATA[choose raw and set]]></category>
		<category domain="yst_prominent_words" nicename="json-into-the-body"><![CDATA[json into the body]]></category>
		<category domain="yst_prominent_words" nicename="raw-and-set-the-type"><![CDATA[raw and set the type]]></category>
		<category domain="yst_prominent_words" nicename="recommended-for-production"><![CDATA[recommended for production]]></category>
		<category domain="yst_prominent_words" nicename="request"><![CDATA[request]]></category>
		<category domain="yst_prominent_words" nicename="request-choose-raw"><![CDATA[request choose raw]]></category>
		<category domain="yst_prominent_words" nicename="request-choose-raw-and-set"><![CDATA[request choose raw and set]]></category>
		<category domain="yst_prominent_words" nicename="request-type-to-post"><![CDATA[request type to post]]></category>
		<category domain="yst_prominent_words" nicename="s2s-calls"><![CDATA[s2s calls]]></category>
		<category domain="yst_prominent_words" nicename="session-based-s2s"><![CDATA[session-based s2s]]></category>
		<category domain="yst_prominent_words" nicename="session-based-s2s-protocol"><![CDATA[session-based s2s protocol]]></category>
		<category domain="yst_prominent_words" nicename="set-the-request"><![CDATA[set the request]]></category>
		<category domain="yst_prominent_words" nicename="set-the-request-type"><![CDATA[set the request type]]></category>
		<category domain="yst_prominent_words" nicename="set-the-type-to-json"><![CDATA[set the type to json]]></category>
		<category domain="yst_prominent_words" nicename="type-to-json-application-json"><![CDATA[type to json application/json]]></category>
		<category domain="yst_prominent_words" nicename="view-the-response"><![CDATA[view the response]]></category>
		<category domain="yst_prominent_words" nicename="view-the-response-and-save"><![CDATA[view the response and save]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>RestrictClientCalls script</title>
		<link>https://staging.getbraincloud.com/apidocs/cloud-code-central/handy-cloud-code-scripts/restrictclientcalls-script/</link>
		<pubDate>Mon, 07 Jan 2019 20:32:15 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=4786</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>Purpose</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Allows an app to severely restrict access to brainCloud Client APIs. Very useful if your app has significant security requirements.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The script can be configured in one of two ways:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>whitelist - all services and operations specified are *allowed*. Any API calls not specified are not allowed.</li><li>blacklist - disallow access to the services and operations specified. All other API calls allowed.</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Script</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Click <a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2022/10/RestrictClientCalls.ccjs_.zip">RestrictClientCalls.ccjs.zip</a> to download the file.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Usage / Setup</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To configure this script, you must first import it into your app.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Then go to the <strong>Design | Cloud Code | API Hooks</strong> screen, and click the <strong>[+ Create]</strong> button to configure the script.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>On the configuration dialog that displays, choose:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Service: "Dispatcher"</li><li>Operation: "ProcessMessage"</li><li>Pre/Post: "Pre"</li><li>Script: "RestrictClientCalls"</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>And then in the <em>Params</em> section, you can configure a whitelist or blacklist of services and operations to enable or restrict. Here is an example:</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock {"language":"json"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
    "listtype": "whitelist",
    "services": {
        "entity": { "READ": 1 },
        "globalEntity": { "GET_LIST": 1, "GET_LIST_COUNT": 1 },
        "heartbeat": { "READ": 1 },
        "playerState": {},
        "script": {}
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>The example above allows calls to:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>"entity" service, "READ" operation only</li><li>"globalEntitity" service, "GET_LIST" and "GET_LIST_COUNT" operations</li><li>"heartbeat" service, "READ" operation only &lt;- important - heartbeats are used to keep your client sessions alive!</li><li>"playerState" service - any operation</li><li>"script" service - any operation... &lt;- note, individual script permissions still apply</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Notes</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><em>Calls to the "authenticationV2" service are always allowed.</em></li><li>Rejected API calls will return an HTTP status of 500 with a 40639 <code>reason_code</code>.</li></ul>
<!-- /wp:list -->

<!-- wp:advanced-gutenberg-blocks/notice -->
<div class="wp-block-advanced-gutenberg-blocks-notice is-variation-warning has-icon" data-type="warning"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewbox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path><line x1="12" y1="9" x2="12" y2="13"></line><line x1="12" y1="17" x2="12" y2="17"></line></svg><p class="wp-block-advanced-gutenberg-blocks-notice__title">Warning</p><p class="wp-block-advanced-gutenberg-blocks-notice__content">This approach is complete and secure - but does result in a lot of additional API calls being incurred by your app. For a more targeted approach, see <a href="http://help.getbraincloud.com/en/articles/1852058-is-there-a-way-to-prevent-a-client-apps-from-making-certain-api-calls">this</a> knowledge base article.</p></div>
<!-- /wp:advanced-gutenberg-blocks/notice -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4786</wp:post_id>
		<wp:post_date><![CDATA[2019-01-07 15:32:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-07 20:32:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[restrictclientcalls-script]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>4513</wp:post_parent>
		<wp:menu_order>11</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="access"><![CDATA[access]]></category>
		<category domain="yst_prominent_words" nicename="allowed"><![CDATA[allowed]]></category>
		<category domain="yst_prominent_words" nicename="allows"><![CDATA[allows]]></category>
		<category domain="yst_prominent_words" nicename="api"><![CDATA[api]]></category>
		<category domain="yst_prominent_words" nicename="api-calls"><![CDATA[api calls]]></category>
		<category domain="yst_prominent_words" nicename="app"><![CDATA[app]]></category>
		<category domain="yst_prominent_words" nicename="blacklist"><![CDATA[blacklist]]></category>
		<category domain="yst_prominent_words" nicename="calls"><![CDATA[calls]]></category>
		<category domain="yst_prominent_words" nicename="configure"><![CDATA[configure]]></category>
		<category domain="yst_prominent_words" nicename="operation"><![CDATA[operation]]></category>
		<category domain="yst_prominent_words" nicename="operations"><![CDATA[operations]]></category>
		<category domain="yst_prominent_words" nicename="operations-specified"><![CDATA[operations specified]]></category>
		<category domain="yst_prominent_words" nicename="restrict"><![CDATA[restrict]]></category>
		<category domain="yst_prominent_words" nicename="script"><![CDATA[script]]></category>
		<category domain="yst_prominent_words" nicename="service"><![CDATA[service]]></category>
		<category domain="yst_prominent_words" nicename="services"><![CDATA[services]]></category>
		<category domain="yst_prominent_words" nicename="services-and-operations"><![CDATA[services and operations]]></category>
		<category domain="yst_prominent_words" nicename="services-and-operations-specified"><![CDATA[services and operations specified]]></category>
		<category domain="yst_prominent_words" nicename="specified"><![CDATA[specified]]></category>
		<category domain="yst_prominent_words" nicename="whitelist"><![CDATA[whitelist]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>brainCloud + Unity + Steam Integration</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/unity-tutorials/braincloud-unity-steam-integration/</link>
		<pubDate>Wed, 22 May 2019 16:24:22 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=6118</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Steam does not offer native support for the Unity Game Engine. A third party git library was used to integrate Steam features into Unity.<br></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1>Required Materials</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Download Steamworks SDK from Steam</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://partner.steamgames.com/doc/sdk">https://partner.steamgames.com/doc/sdk</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Steamworks.Net version 12.0.0 was used. <br><a href="https://github.com/rlabrecque/Steamworks.NET/releases">https://github.com/rlabrecque/Steamworks.NET/releases</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>brainCloud version 3.11 was used.<br><a href="https://github.com/getbraincloud/braincloud-csharp">https://github.com/getbraincloud/braincloud-csharp</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Unity 2018.2.5f1 was used</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://unity3d.com/get-unity/download/archive">https://unity3d.com/get-unity/download/archive</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1>Configure Steam Platform with brainCloud Design Portal</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Enter in the Steam App Id and Steam Publisher Key into the brainCloud Design Portal via <strong>Design -&gt; Core App Info -&gt; Application IDs.</strong><br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Steam App Id </strong>- Retrievable via Steam’s partner network.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Steam Publisher Key </strong>- Also referred to as WEB API key within Steam. &nbsp;From the Steam partner network, Users &amp; Permissions. &nbsp;Select the correct group, and select “Create WepAPI Key” from the right panel.<br></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1>Configure Steamworks.Net </h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Update <strong>Plugins\Steamworks.NET\redist\steam_appid.txt</strong> with the appropriate steam app Id.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Update <strong>SteamManager.cs</strong>, <br></p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">if (SteamAPI.RestartAppIfNecessary(AppId_t.Invalid))</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p> To </p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">if (SteamAPI.RestartAppIfNecessary((AppId_t)&lt;yoursteamappid>) </pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":1} -->
<h1>Setup Steamworks.Net </h1>
<!-- /wp:heading -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">using Steamworks;

public void SetupSteamManager()
{
    if (SteamManager.Initialized)
    {
        m_bSteamInitialized = true;
        // required callback for authenticating, view Steamworks.Net + brainCloud Authentication
        m_getAuthSessionTicketResponse = Callback&lt;GetAuthSessionTicketResponse_t>.Create(OnGetAuthSessionTicketResponse);
        // required callback for In-App Purchases, Steamworks.Net + brainCloud Microtransactions
        m_transactionCallback = Callback&lt;MicroTxnAuthorizationResponse_t>.Create(OnTransactionResponse);
    }        
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1>Steamworks.Net + brainCloud Authentication</h1>
<!-- /wp:heading -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">using BrainCloud;

private bool m_bAttachSteam = false; // used for after we receive the auth response
private uint m_ticketSize;           // cache ticket size
private byte[] m_ticket;             // cache auth ticket

// requests an auth ticket from Steam for use later
public void AttachSteamAccount(bool in_bAttach = false, SuccessCallback in_success = null, FailureCallback in_fail = null)
{
    if (SteamManager.Initialized)
    {
        m_bAttachSteam = in_bAttach;
        m_steamAuthSuccess = in_success;
        m_steamFailure = in_fail;

        m_ticket = new byte[1024];
        SteamUser.GetAuthSessionTicket(m_ticket, 1024, out m_ticketSize);
    }
}

public void MergeSteamAccount(SuccessCallback in_success = null, FailureCallback in_fail = null, object in_obj = null)
{
    if (m_steamIdStr != "" &amp;&amp; m_authToken != "")
    {
        BCWrapper.IdentityService.MergeSteamIdentity(m_steamIdStr, m_authToken, in_success, in_fail, in_obj);
        m_steamIdStr = ""; 
        m_authToken  = "";
    }
}

private string m_authToken = "";    // will cache this, if we need it for a merge
private string m_steamIdStr = "";   // will cache this, if we need it for a merge
private void OnGetAuthSessionTicketResponse(GetAuthSessionTicketResponse_t pCallback)
{
    CSteamID steamId = SteamUser.GetSteamID();
    if (pCallback.m_hAuthTicket != HAuthTicket.Invalid &amp;&amp; m_ticketSize != 0)
    {
        m_steamIdStr = steamId.ToString();
        // IMPORTANT!!! CONVERT TO HEX STRING
        m_authToken = BitConverter.ToString(m_ticket, 0, (int)m_ticketSize).Replace("-", string.Empty);

        if (!m_bAttachSteam)
        {
           BCWrapper.AuthenticateSteam(m_steamIdStr, m_authToken, false, m_steamAuthSuccess, m_steamFailure, m_steamObj);
        }
        else
        {
           BCWrapper.IdentityService.AttachSteamIdentity(m_steamIdStr, m_authToken, m_steamAuthSuccess, m_steamFailure, m_steamObj);
        }
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1>Steamworks.Net + brainCloud Microtransactions / In-App Purchases</h1>
<!-- /wp:heading -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group=""> // steam is a two-step process, where you start a purchase, and then finalize it

private SuccessCallback m_successCallback;
private FailureCallback m_failureCallback;
private string m_delayedTransactionId = "";

public void StartPurchase(string in_languageCode, string in_storeProductId, SuccessCallback in_success = null, FailureCallback in_fail = null)
{
    m_successCallback = in_success;
    m_failureCallback = in_failure;
    m_delayedTransactionId = "";

    Dictionary&lt;string, object> purchaseData = new Dictionary&lt;string, object>();
    purchaseData["language"] = in_languageCode;
    purchaseData["itemId"] = in_storeProductId;

    BCWrapper.Client.AppStoreService.StartPurchase("steam", JsonWriter.Serialize(purchaseData), onSteamStartPurchaseSuccess, m_failureCallback);
}

private void onSteamStartPurchaseSuccess(string in_json, object obj)
{
    Dictionary&lt;string, object> jsonMessage = (Dictionary&lt;string, object>)JsonReader.Deserialize(in_json);
    Dictionary&lt;string, object> jsonData = (Dictionary&lt;string, object>)jsonMessage["data"];
    
    // brainCloud has given a transaction ID for this interaction, the STEAM overlay will popup
    // to finalize the purchase for the user        
    m_delayedTransactionId = (string)jsonData["transactionId"];
}
// callback was created during Steam Setup 
private void OnTransactionResponse(MicroTxnAuthorizationResponse_t pCallback)
{
   Dictionary&lt;string, object> transactionData = new Dictionary&lt;string, object>();
   transactionData["transId"] = m_delayedTransactionId;
   BCWrapper.AppStoreService.FinalizePurchase("steam", m_delayedTransactionId, JsonWriter.Serialize(transactionData), m_successCallback, m_failureCallback);

   m_delayedTransactionId = "";
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":1} -->
<h1>More Info</h1>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Often times the Steam Overlay does not render/show up during editor or developer standalone builds. &nbsp;You will need to upload a build using the steam SDK content uploader, to ensure the overlay is properly rendered over Unity’s engine.<br><br></li><li>All Steam purchases by default are in sandbox mode, to help initial integration and testing, prior to release. &nbsp;Visit the brainCloud design portal  Navigate to <strong>Design -&gt; Core App Info -&gt; Advanced Settings</strong>. &nbsp;At the bottom is a check mark to distinguish if Steam Store purchases should be in sandbox mode or not. &nbsp;Ensure this is unselected before going to the marketplace.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6118</wp:post_id>
		<wp:post_date><![CDATA[2019-05-22 12:24:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-22 16:24:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[braincloud-unity-steam-integration]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>572</wp:post_parent>
		<wp:menu_order>1105</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="app-id"><![CDATA[app id]]></category>
		<category domain="yst_prominent_words" nicename="app-info"><![CDATA[app info]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-design"><![CDATA[braincloud design]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-design-portal"><![CDATA[braincloud design portal]]></category>
		<category domain="yst_prominent_words" nicename="core-app"><![CDATA[core app]]></category>
		<category domain="yst_prominent_words" nicename="core-app-info"><![CDATA[core app info]]></category>
		<category domain="yst_prominent_words" nicename="design-core"><![CDATA[design core]]></category>
		<category domain="yst_prominent_words" nicename="design-core-app"><![CDATA[design core app]]></category>
		<category domain="yst_prominent_words" nicename="design-core-app-info"><![CDATA[design core app info]]></category>
		<category domain="yst_prominent_words" nicename="design-portal"><![CDATA[design portal]]></category>
		<category domain="yst_prominent_words" nicename="partner-network"><![CDATA[partner network]]></category>
		<category domain="yst_prominent_words" nicename="publisher-key"><![CDATA[publisher key]]></category>
		<category domain="yst_prominent_words" nicename="sandbox-mode"><![CDATA[sandbox mode]]></category>
		<category domain="yst_prominent_words" nicename="steam-app"><![CDATA[steam app]]></category>
		<category domain="yst_prominent_words" nicename="steam-app-id"><![CDATA[steam app id]]></category>
		<category domain="yst_prominent_words" nicename="steam-publisher"><![CDATA[steam publisher]]></category>
		<category domain="yst_prominent_words" nicename="steam-publisher-key"><![CDATA[steam publisher key]]></category>
		<category domain="yst_prominent_words" nicename="steamworks-net"><![CDATA[steamworks.net]]></category>
		<category domain="yst_prominent_words" nicename="steamworks-net-braincloud"><![CDATA[steamworks.net braincloud]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_74a2519bf6ffdac1c4ae3bf6a62abc60]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_3f5a61979c6640bb6f435fb69a782cd1]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_elementor_edit_mode]]></wp:meta_key>
		<wp:meta_value><![CDATA[builder]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_elementor_template_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[wp-page]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_elementor_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[3.6.5]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>brainCloud AyncMatchService + RTT</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/unity-tutorials/braincloud-ayncmatchservice-rtt/</link>
		<pubDate>Mon, 27 May 2019 16:32:44 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=6150</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Already have an existing app using brainCloud’s AsyncMatchService, and would like to get Real-Time Updates? Do you want to support offline Async matches, as well as give the ability of real-time updates to that game?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Ie. You want to create, or have a Tic Tac Toe type game, whereby most turns are taken without the need for users to be BOTH online, but also allow the game to progress in near real-time if both all users are online?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A game exemplifying this feature set is, Wargroove. Wargroove allows offline matches to be created, acted upon, and completed while both users are not online together. However, if both users are online at the same time, gameplay acts out as if its a real time turn based game.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="required-materials">Required Materials</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 id="braincloud-40">brainCloud 4.0</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://github.com/getbraincloud/braincloud-csharp">https://github.com/getbraincloud/braincloud-csharp</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="unity-201839">Unity 2018.3.9</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://unity3d.com/get-unity/download/archive">https://unity3d.com/get-unity/download/archive</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="supporting-materials">Supporting Materials</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Up to date and previous versions of Tic Tac Toe are available here. Tic Tac Toe, previously was a pure Async Match supported the game. All turns would be done, and the app would have to poll or provide a user interaction to get the updated status on matches. By extending brainCloud’s RTT service to provide real-time updates to online users of a match, there is no need, for the app to poll, or need to provide a user interactable to refresh the status on matches since the app will receive real-time notification of updates. If the user was offline, all gameplay will be just as it was before.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="tic-tac-toe-example">Tic Tac Toe Example</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://github.com/getbraincloud/examples-unity/tree/master/TicTacToe">https://github.com/getbraincloud/examples-unity/tree/master/TicTacToe</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="enable-rtt">Enable RTT</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>From the brainCloud Portal, select the app you wish to add RTT to. Select the Real-time Tech (RTT) Enabled checkbox from <strong>Design | Core App Info  |  Advanced Settings</strong>.&nbsp;<a href="https://sharedprod.braincloudservers.com/admin/dashboard#/development/core-settings-advanced-settings">https://sharedprod.braincloudservers.com/admin/dashboard#/development/core-settings-advanced-settings</a></p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">// Enable RTT
private void enableRTT()
{
    // Only Enable RTT if it's not already started
    if (!BcWrapper.Client.IsRTTEnabled())
    {
        BcWrapper.Client.EnableRTT(eRTTConnectionType.WEBSOCKET, onRTTEnabled, onRTTFailure);
    }
    else
    {
        // its already started, let's call our success delegate 
        onRTTEnabled("", null);
    }
}

// RTT enabled, ensure we now request the updated match state
private void onRTTEnabled(string responseData, object cbPostObject)
{
    queryMatchState();
    // LISTEN TO THE ASYNC CALLS, when we get one of these calls, let's just refresh 
    // match state
    BcWrapper.Client.RegisterRTTAsyncMatchCallback(queryMatchStateRTT);
}

// the listener, can parse the json and request just the updated match 
// in this example, just re-request it all
private void queryMatchStateRTT(string in_json)
{
    queryMatchState();
}

private void queryMatchState()
{
    BcWrapper.MatchMakingService.FindPlayers(RANGE_DELTA, NUMBER_OF_MATCHES, OnFindPlayers);
}

private void onRTTFailure(int status, int reasonCode, string responseData, object cbPostObject)
{
    // TODO! Bring up a user dialog to inform of poor connection
    // for now, try to auto connect 
    Invoke("enableRTT", 5.0f);
}
</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Enabling RTT, and activating a listener for the Async Match Service, allows for real-time messages to be acted upon from within the client.&nbsp;<code>queryMatchState()</code>&nbsp;used to be controlled via user interaction. By connecting this to an RTT listener, we can provide the user with a SEAMLESS interaction into both a pure offline Async Match and its real-time updates.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6150</wp:post_id>
		<wp:post_date><![CDATA[2019-05-27 12:32:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-27 16:32:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[braincloud-ayncmatchservice-rtt]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>572</wp:post_parent>
		<wp:menu_order>1006</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="app"><![CDATA[app]]></category>
		<category domain="yst_prominent_words" nicename="async"><![CDATA[async]]></category>
		<category domain="yst_prominent_words" nicename="async-match"><![CDATA[async match]]></category>
		<category domain="yst_prominent_words" nicename="game"><![CDATA[game]]></category>
		<category domain="yst_prominent_words" nicename="matches"><![CDATA[matches]]></category>
		<category domain="yst_prominent_words" nicename="offline"><![CDATA[offline]]></category>
		<category domain="yst_prominent_words" nicename="offline-async"><![CDATA[offline async]]></category>
		<category domain="yst_prominent_words" nicename="online"><![CDATA[online]]></category>
		<category domain="yst_prominent_words" nicename="provide-a-user"><![CDATA[provide a user]]></category>
		<category domain="yst_prominent_words" nicename="real-time"><![CDATA[real-time]]></category>
		<category domain="yst_prominent_words" nicename="real-time-updates"><![CDATA[real-time updates]]></category>
		<category domain="yst_prominent_words" nicename="rtt"><![CDATA[rtt]]></category>
		<category domain="yst_prominent_words" nicename="status-on-matches"><![CDATA[status on matches]]></category>
		<category domain="yst_prominent_words" nicename="tac-toe"><![CDATA[tac toe]]></category>
		<category domain="yst_prominent_words" nicename="tic-tac"><![CDATA[tic tac]]></category>
		<category domain="yst_prominent_words" nicename="tic-tac-toe"><![CDATA[tic tac toe]]></category>
		<category domain="yst_prominent_words" nicename="updates"><![CDATA[updates]]></category>
		<category domain="yst_prominent_words" nicename="user"><![CDATA[user]]></category>
		<category domain="yst_prominent_words" nicename="user-interaction"><![CDATA[user interaction]]></category>
		<category domain="yst_prominent_words" nicename="users"><![CDATA[users]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>blog</title>
		<link>https://staging.getbraincloud.com/apidocs/blog/</link>
		<pubDate>Mon, 27 May 2019 18:02:46 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=6152</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6152</wp:post_id>
		<wp:post_date><![CDATA[2019-05-27 14:02:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-27 18:02:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[blog]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pprredirect_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[301]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pprredirect_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://staging.getbraincloud.com/apidocs/recent-blogs]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pprredirect_active]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>SharedScripts</title>
		<link>https://staging.getbraincloud.com/apidocs/cloud-code-central/handy-cloud-code-scripts/sharedscripts/</link>
		<pubDate>Fri, 31 May 2019 18:17:59 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=6198</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2 id="purpose">Purpose</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Script shows how you can use brainCloud properties to share scripts between cloud code.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="warning">Warning</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This has been tested with up to 30k bytes of code.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>That said, isn't an officially sanctioned approach. We don't recommend putting more than&nbsp;<strong>20-25kb</strong>&nbsp;in the shared code string.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="script">Script</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Click <a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2022/10/TestSharedFunctions.ccjs_.zip">TestSharedFunctions.ccjs.zip</a> to download the file.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="usage--setup">Usage / Setup</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Add a Global Property with the scripts you want to share.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Properties can be set on the&nbsp;<strong>Design | Custom Config |&nbsp;<a href="https://portal.braincloudservers.com/admin/dashboard#/development/global-properties">Global Properties</a></strong>&nbsp;page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The example test script assumes a&nbsp;<code>getFuzz</code>&nbsp;and&nbsp;<code>addTwoNums</code>&nbsp;functions exist.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">function getFuzz() {
    return 'Fuzz';
}

function addTwoNums( a, b ) {
    return a + b;
}
</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:image {"align":"center","id":6189,"className":"add-border"} -->
<div class="wp-block-image add-border"><figure class="aligncenter"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/05/image-1.png" alt="" class="wp-image-6189"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>To configure this script, simply import it into your app.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Authenticate, and run the script.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is the response you should get.</p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
  "data": {
    "response": {
      "getFuzz": "Fuzz",
      "sum": 15
    },
    "success": true
  },
  "status": 200
}</pre>
<!-- /wp:enlighter/codeblock -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6198</wp:post_id>
		<wp:post_date><![CDATA[2019-05-31 14:17:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-31 18:17:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[sharedscripts]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>4513</wp:post_parent>
		<wp:menu_order>11</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="code"><![CDATA[code]]></category>
		<category domain="yst_prominent_words" nicename="global"><![CDATA[global]]></category>
		<category domain="yst_prominent_words" nicename="properties"><![CDATA[properties]]></category>
		<category domain="yst_prominent_words" nicename="script"><![CDATA[script]]></category>
		<category domain="yst_prominent_words" nicename="scripts"><![CDATA[scripts]]></category>
		<category domain="yst_prominent_words" nicename="share"><![CDATA[share]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Bombers RTT Example Game</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/unity-tutorials/bombers-rtt-example-game/</link>
		<pubDate>Wed, 26 Jun 2019 17:25:10 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=6368</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><em>Trying to use UNET or Photon? Find our legacy Bombers Tutorial <a href="https://staging.getbraincloud.com/apidocs/tutorials/unity-tutorials/braincloud-bombers-example-game/">here</a>.</em></p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>The latest version of the Bombers project can always be found <a href="https://github.com/getbraincloud/examples-unity/tree/master/BombersRTT">here</a> on GitHub </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>brainCloud Bombers RTT is a&nbsp;fun little&nbsp;game, written in <strong>Unity</strong>, that&nbsp;demonstrates how brainCloud can work with our RTT technology for real-time multiplayer.<br></p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":6384,"className":"add-border"} -->
<figure class="wp-block-image add-border"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/06/image-1-1024x637.png" alt="" class="wp-image-6384"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Bombers is a fun&nbsp;multiplayer game&nbsp;with the following features:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Game objective: Destroy the other team's fleet to win</li><li>Two-stage gameplay: Dogfight&nbsp;to collect bombs, then drop the bombs&nbsp;to destroy enemy ships</li><li>Controls: Touch controls</li><li>Players: Max 8 players per match</li><li>Leaderboards: Global leaderboards</li><li>Achievements: 3 achievements to earn</li><li>Cloud saves: Player progression&nbsp;is saved as they level up</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2><strong>Play Now!</strong></h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><a href="http://apps.braincloudservers.com/bombersrtt-live/index.html">Web Demo</a> - bombers Unity/WebGL example</li><li><strong><a rel="noreferrer noopener" href="https://sharedprod.braincloudservers.com/s3/brainCloudExamples/unity/bombersUnet/brainCloudBombersUNET_OSX_1.0.0.zip" target="_blank">MacOS Demo</a></strong> - bombers MacOS example (not yet Catalina-ready).</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Full Source Available</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The full source of brainCloud bombers&nbsp;has been made available for our developers. Feel free to use and extend it - but please replace all art for commercial efforts and be sure to use brainCloud! Good luck!</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="/apidocs/tutorials/unity-tutorials/about-bombers-rtt/">Read</a> about how brainCloud Bombers RTT was written</li><li><a rel="noreferrer noopener" href="https://github.com/getbraincloud/UnityExamples" target="_blank">View</a> the&nbsp;source (Github)</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6368</wp:post_id>
		<wp:post_date><![CDATA[2019-06-26 13:25:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-06-26 17:25:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bombers-rtt-example-game]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>572</wp:post_parent>
		<wp:menu_order>14</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="achievements"><![CDATA[achievements]]></category>
		<category domain="yst_prominent_words" nicename="bombers"><![CDATA[bombers]]></category>
		<category domain="yst_prominent_words" nicename="bombers-rtt"><![CDATA[bombers rtt]]></category>
		<category domain="yst_prominent_words" nicename="bombs"><![CDATA[bombs]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-bombers"><![CDATA[braincloud bombers]]></category>
		<category domain="yst_prominent_words" nicename="braincloud-bombers-rtt"><![CDATA[braincloud bombers rtt]]></category>
		<category domain="yst_prominent_words" nicename="controls"><![CDATA[controls]]></category>
		<category domain="yst_prominent_words" nicename="demo-bombers"><![CDATA[demo bombers]]></category>
		<category domain="yst_prominent_words" nicename="destroy"><![CDATA[destroy]]></category>
		<category domain="yst_prominent_words" nicename="full-source"><![CDATA[full source]]></category>
		<category domain="yst_prominent_words" nicename="fun"><![CDATA[fun]]></category>
		<category domain="yst_prominent_words" nicename="game"><![CDATA[game]]></category>
		<category domain="yst_prominent_words" nicename="github"><![CDATA[github]]></category>
		<category domain="yst_prominent_words" nicename="leaderboards"><![CDATA[leaderboards]]></category>
		<category domain="yst_prominent_words" nicename="multiplayer"><![CDATA[multiplayer]]></category>
		<category domain="yst_prominent_words" nicename="players"><![CDATA[players]]></category>
		<category domain="yst_prominent_words" nicename="rtt"><![CDATA[rtt]]></category>
		<category domain="yst_prominent_words" nicename="source"><![CDATA[source]]></category>
		<category domain="yst_prominent_words" nicename="written"><![CDATA[written]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>About Bombers RTT</title>
		<link>https://staging.getbraincloud.com/apidocs/tutorials/unity-tutorials/about-bombers-rtt/</link>
		<pubDate>Wed, 26 Jun 2019 21:20:35 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=6419</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>brainCloud Bombers is an example project meant to show how to use brainCloud for real-time multiplayer. Players create accounts, log into the game, play against other players in real-time multiplayer battles, and their stats are saved between sessions via&nbsp;brainCloud. The example also shows various features of brainCloud, including:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Experience levels and ranking up</li><li>Custom player statistics and entities</li><li>Multiple global leaderboards</li><li>Achievement tracking and unlocking</li><li>Global properties</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Please refer to the specific individual sections for some description, overview, and functionality of each feature. &nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2><strong>Experience Levels and Ranking Up</strong></h2>
<!-- /wp:heading -->

<!-- wp:image {"id":6399,"align":"left","width":245,"height":304,"className":"add-border"} -->
<div class="wp-block-image add-border"><figure class="alignleft is-resized"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/06/image-4.png" alt="" class="wp-image-6399" width="245" height="304"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>In brainCloud Bombers, players can earn experience for destroying enemy planes in-game. Experience is awarded at the end of each match and kept track of on the brainCloud servers. Players can view their total experience on the Matchmaking menu, beneath the player’s name. brainCloud also has custom levels defined, each having an experience value and a name. Players can see their current rank (as well as its numeric value) on the Matchmaking menu, beneath the player’s name. Experience is incremented live, so brainCloud sends messages to clients when they have made it to the next rank. This is shown to the player through a dialog that appears at the end of a match.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Experience and levels can be read through the PlayerStateService in the brainCloud API. The call returns the current player’s experience level and rank name/numeric value, all of which are saved as public member variables in the BrainCloudStats class. These stats are updated live on the brainCloud server, but on the local client, they are only updated when the player visits the Matchmaking menu, reducing the number of API calls required per user.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2><strong>Custom Player [User] Statistics</strong></h2>
<!-- /wp:heading -->

<!-- wp:image {"id":6395,"align":"right","width":264,"height":277,"className":"add-border"} -->
<div class="wp-block-image add-border"><figure class="alignright is-resized"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/06/image-3.png" alt="" class="wp-image-6395" width="264" height="277"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Every player in brainCloud bombers has a number of custom statistics that are stored on the brainCloud servers. These statistics include the number of ships they have sunk, the number of times they have fired their weapon, their total number of wins, and more. These statistics are updated at the end of each match. Players can view their statistics on the Matchmaking menu, where they are shown on the left side, below the player’s name. These statistics were created on the brainCloud design portal, and can also be edited from the monitoring section of the portal&nbsp;for each user.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Player statistics can be read through the PlayerStatisticsService in the brainCloud API. The call returns all of the current player’s statistics, including the statistics’ name, value, and description (all defined from the brainCloud dashboard), of which only the value is saved in public member variables in the BrainCloudStats class. These stats are updated live on the brainCloud server, but on the local client, they are only updated when the player visits the Matchmaking menu, reducing the number of API calls required per user.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2><strong>Global&nbsp;Leaderboards</strong></h2>
<!-- /wp:heading -->

<!-- wp:image {"id":6403,"align":"left","width":397,"height":301,"className":"add-border"} -->
<div class="wp-block-image add-border"><figure class="alignleft is-resized"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/06/image-6.png" alt="" class="wp-image-6403" width="397" height="301"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>brainCloud Bombers has two separate global&nbsp;leaderboards defined, that players may view at their leisure from the Matchmaking menu. The first leaderboard keeps track of the number of enemy plane takedowns that each player has, with the least number of deaths as the tiebreaker, and the second leaderboard keeps track of the number of ship weak-points destroyed by each player, with the least number bombs dropped as the tiebreaker. Both leaderboards feature the player’s place in the leaderboard, name, their rank (and numeric value of rank), and score. brainCloud keeps tracks of all aspects of the leaderboards, and scores are updated at the end of each match.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Leaderboards can be accessed through the SocialLeaderboardService in the brainCloud API. The call returns the entire listing of a given leaderboard or can be broken up into just the current player’s score, or individual sections of the leaderboard with variable length. The values for the currently observed leaderboard are stored as a public member variable in the BrainCloudStats class. The leaderboards are updated live on the brainCloud server, but on the local client, the leaderboards are only fetched when the player wishes to see them from the Matchmaking menu, reducing the number of API calls required per user.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Achievement Tracking</h2>
<!-- /wp:heading -->

<!-- wp:image {"id":6404,"align":"left","width":387,"height":288,"className":"add-border"} -->
<div class="wp-block-image add-border"><figure class="alignleft is-resized"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/06/image-7.png" alt="" class="wp-image-6404" width="387" height="288"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Three achievements have been implemented for brainCloud Bombers: destroying 50 enemy planes, sinking 10 ships, and destroying five enemy planes in a single match. brainCloud tracks whether the achievements have been unlocked or not, and can even automatically award the achievements based on player stats using Milestones. At the end of the match, bombers sends the stats updates to brainCloud, and then checks the response to see if any Achievements have been awarded. &nbsp;[Exception: note that the Quickshot achievement is handled manually by the client code in real-time during the match.]</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Achievements can be accessed through the GamificationService in the brainCloud API. The call returns all of the achievements in the system, their names, the urls for their icons, their descriptions, and whether or not the current user has unlocked any of them. The achievement data is stored in a public member variable in the BrainCloudStats class. The achievements are updated from the server when the player visits the Matchmaking menu.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":4673,"width":318,"height":398,"linkDestination":"custom","className":"add-border"} -->
<figure class="wp-block-image is-resized add-border"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/11/Milestone-2.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/11/Milestone-2.png" alt="" class="wp-image-4673" width="318" height="398"/></a><figcaption>&nbsp;1. When this condition is satisfied.&nbsp;<br>2. Award this achievement.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>Global&nbsp;Properties</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>brainCloud Global Properties can be used in place of constants in your games – allowing games to be tuned and/or patched on the fly without having to release new builds. A number of properties&nbsp;have been utilized in&nbsp;brainCloud Bombers, to tune such things as&nbsp;player fire rate, respawn time, bullet speed, player health, and more.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>These properties&nbsp;can be read through the GlobalAppService in the brainCloud API. The call returns all of the currently saved global variables, which are then stored as public member variables in the BrainCloudStats class. To reduce API calls from the client, these values are only read once when the game is started, meaning clients will need to restart the app to get any changes, but they could be checked more often for the sake of app security or faster testing.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":4665,"width":572,"height":249,"linkDestination":"custom","className":"add-border"} -->
<figure class="wp-block-image is-resized add-border"><a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/11/GlobalProps.png"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2018/11/GlobalProps.png" alt="" class="wp-image-4665" width="572" height="249"/></a><figcaption>Global Properties</figcaption></figure>
<!-- /wp:image -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6419</wp:post_id>
		<wp:post_date><![CDATA[2019-06-26 17:20:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-06-26 21:20:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[about-bombers-rtt]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>572</wp:post_parent>
		<wp:menu_order>15</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="api-calls-required"><![CDATA[api calls required]]></category>
		<category domain="yst_prominent_words" nicename="api-calls-required-per-user"><![CDATA[api calls required per user]]></category>
		<category domain="yst_prominent_words" nicename="braincloud"><![CDATA[braincloud]]></category>
		<category domain="yst_prominent_words" nicename="calls-required-per-user"><![CDATA[calls required per user]]></category>
		<category domain="yst_prominent_words" nicename="live-on-the-braincloud-server"><![CDATA[live on the braincloud server]]></category>
		<category domain="yst_prominent_words" nicename="matchmaking-menu"><![CDATA[matchmaking menu]]></category>
		<category domain="yst_prominent_words" nicename="matchmaking-menu-reducing"><![CDATA[matchmaking menu reducing]]></category>
		<category domain="yst_prominent_words" nicename="matchmaking-menu-reducing-the-number"><![CDATA[matchmaking menu reducing the number]]></category>
		<category domain="yst_prominent_words" nicename="member-variables-in-the-braincloudstats"><![CDATA[member variables in the braincloudstats]]></category>
		<category domain="yst_prominent_words" nicename="menu-reducing-the-number"><![CDATA[menu reducing the number]]></category>
		<category domain="yst_prominent_words" nicename="number-of-api-calls"><![CDATA[number of api calls]]></category>
		<category domain="yst_prominent_words" nicename="number-of-api-calls-required"><![CDATA[number of api calls required]]></category>
		<category domain="yst_prominent_words" nicename="player-visits-the-matchmaking"><![CDATA[player visits the matchmaking]]></category>
		<category domain="yst_prominent_words" nicename="player-visits-the-matchmaking-menu"><![CDATA[player visits the matchmaking menu]]></category>
		<category domain="yst_prominent_words" nicename="public-member-variables"><![CDATA[public member variables]]></category>
		<category domain="yst_prominent_words" nicename="reducing-the-number-of-api"><![CDATA[reducing the number of api]]></category>
		<category domain="yst_prominent_words" nicename="updated-live-on-the-braincloud"><![CDATA[updated live on the braincloud]]></category>
		<category domain="yst_prominent_words" nicename="variables-in-the-braincloudstats-class"><![CDATA[variables in the braincloudstats class]]></category>
		<category domain="yst_prominent_words" nicename="visits-the-matchmaking-menu"><![CDATA[visits the matchmaking menu]]></category>
		<category domain="yst_prominent_words" nicename="visits-the-matchmaking-menu-reducing"><![CDATA[visits the matchmaking menu reducing]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>DeleteListOfUsers script</title>
		<link>https://staging.getbraincloud.com/apidocs/cloud-code-central/handy-cloud-code-scripts/deletelistofusers-script/</link>
		<pubDate>Thu, 12 Sep 2019 16:17:05 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=6505</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":3} -->
<h3>Purpose</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This&nbsp;script&nbsp;deletes&nbsp;a&nbsp;list&nbsp;of&nbsp;users&nbsp;based&nbsp;on&nbsp;a&nbsp;provided&nbsp;list&nbsp;of&nbsp;profileIds&nbsp;and&nbsp;universalIds.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Script</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Click <a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2022/10/BlockIfBanned.ccjs_.zip">DeleteListOfUsers.ccjs.zip</a> to download the file.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Usage / Setup</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To&nbsp;configure&nbsp;this&nbsp;script,&nbsp;simply&nbsp;import&nbsp;it&nbsp;into&nbsp;your&nbsp;app.<br>Compile&nbsp;a&nbsp;list&nbsp;of&nbsp;users&nbsp;you&nbsp;wish&nbsp;to&nbsp;delete&nbsp;and&nbsp;pass&nbsp;it&nbsp;into&nbsp;the&nbsp;script.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>Example&nbsp;script&nbsp;parameters</em></p>
<!-- /wp:paragraph -->

<!-- wp:enlighter/codeblock -->
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">{
	"profileIds": ["the-profile-id", "a8d86270-c95b-4ea7-a545-46bf27e7f94e"],
	"universalIds": ["the-universal-id", "tester_12", "admin_42"]
}</pre>
<!-- /wp:enlighter/codeblock -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6505</wp:post_id>
		<wp:post_date><![CDATA[2019-09-12 12:17:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-12 16:17:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[deletelistofusers-script]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>4513</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="list"><![CDATA[list]]></category>
		<category domain="yst_prominent_words" nicename="list-of-users"><![CDATA[list of users]]></category>
		<category domain="yst_prominent_words" nicename="script"><![CDATA[script]]></category>
		<category domain="yst_prominent_words" nicename="users"><![CDATA[users]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>ValidateContactEmail script</title>
		<link>https://staging.getbraincloud.com/apidocs/cloud-code-central/handy-cloud-code-scripts/validatecontactemail-script/</link>
		<pubDate>Thu, 12 Dec 2019 17:58:52 +0000</pubDate>
		<dc:creator><![CDATA[jasonl]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=6635</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2> Purpose </h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This script gives an app a way to validate the user's contact email when registering.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Script</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Click <a href="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2019/12/validateContactEmail.zip">validateContactEmail.zip</a> to download the file. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Usage/Setup</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To configure these scripts, you must: </p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>First, extract the zip file and import them into your app. Make sure S2S is checked since you will call this script from an external server.  </li><li>Then go to <strong>Design | Cloud Code | WebHooks</strong>, and link ContactEmailWebhookUrl script into a new or existing webhook. Make sure you have at least one server created from my servers, so you can call the script from an external server.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>You can test calling the script using a browser, <a rel="noreferrer noopener" href="https://www.getpostman.com/" target="_blank">Postman</a>, or something similar - just to confirm that the logging is working.  (<a href="https://staging.getbraincloud.com/apidocs/cloud-code-central/cloud-code-tutorials/s2s-cloud-code-scripts/">reference S2S Scripts in brainCloud</a>) </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Test SendContactEmailVerification script from  <strong>Design | Cloud Code | Cloud Code</strong>, or call it from your app. (make sure your email integration is set up properly since this script will send email to currently logged in user at the contact email address.)   </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Of course, if you want to view the results of responses, go to&nbsp;<strong>Monitoring| Recent Errors</strong>:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><em>change the filter to show info messages</em> - enable the [x] checkbox by the <strong>green "i"</strong> and hit <strong>[Refresh]</strong></li></ul>
<!-- /wp:list -->

<!-- wp:list -->
<ul><li>Click on a logline to view the details. The parameters will be displayed in the <em>Context</em> field, which you can expand by dragging the bottom-right corner of the dialog.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><em>Example script of </em> SendContactEmailVerification  <em>parameters</em> (note: this example using simple plain text email, so will not use the second parameter for email, but you can use any template you built with SendGrid and pass it as the second parameter to this script and make a slight change to this script to get the template)</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>{
  "ttlmillis": 86400000,
  "sendgridtemplate": "xxx"
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><em>Example script of </em> ContactEmailWebhookUrl <em>parameters</em></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>{
  "parameters": {
      "email": "xxx@xxx.xxx",
      "code": "xxxx",
      "entityId": "xxxx"
  }
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6635</wp:post_id>
		<wp:post_date><![CDATA[2019-12-12 12:58:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-12 17:58:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[validatecontactemail-script]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>4513</wp:post_parent>
		<wp:menu_order>10</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="yst_prominent_words" nicename="app"><![CDATA[app]]></category>
		<category domain="yst_prominent_words" nicename="call"><![CDATA[call]]></category>
		<category domain="yst_prominent_words" nicename="click"><![CDATA[click]]></category>
		<category domain="yst_prominent_words" nicename="cloud"><![CDATA[cloud]]></category>
		<category domain="yst_prominent_words" nicename="cloud-code"><![CDATA[cloud code]]></category>
		<category domain="yst_prominent_words" nicename="code"><![CDATA[code]]></category>
		<category domain="yst_prominent_words" nicename="contact"><![CDATA[contact]]></category>
		<category domain="yst_prominent_words" nicename="contact-email"><![CDATA[contact email]]></category>
		<category domain="yst_prominent_words" nicename="email"><![CDATA[email]]></category>
		<category domain="yst_prominent_words" nicename="example"><![CDATA[example]]></category>
		<category domain="yst_prominent_words" nicename="example-script"><![CDATA[example script]]></category>
		<category domain="yst_prominent_words" nicename="external-server"><![CDATA[external server]]></category>
		<category domain="yst_prominent_words" nicename="file"><![CDATA[file]]></category>
		<category domain="yst_prominent_words" nicename="parameters"><![CDATA[parameters]]></category>
		<category domain="yst_prominent_words" nicename="s2s"><![CDATA[s2s]]></category>
		<category domain="yst_prominent_words" nicename="script-from-an-external"><![CDATA[script from an external]]></category>
		<category domain="yst_prominent_words" nicename="script-from-an-external-server"><![CDATA[script from an external server]]></category>
		<category domain="yst_prominent_words" nicename="scripts"><![CDATA[scripts]]></category>
		<category domain="yst_prominent_words" nicename="second-parameter"><![CDATA[second parameter]]></category>
		<category domain="yst_prominent_words" nicename="server"><![CDATA[server]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>demos</title>
		<link>https://staging.getbraincloud.com/apidocs/demos/</link>
		<pubDate>Wed, 15 Jan 2020 14:32:57 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=6694</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Links to demo brainCloud apps...</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6694</wp:post_id>
		<wp:post_date><![CDATA[2020-01-15 09:32:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-15 14:32:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[demos]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Dev Demos</title>
		<link>https://staging.getbraincloud.com/apidocs/devdemos/</link>
		<pubDate>Wed, 15 Jan 2020 14:34:33 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=6697</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>brainCloud Demo links (dev versions)</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="https://staging.getbraincloud.com/apidocs/dev-demos/relaytestapp/">Relay Test</a></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6697</wp:post_id>
		<wp:post_date><![CDATA[2020-01-15 09:34:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-15 14:34:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[devdemos]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Relay test (dev version)</title>
		<link>https://staging.getbraincloud.com/apidocs/devdemos/relaytestapp/</link>
		<pubDate>Wed, 15 Jan 2020 14:36:31 +0000</pubDate>
		<dc:creator><![CDATA[paulw]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=6699</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6699</wp:post_id>
		<wp:post_date><![CDATA[2020-01-15 09:36:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-15 14:36:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[relaytestapp]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6697</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_yst_prominent_words_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pprredirect_active]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pprredirect_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[301]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pprredirect_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[http://ec2-18-219-26-183.us-east-2.compute.amazonaws.com:3003/]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[[""]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Store Integration – Amazon</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/store-integration-amazon/</link>
		<pubDate>Mon, 22 Jun 2020 15:52:06 +0000</pubDate>
		<dc:creator><![CDATA[jasonl]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=6927</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph {"className":"p1"} -->
<p class="p1"><span class="s1">In this tutorial, we’ll look at integrating the Amazon Appstore with the brainCloud marketplace. By doing this, Amazon users will have the ability to validate purchased items from the Amazon Appstore with brainCloud.</span></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"className":"p1"} -->
<p class="p1"><span class="s1">Note that apps still have to make the purchase directly with the Amazon Appstore. For more information on this process refer to the Amazon Appstore <a href="https://developer.amazon.com/apps-and-games">developer console</a> site.</span></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>brainCloud Portal Setup</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {"className":"p1"} -->
<p class="p1"><span class="s1">Here are the steps to configure brainCloud for Amazon Appstore&nbsp;purchases.</span></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"className":"p2"} -->
<p class="p2"><span class="s1">Prerequisites</span></p>
<!-- /wp:paragraph -->

<!-- wp:list {"className":"ul1"} -->
<ul class="ul1"><li><span class="s1">You&nbsp;should have set up your products in the brainCloud marketplace. Please refer to the <a href="/apidocs/portal-usage/marketplace-configuration/"><span class="s2">Marketplace Configuration</span></a> guide.</span></li><li><span class="s1">You should have created the Amazon Appstore</span> <span class="s1">In-App products(items) as per the </span><a href="https://developer.amazon.com/docs/in-app-purchasing/iap-overview.html"><span class="s1">Amazon Appstore</span> <span class="s1">Developer documentation</span></a>. (Refer to our Unity example <a href="https://github.com/getbraincloud/examples-unity/tree/develop/BCAmazonIAP">here</a>.)</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3,"className":"p1"} -->
<h3 class="p1"><span class="s1">Associate Amazon In-App&nbsp;Items with brainCloud Products</span></h3>
<!-- /wp:heading -->

<!-- wp:paragraph {"className":"p2"} -->
<p class="p2"><span class="s1">After setting up your products in the brainCloud marketplace, you’ll want to associate them with the&nbsp;Amazon In-App product SKU. In particular, we will be grabbing the product SKU from the&nbsp;Amazon developer site&nbsp;and entering them into the appropriate brainCloud products.</span></p>
<!-- /wp:paragraph -->

<!-- wp:list {"className":"ul1"} -->
<ul class="ul1"><li><span class="s3">Log into the <a href="https://developer.amazon.com/">Amazon Developer</a> site</span> and go to the <a href="https://developer.amazon.com/dashboard">Developer Console</a> dashboard.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"align":"center","id":6930,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/06/image-1024x531.png" alt="" class="wp-image-6930"/></figure></div>
<!-- /wp:image -->

<!-- wp:list {"className":"ul1"} -->
<ul class="ul1"><li>Click Apps &amp; Services tab from the developer console.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"align":"center","id":6931,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/06/image-1-1024x673.png" alt="" class="wp-image-6931"/></figure></div>
<!-- /wp:image -->

<!-- wp:list {"className":"ul1"} -->
<ul class="ul1"><li><span class="s1">Select your App and go to the “In-App Items” section</span></li></ul>
<!-- /wp:list -->

<!-- wp:image {"align":"center","id":6932,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/06/image-2-1024x594.png" alt="" class="wp-image-6932"/></figure></div>
<!-- /wp:image -->

<!-- wp:list {"className":"ul1"} -->
<ul class="ul1"><li><span class="s1">Select your In-App item and grab the SKU, make sure the item is ready to test (Status is <strong>Live</strong>). </span></li></ul>
<!-- /wp:list -->

<!-- wp:image {"align":"center","id":6934,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/06/image-4-1024x318.png" alt="" class="wp-image-6934"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>(for this tutorial&nbsp;we'll assume that the product(item) SKU is <em>bitheads.brainCloud.aiaptest.pc1</em>)</p>
<!-- /wp:paragraph -->

<!-- wp:advanced-gutenberg-blocks/notice -->
<div class="wp-block-advanced-gutenberg-blocks-notice is-variation-warning has-icon" data-type="warning"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewbox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path><line x1="12" y1="9" x2="12" y2="13"></line><line x1="12" y1="17" x2="12" y2="17"></line></svg><p class="wp-block-advanced-gutenberg-blocks-notice__title">Warning</p><p class="wp-block-advanced-gutenberg-blocks-notice__content">If you skip registering your Amazon product(item) SKU to the brainCloud portal, you will get an error like below when calling verifying purchase API. <br/><code>"transactionResultCode": 102, </code><br/><code>"errorMessage": "Product not found",</code></p></div>
<!-- /wp:advanced-gutenberg-blocks/notice -->

<!-- wp:list -->
<ul><li>Log into the brainCloud Portal</li><li>Go to the “Marketplace | Products” page in the Design tab<br><figure><a rel="noopener noreferrer" href="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_productsTab.jpg" target="_blank"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2016/08/brainCloud_dashboard_productsTab.jpg" alt="brainCloud"></a></figure></li><li> Select the product you would like to associate with.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":6936,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/06/image-5.png" alt="" class="wp-image-6936"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><figure><a rel="noopener noreferrer" href="/apidocs/wp-content/uploads/2016/09/brainCloud_dashboard_addFbProduct1.jpg" target="_blank"></a></figure> Click the <strong>[+ Edit Product] </strong>button to make it editable.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":6938,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/06/image-6.png" alt="" class="wp-image-6938"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Find your Price (or create one by click <strong>[+]</strong> icon) and click the edit icon</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":6939,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/06/image-7.png" alt="" class="wp-image-6939"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>In the Edit Price dialog, click the + icon to add an entry for&nbsp;Amazon</li></ul>
<!-- /wp:list -->

<!-- wp:image {"align":"center","id":6943,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/06/image-11.png" alt="" class="wp-image-6943"/></figure></div>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Enter your Amazon item SKU for this price – in our case “bitheads.brainCloud.aiaptest.pc1”.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"align":"center","id":6942,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/06/image-10.png" alt="" class="wp-image-6942"/></figure></div>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><figure><a rel="noopener noreferrer" href="/apidocs/wp-content/uploads/2016/09/brainCloud_dashboard_addFbProduct3.jpg" target="_blank"></a></figure>At this point, you may want to select your price to be the default if it isn’t already selected. You can do this back in the Edit Product page.<p class="p1"></li></ul>
<!-- /wp:list -->

<!-- wp:image {"align":"center","id":6944,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/06/image-12.png" alt="" class="wp-image-6944"/></figure></div>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li> You can now verify that your Product is coming back with the correct Amazon In-app item SKU. Here is the output from the API Explorer “<strong><em>Appstore.GetSaleInventory</em></strong>” call using "amazon" as the platform:</li></ul>
<!-- /wp:list -->

<!-- wp:code -->
<pre class="wp-block-code"><code>{
  "data": {
    "productInventory": &#91;
      {
        "itemId": "coinbundle10",
        "type": "Consumable",
        "category": "coin",
        "title": "product",
        "description": "coinbundle10",
        "imageUrl": null,
        "currency": {},
        "parentCurrency": {},
        "peerCurrency": {
          "deploypeer": {
            "gems": 1
          }
        },
        "data": null,
        "createdAt": 1592542611282,
        "updatedAt": 1592852462791,
        "version": 9,
        "priceData": {
          "id": "bitheads.brainCloud.aiaptest.pc1",
          "referencePrice": 399,
          "isPromotion": false
        }
      }
    ],
    "serverTime": 1592857819454
  },
  "status": 200
}</code></pre>
<!-- /wp:code -->

<!-- wp:advanced-gutenberg-blocks/notice -->
<div class="wp-block-advanced-gutenberg-blocks-notice is-variation-warning has-icon" data-type="warning"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewbox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path><line x1="12" y1="9" x2="12" y2="13"></line><line x1="12" y1="17" x2="12" y2="17"></line></svg><p class="wp-block-advanced-gutenberg-blocks-notice__title">Warning</p><p class="wp-block-advanced-gutenberg-blocks-notice__content">If you skip registering your Amazon product(item) SKU to the brainCloud portal, you will get an error like below when calling verifying purchase API.<br/><code>"transactionResultCode": 102,</code><br/><code>"errorMessage": "Product not found",</code></p></div>
<!-- /wp:advanced-gutenberg-blocks/notice -->

<!-- wp:advanced-gutenberg-blocks/notice -->
<div class="wp-block-advanced-gutenberg-blocks-notice is-variation-info has-icon" data-type="info"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewbox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12" y2="8"></line></svg><p class="wp-block-advanced-gutenberg-blocks-notice__title">Information</p><p class="wp-block-advanced-gutenberg-blocks-notice__content">If you add more than one product associate with the same Amazon In-App Item SKU, you will only get one product transition recorded from brainCloud.</p></div>
<!-- /wp:advanced-gutenberg-blocks/notice -->

<!-- wp:heading {"level":3} -->
<h3>Amazon Certificates and Credentials</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Once the products have been configured, you will need to add the appropriate Amazon credentials to brainCloud.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Navigate to the Application IDs page<br><figure><a rel="noopener noreferrer" href="/apidocs/wp-content/uploads/2016/09/portal_addGoogProd4.jpg" target="_blank"><img style="margin: 12px 0px;" src="/apidocs/wp-content/uploads/2016/09/portal_addGoogProd4.jpg" alt="brainCloud"></a></figure></li><li>Click the Amazon icon and notice the following field is needed to fill in.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":6947,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/06/image-13-1024x649.png" alt="" class="wp-image-6947"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>You can find this information from your Amazon developer console through Setting-&gt;Identity.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":6948,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/06/image-14-1024x394.png" alt="" class="wp-image-6948"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>You should now be able to validate purchase with brainCloud.</li></ul>
<!-- /wp:list -->

<!-- wp:advanced-gutenberg-blocks/notice -->
<div class="wp-block-advanced-gutenberg-blocks-notice is-variation-warning has-icon" data-type="warning"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewbox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path><line x1="12" y1="9" x2="12" y2="13"></line><line x1="12" y1="17" x2="12" y2="17"></line></svg><p class="wp-block-advanced-gutenberg-blocks-notice__title">Warning</p><p class="wp-block-advanced-gutenberg-blocks-notice__content">Make sure your In-App Item's SKU is unique against all of your apps.<br/><img class="wp-image-6953" style="width: 600px;" src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/06/2020-06-22_18h10_40-1.png" alt=""/></p></div>
<!-- /wp:advanced-gutenberg-blocks/notice -->

<!-- wp:advanced-gutenberg-blocks/notice -->
<div class="wp-block-advanced-gutenberg-blocks-notice is-variation-info has-icon" data-type="info"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewbox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12" y2="8"></line></svg><p class="wp-block-advanced-gutenberg-blocks-notice__title">Information</p><p class="wp-block-advanced-gutenberg-blocks-notice__content">Test your App with Live App Testing after filling in all the necessary info of your app and uploading your app APK file.<br/><img class="wp-image-6955" style="width: 600px;" src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/06/2020-06-22_18h17_29.png" alt=""/><br/>Add Testers from Live App Testing screen<br/><img class="wp-image-6956" style="width: 600px;" src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/06/2020-06-22_18h29_56.png" alt=""/><br/>Notice your test status became <strong>Processing</strong> once submit your test, then <strong>Publishing</strong>, and when ready, the status will change to <strong>Test in Progress</strong>.<br/><img class="wp-image-6966" style="width: 600px;" src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/06/image-16.png" alt=""/></p></div>
<!-- /wp:advanced-gutenberg-blocks/notice -->

<!-- wp:heading {"level":3} -->
<h3>Confirming the purchase Client Side</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>After making a purchase client-side, Amazon Appstore will&nbsp;return a receipt with a receiptId, SKU, itemType, purchaseDate and userId such info, we will need receiptId and userId that are used by the&nbsp;<a href="/apidocs/apiref/#capi-product-confirmgoogleplaypurchase">VerifyPurchase</a> API call.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>If your using Amazon IAP Plugin for Unity, some of your code may look like this:</li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using com.amazon.device.iap.cpt;

public class BCinterface : MonoBehaviour
{
    IAmazonIapV2 iapService = AmazonIapV2Impl.Instance;
    public BrainCloudWrapper _bc;
    string aiapReceipt = "";
    string aiapUserId = "";
    string aiapReceiptUpdateResponse = "";
    string aiapUserIdUpdateResponse = "";
    // Start is called before the first frame update
    void Start()
    {
        // Register for an event
        iapService.AddGetUserDataResponseListener(EventHandler);

       iapService.AddPurchaseResponseListener(PurchaseResponseEventHandler);

        iapService.AddGetPurchaseUpdatesResponseListener(PurchaseUpdateResponseEventHandler);
    }

    //click authentication button
    public void AuthenticateBC()
    {
        _bc.AuthenticateEmailPassword("unityuser@unity.com", "unitytest", true, authSuccess_BCcall, authError_BCcall);
    }
    private void Awake()
    {
        DontDestroyOnLoad(gameObject);
        _bc = gameObject.AddComponent&lt;BrainCloudWrapper>();
        _bc.WrapperName = gameObject.name;
        _bc.Init();
    }

    //purchase button click
    public void Amazonpurchase()
    {
        // Construct object passed to operation as input
        SkuInput request = new SkuInput();

        // Set input value
        request.Sku = "com.braincloud.amazoniap.pc1";

        // Call synchronous operation with input object
        RequestOutput response = iapService.Purchase(request);

    }

    //looks like we don't need the user data info, but list here just in case
    private void EventHandler(GetUserDataResponse args)
    {
        string requestId = args.RequestId;
        string userId = args.AmazonUserData.UserId;
        string marketplace = args.AmazonUserData.Marketplace;
        string status = args.Status;
    }

    private void PurchaseResponseEventHandler(PurchaseResponse args)
    {
        string requestId = args.RequestId;
        string userId = args.AmazonUserData.UserId;
        string marketplace = args.AmazonUserData.Marketplace;
        string receiptId = args.PurchaseReceipt.ReceiptId;
        long cancelDate = args.PurchaseReceipt.CancelDate;
        long purchaseDate = args.PurchaseReceipt.PurchaseDate;
        string sku = args.PurchaseReceipt.Sku;
        string productType = args.PurchaseReceipt.ProductType;
        string status = args.Status;

        aiapReceipt = receiptId;
        aiapUserId = userId;

    }

    // Define event handler
    private void PurchaseUpdateResponseEventHandler(GetPurchaseUpdatesResponse args)
    {
        string requestId = args.RequestId;
        string userId = args.AmazonUserData.UserId;
        string marketplace = args.AmazonUserData.Marketplace;
        List&lt;PurchaseReceipt> receipts = args.Receipts;
        string status = args.Status;
        bool hasMore = args.HasMore;

        // for each purchase receipt you can get the following values
        string receiptId = receipts[0].ReceiptId;
        long cancelDate = receipts[0].CancelDate;
        long purchaseDate = receipts[0].PurchaseDate;
        string sku = receipts[0].Sku;
        string productType = receipts[0].ProductType;

        aiapReceiptUpdateResponse = receiptId;
        aiapUserIdUpdateResponse = userId;
    }

    //brainCloud verify pruchase button click
    public void BrainCloudVerifyPurchase()
    {
        if (String.IsNullOrEmpty(aiapReceipt))
        {
            //call purchase updateResonse verify if purchase is not fulfilled
            string receiptData = "{\"receiptId\":\"" + aiapReceiptUpdateResponse + "\",\"userId\":\"" + aiapUserIdUpdateResponse + "\"}";
            Debug.Log("BrainCloudVerifyPurchase click with purchase updateResonse receiptData:" + receiptData);
            _bc.AppStoreService.VerifyPurchase("amazon", receiptData, veriSuccess_BCcall, veriError_BCcall);

        }
        else
        {
            //call purchase Resonse verify
            string receiptData = "{\"receiptId\":\"" + aiapReceipt + "\",\"userId\":\"" + aiapUserId + "\"}";
            Debug.Log("BrainCloudVerifyPurchase click with purchase Resonse receiptData:" + receiptData);
            _bc.AppStoreService.VerifyPurchase("amazon", receiptData, veriSuccess_BCcall, veriError_BCcall);
        }
    }

    public void authSuccess_BCcall(string responseData, object cbObject)
    {
        Debug.Log("bc authentication success call back");
    }

    public void authError_BCcall(int statusCode, int reasonCode, string statusMessage, object cbObject)
    {
        Debug.Log("bc authentication error call back");
    }

    public void veriSuccess_BCcall(string responseData, object cbObject)
    {
        Debug.Log("bc verify purchase success call back");
    }

    public void veriError_BCcall(int statusCode, int reasonCode, string statusMessage, object cbObject)
    {
        Debug.Log("bc verify purchase error call back");
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:list -->
<ul><li>If using Amazon IAP for Android, some of your code snippets may look like the following:</li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {"language":"java"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="java" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">...
//import amazon iap and brainCould client
import com.amazon.device.iap.PurchasingListener;
import com.amazon.device.iap.PurchasingService;
import com.amazon.device.iap.model.ProductDataResponse;
import com.amazon.device.iap.model.PurchaseResponse;
import com.amazon.device.iap.model.PurchaseUpdatesResponse;
import com.amazon.device.iap.model.Receipt;
import com.amazon.device.iap.model.UserDataResponse;
import com.bitheads.braincloud.client.IServerCallback;
import com.bitheads.braincloud.client.ServiceName;
import com.bitheads.braincloud.client.ServiceOperation;
import org.json.JSONException;
import org.json.JSONObject;
...

...
//define your product
public enum MySku {
    // This is the product to purchase and in the code.
    PRODUCT1("bitheads.brainCloud.aiaptest.pc1", "US"),
...

...
//register purchasingListener
        sampleIapManager = new SampleIapManager(this);
        sampleIapManager.activate();
        final SamplePurchasingListener purchasingListener = new SamplePurchasingListener(sampleIapManager);
        Log.d(TAG, "onCreate: registering PurchasingListener");
        PurchasingService.registerListener(this.getApplicationContext(), purchasingListener);
        Log.d(TAG, "IS_SANDBOX_MODE:" + PurchasingService.IS_SANDBOX_MODE);
...

...
//when click a product buying button, passing your product sku
final RequestId requestId = PurchasingService.purchase(MySku.PRODUCT1.getSku());
...

...
//in your listener implements Amazon PurchasingListener and brainCloud callback
public class SamplePurchasingListener implements PurchasingListener, IServerCallback {
    IServerCallback theCallback;
...

...
//inside onPurchaseResponse verify the purchase with brainCloud
    public void onPurchaseResponse(final PurchaseResponse response) {
...
        switch (status) {
        case SUCCESSFUL:
            final Receipt receipt = response.getReceipt();
            iapManager.setAmazonUserId(response.getUserData().getUserId(), response.getUserData().getMarketplace());
            Log.d(TAG, "onPurchaseResponse: receipt json:" + receipt.toJSON());
            iapManager.handleReceipt(receipt, response.getUserData());
            iapManager.refreshOranges();
            String userIda = response.getUserData().getUserId();
            String receiptId = response.getReceipt().getReceiptId();
            JSONObject receiptData = new JSONObject();
            try {
                receiptData.put("receiptId", receiptId);
                receiptData.put("userId",userIda);
            } catch (JSONException e) {
                e.printStackTrace();
            }  

MainActivity._bc.GetWrapper().getAppStoreService().verifyPurchase("amazon", receiptData.toString(), theCallback);
            break;
...
</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":3} -->
<h3>Confirming the transactions from brainCloud Portal</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Check the transactions from brainCloud portal page on <strong>Monitoring | User Monitoring | Transactions</strong> after making a purchase from the test app.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":6957,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2020/06/image-15-1024x250.png" alt="" class="wp-image-6957"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6927</wp:post_id>
		<wp:post_date><![CDATA[2020-06-22 11:52:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-22 15:52:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[store-integration-amazon]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>68</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Store Integration – Google</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/store-integration-google-2/</link>
		<pubDate>Wed, 23 Dec 2020 20:35:42 +0000</pubDate>
		<dc:creator><![CDATA[jasonl]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=7092</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>In this tutorial, we’ll look at integrating the Google Play store with the brainCloud marketplace. By doing this, Google Android users will have the ability to validate purchased items from the Google Play store with brainCloud.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that apps still have to make the purchase directly with the Google Play Store. For more information on this process refer to the <a href="https://play.google.com/console/u/0/developers" rel="noreferrer noopener" target="_blank">Google Play developer</a> site.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="h_044591430e">Purchase Flow</h2>
<!-- /wp:heading -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464093/96a162bfb83a045f4249e48f/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464093/96a162bfb83a045f4249e48f/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2 id="h_25a51b5ee5">brainCloud Portal Setup</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Here are the steps to configure brainCloud for Google Play purchases.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Prerequisites</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>You should have set up your products in the brainCloud marketplace. Please refer to the <a href="https://getbraincloud.com/apidocs/portal-usage/marketplace-configuration/" rel="noreferrer noopener" target="_blank">Marketplace Configuration</a> guide.</li><li>You should have created the Google Store In-App products as per the Google Developer documentation</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 id="h_1376977954">Associate Google In-App Products with brainCloud Products</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>After setting up your products in the brainCloud marketplace, you’ll want to associate them with the Google product ids. In particular, we will be grabbing the product ids from the Google Play developer site and entering them into the appropriate brainCloud products.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Log in to the <a href="https://play.google.com/apps/publish/" rel="noreferrer noopener" target="_blank">Google Play Developer</a> site</li><li>Select an existing app or create a new one</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464139/b80669dfb09a41272c386545/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464139/b80669dfb09a41272c386545/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Fill out all necessary settings information</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464161/c757a91e8ac4e31e9d0ea55f/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464161/c757a91e8ac4e31e9d0ea55f/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Upload and roll-out your APK with billing permission to one of the releases and set countries and testers accordingly</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464204/277ff8c336ec186366d0c751/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464204/277ff8c336ec186366d0c751/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Make sure the testing is active. <em>Note: you can always upload a new updated app APK later</em></li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464238/89edfe625ce16c1286de222f/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464238/89edfe625ce16c1286de222f/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Select your App and go to the “In-App Products” section</li><li>Create a product from the In-app products section</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464270/d29b14c64aaadee5e3ed69d0/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464270/d29b14c64aaadee5e3ed69d0/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Select your IAP and grab the Google Product ID</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464301/1731aed646e60a6bfd6381ca/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464301/1731aed646e60a6bfd6381ca/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>(for this tutorial we’ll use the product id 2012testproduct01 as an example of configuring at brainCloud)</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Log into the brainCloud Portal</li><li>Go to the “Design | Marketplace | Products” page</li><li>Select the product you would like to associate with or create a new product by clicking <strong>Adding Product</strong>.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464310/c851e11b89fcd10a798af0a6/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464310/c851e11b89fcd10a798af0a6/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Click the “+ Edit Product” button</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464327/adac8a8031a21745152fde95/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464327/adac8a8031a21745152fde95/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Find your Price (or create one) and click the edit icon</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464350/a13100721cafc5caf46ffd94/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464350/a13100721cafc5caf46ffd94/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>In the Edit Price dialog, click the + icon to add an entry for Google, enter your Google product id for this price – in our case 2012testproduct01.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464452/e8db7965490fdc57c158ead8/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464452/e8db7965490fdc57c158ead8/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>At this point, you may want to select your price to be the default if it isn’t already selected. You can do this back on the Edit Product page.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464480/b32c60ffb7631db0c181e0ca/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464480/b32c60ffb7631db0c181e0ca/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>You can now verify that your Product is coming back with the correct Google In-app Product id. Here is the output from the API Explorer “AppStore.GetSalesInventory” call using googlePlay as the storeId:</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464493/3be7cbe26284a76557bb9b6a/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464493/3be7cbe26284a76557bb9b6a/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3 id="h_293bf1d4c7">Google Certificates and Credentials</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Once the products have been configured, you will need to add the appropriate Google credentials to brainCloud.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Navigate to the Design | Core App Infor | Application IDs page, click the Google icon and notice the following fields</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464513/48b9b3055f9173d7a8416a59/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464513/48b9b3055f9173d7a8416a59/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>The following sections will show you where to find the appropriate information for these three fields</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4>Google Package Name</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Log into the <a href="https://play.google.com/apps/publish/" rel="noreferrer noopener" target="_blank">Google Play</a> developer site</li><li>Select your application</li><li>Grab the package name from Dashboard</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464560/0a8e078695a28e9a3ae1035f/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464560/0a8e078695a28e9a3ae1035f/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":4} -->
<h4>Google Service Account Email &amp; p12 Certificate File</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To validate purchases, brainCloud requires the usage of a <strong>Service Account</strong> in a Google Cloud project to communicate with the Google Play backend servers.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Log in to the <a href="https://console.developers.google.com/" rel="noreferrer noopener" target="_blank">Google Cloud Console</a> developer site</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464575/d6f604aac53c59b30dca8fd4/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464575/d6f604aac53c59b30dca8fd4/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Create a project (or select an existing project). Note that the Google Service Account can be used across multiple Google Play apps. (by clicking the caret down icon, open the project list dialogue with select or create new project options)</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464586/1159fd2ed5e3f5f1fdf998ff/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464586/1159fd2ed5e3f5f1fdf998ff/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Enable the Google Play Android Developer API for this project</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464606/9bfc6c0a7c61ad976be87328/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464606/9bfc6c0a7c61ad976be87328/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Type the name of APIs or Services on the search bar field and select Google Play Android Developer API</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464635/42d5f65c890010da9240ed04/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464635/42d5f65c890010da9240ed04/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Check Google Play Android Developer API is added on the list of APIs &amp; Services</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464657/ff18d1a8095f3450418c4040/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464657/ff18d1a8095f3450418c4040/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Navigate to the <strong>Home </strong>-&gt;<strong>Credentials</strong>, click [+ CREATE CREDENTIALS], select <strong>Service account</strong></li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464685/b43c8a3ca0b00517d706be58/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464685/b43c8a3ca0b00517d706be58/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Click <strong>CREATE </strong>to create a new Service Account</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464699/e46608c23b19d21d07b8851d/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464699/e46608c23b19d21d07b8851d/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Set service account permissions and click <strong>CONTINUE </strong>(select a role and click continue as following then click <strong>DONE</strong>)</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464738/1db2fa0975b5c361c16a047e/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464738/1db2fa0975b5c361c16a047e/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Click the <strong>ADD KEY</strong> drop-down button and select the <strong>Create new key</strong> option</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464760/f9faecbe7a916cf81a49c85c/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464760/f9faecbe7a916cf81a49c85c/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>From the pop-up dialog, select the <strong>P12</strong> key type and click <strong>CREATE</strong> (a P12 key cert will be downloaded to your local computer’s default download folder.)</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464771/319c14336ac9683cd7a59b5b/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464771/319c14336ac9683cd7a59b5b/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>This should create a new Service Account and immediately download the p12 key file to your computer. If for some reason the browser did not download the p12 key file try Chrome.</li><li>Upload the p12 key file to the brainCloud portal.</li><li>Also, the <em>Service Account</em> should now show up on the <em>Credentials</em> page. Important: Grab the email address and save it to the brainCloud portal – <strong>Design | Core App Info | Application IDs</strong>, <em>Google</em> platform tab, <em>Google Service Account Email</em> field.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464824/95e956da2aae9147f49bab1a/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464824/95e956da2aae9147f49bab1a/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3 id="h_51bc4345e3">Linking the Google Console project to the Google Play app</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>For the <strong>Service Account</strong> to be active, you will need to link the console project to the Google Play app and give the Service Account permission to View Financial Reports.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong><em>Note you will need to be the account owner in order to complete these steps.</em></strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Login back to the <a href="https://play.google.com/apps/publish" rel="noreferrer noopener" target="_blank">Google Play Developer Console</a></li><li>Go to Settings | API Access</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464855/f176bb04f99fa75866acc286/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464855/f176bb04f99fa75866acc286/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Select the created Google Cloud project from the above steps and link it to your Google Play Console account. Once done, you will find the linked project shows here:</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464872/798f6cc733a342d820d3ea45/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464872/798f6cc733a342d820d3ea45/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Verify the created Service Account is linked to your Google Play Console account and listed here:</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464882/29d41510fd0b141b40758dcf/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464882/29d41510fd0b141b40758dcf/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Click View access from the above image, it will navigate to the <strong>Users &amp; permissions</strong> section</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464900/996f0f2b9e1ef0190d40199e/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464900/996f0f2b9e1ef0190d40199e/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Select the <strong>App permissions</strong> tab and add your apps that you want to this service account to access by clicking the <strong>Add app</strong></li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464913/eb3a71fb56bfa9083da1dcd5/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464913/eb3a71fb56bfa9083da1dcd5/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>After your app, which has the in-app-products, is added to the accessible list of the service account. Switch to the Account permissions tab, and grant Financial data permission to this service account by checking the <strong>View financial data, orders, and cancellation survey responses</strong> checkbox.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279464942/04827fe57214b7514aa6e5df/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279464942/04827fe57214b7514aa6e5df/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>You should now be able to validate your Google In-app product purchases with brainCloud.</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 id="h_9ed9ede6ae">Testing in-app-product purchases with an example app</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>After your testing app gets reviewed by Google Play, you can download and install it on your test device.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279465169/5ef7b8ff97c1afe541d9d9a4/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279465169/5ef7b8ff97c1afe541d9d9a4/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Login to brainCloud with any authentication methods</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279465209/04de76929bd67252ecb8eaa3/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279465209/04de76929bd67252ecb8eaa3/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Launch the purchase flow from the app to buy the products</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279465242/9e4231a4735f1d59d6f12487/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279465242/9e4231a4735f1d59d6f12487/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Buy the products and verify the purchases with brainCloud</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279465287/3f34969c268687e4c436dc1a/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279465287/3f34969c268687e4c436dc1a/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Check transactions from the brainCloud portal</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/279465302/3022a2a67f8adf64f1c5a4c7/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/279465302/3022a2a67f8adf64f1c5a4c7/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3 id="h_ab52a70b9d">Confirming the purchase Client Side</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>After making a purchase client-side, GooglePlay will return a receipt with an orderId, productId, and purchaseToken that is used by the <a href="https://getbraincloud.com/apidocs/apiref/#capi-product-confirmgoogleplaypurchase" rel="noreferrer noopener" target="_blank">VerifyPurchase</a> API call.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4 id="h_a7e4744411">Code Snippets of Integrating the Google Play Billing Library into your Android app - Android Studio</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>when billing clients starting a connection</li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {"language":"java"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="java" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">@Override
public void onBillingSetupFinished(BillingResult billingResult) {
    // [start querySku]
    if (billingResult.getResponseCode() ==  BillingClient.BillingResponseCode.OK) {
        // The BillingClient is ready. You can query purchases here.
        List&lt;String> skuList = new ArrayList&lt;>();
        skuList.add("2012testproduct01");
        skuList.add("2012testproduct02");
        Log.e(TAG, "buy product...billingResult2");
        SkuDetailsParams.Builder params = SkuDetailsParams.newBuilder();
        params.setSkusList(skuList).setType(BillingClient.SkuType.INAPP);
        billingClient.querySkuDetailsAsync(params.build(),
            new SkuDetailsResponseListener() {
                @Override
                public void onSkuDetailsResponse(BillingResult billingResult,
                                                  List&lt;SkuDetails> skuDetailsList) {
                    // Process the result.
                    if (billingResult == null) {
                        Log.wtf(TAG, "onSkuDetailsResponse: null BillingResult");
                        return;
                    }
                    int responseCode = billingResult.getResponseCode();
                    String debugMessage = billingResult.getDebugMessage();
                    switch (responseCode) {
                        case BillingClient.BillingResponseCode.OK:
                            Log.i(TAG, "onSkuDetailsResponse: " + responseCode + " " + debugMessage);
                            if (skuDetailsList == null) {
                                Log.w(TAG, "onSkuDetailsResponse: null SkuDetails list");
                                skusWithSkuDetails.postValue(Collections.&lt;String, SkuDetails>emptyMap());
                            } else {
                                Map&lt;String, SkuDetails> newSkusDetailList = new HashMap&lt;String, SkuDetails>();
                                for (SkuDetails skuDetails : skuDetailsList) {                                   newSkusDetailList.put(skuDetails.getSku(), skuDetails);
                                    BillingFlowParams billingFlowParams = BillingFlowParams.newBuilder()
                                            .setSkuDetails(skuDetails)
                                            .build();
                                    int responseCodeF = billingClient.launchBillingFlow(MainActivity.this, billingFlowParams).getResponseCode();
                                }                               skusWithSkuDetails.postValue(newSkusDetailList);
                                Log.i(TAG, "onSkuDetailsResponse: count " + newSkusDetailList.size());
                            }
                            break;
                        case BillingClient.BillingResponseCode.SERVICE_DISCONNECTED:
                        case BillingClient.BillingResponseCode.SERVICE_UNAVAILABLE:
                        case BillingClient.BillingResponseCode.BILLING_UNAVAILABLE:
                        case BillingClient.BillingResponseCode.ITEM_UNAVAILABLE:
                        case BillingClient.BillingResponseCode.DEVELOPER_ERROR:
                        case BillingClient.BillingResponseCode.ERROR:
                            Log.e(TAG, "onSkuDetailsResponse: " + responseCode + " " + debugMessage);
                            break;
                        case BillingClient.BillingResponseCode.USER_CANCELED:
                            Log.i(TAG, "onSkuDetailsResponse: " + responseCode + " " + debugMessage);
                            break;
                        // These response codes are not expected.
                        case BillingClient.BillingResponseCode.FEATURE_NOT_SUPPORTED:
                        case BillingClient.BillingResponseCode.ITEM_ALREADY_OWNED:
                        case BillingClient.BillingResponseCode.ITEM_NOT_OWNED:
                        default:
                            Log.wtf(TAG, "onSkuDetailsResponse: " + responseCode + " " + debugMessage);
                    }
                }
            });
    }
    // [Start query purchase]
    if (!billingClient.isReady()) {
        Log.e(TAG, "queryPurchases: BillingClient is not ready");
    }
    Log.d(TAG, "queryPurchases: INAPP");
    Purchase.PurchasesResult result = billingClient.queryPurchases(BillingClient.SkuType.INAPP);
    if (result == null) {
        Log.i(TAG, "queryPurchases: null purchase result");
        processPurchases(null);
    } else {
        if (result.getPurchasesList() == null) {
            Log.i(TAG, "queryPurchases: null purchase list");
            processPurchases(null);
        } else {
            processPurchases(result.getPurchasesList());
        }
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:list -->
<ul><li>Verify purchases with brainCloud inside onPurchasesUpdated() method</li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {"language":"java"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="java" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">public void onPurchasesUpdated(BillingResult billingResult, List&lt;Purchase> purchases) {
    if (billingResult == null) {
        Log.wtf(TAG, "onPurchasesUpdated: null BillingResult");
        return;
    }
    int responseCode = billingResult.getResponseCode();
    String debugMessage = billingResult.getDebugMessage();
    Log.d(TAG, "onPurchasesUpdated: $responseCode $debugMessage");
    switch (responseCode) {
        case BillingClient.BillingResponseCode.OK:
            if (purchases == null) {
                Log.d(TAG, "onPurchasesUpdated: null purchase list");
                processPurchases(null);
            }else{
                processPurchases(purchases);
                //bc purchase verify
                for (Purchase purchase : purchases) {
                    String storeId = "googlePlay";
                    JSONObject receiptData = new JSONObject();
                    String productId = purchase.getSku();
                    String orderId = purchase.getOrderId();
                    String token = purchase.getPurchaseToken();
                    String developerPayload = purchase.getDeveloperPayload();
                    try {
                        receiptData.put("productId", productId);
                        receiptData.put("orderId", orderId);
                        receiptData.put("token", token);
                        receiptData.put("developerPayload", developerPayload);
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    String receiptDataS = receiptData.toString();
                    //verify purchase from brainCloud                 _bc.GetWrapper().getAppStoreService().verifyPurchase(storeId, receiptDataS, theCallback);
                }
            }
            break;
        case BillingClient.BillingResponseCode.USER_CANCELED:
            Log.i(TAG, "onPurchasesUpdated: User canceled the purchase");
            break;
        case BillingClient.BillingResponseCode.ITEM_ALREADY_OWNED:
            Log.i(TAG, "onPurchasesUpdated: The user already owns this item");
            break;
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:heading {"level":4} -->
<h4 id="h_d1bfdd311d">Code Snippets of Integrating the Google Play Billing Library into your Android app - Unity</h4>
<!-- /wp:heading -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;
using System.Threading.Tasks;
using UnityEngine.Purchasing;
using BrainCloud.JsonFx.Json;
public class BrainCloudInterface : MonoBehaviour, IStoreListener //needed for unity iap
{
    //these are simply references to the unity specific canvas system
    Text status;
    string statusText;
    string email;
    string authCode;
    string idToken;
    //purchase
    string productId;
    string orderId;
    string purchaseToken;
    string developerPayload;
    //Google info 
    Dictionary&lt;string, object> wrapper;
    string store;
    string payload;
    Dictionary&lt;string, object> gpDetails;
    string gpJson;
    string gpSig;
    Dictionary&lt;string, object> gpJsonDict;
    //for purchasing
    private static IStoreController m_StoreController;          // The Unity Purchasing system.
    private static IExtensionProvider m_StoreExtensionProvider; // The store-specific Purchasing subsystems.
    public static string kProductIDConsumable = "bc_test_orb";
    // Use this for initialization
    void Start()
    {
        //allow the people who sign in to change profiles. 
        BCConfig._bc.SetAlwaysAllowProfileSwitch(true);
        BCConfig._bc.Client.EnableLogging(true);
        //unity's ugly way to look for gameobjects
        status = GameObject.Find("Status").GetComponent&lt;Text>();
        // If we haven't set up the Unity Purchasing reference
        if (m_StoreController == null)
        {
            // Begin to configure our connection to Purchasing
            InitializePurchasing();
        }
    }
    void Update()
    {
        status.text = statusText;
    }
    public void OnAuthEmail()
    {
        BCConfig._bc.AuthenticateEmailPassword("ryan.daniel.ruth@gmail.com", "password", true, OnSuccess_AuthenticateEmail, OnError_AuthenticateEmail);
    }
    public void OnSuccess_AuthenticateEmail(string responseData, object cbObject)
    {
        statusText = "Logged into braincloud!\n" + responseData;
    }
    public void OnError_AuthenticateEmail(int statusCode, int reasonCode, string statusMessage, object cbObject)
    {
        statusText = "Failed to Login to braincloud...\n" + statusMessage + "\n" + reasonCode;
    }
    //purchasing 
    public void InitializePurchasing()
    {
        // If we have already connected to Purchasing ...
        if (IsInitialized())
        {
            // ... we are done here.
            return;
        }
        // Create a builder, first passing in a suite of Unity provided stores.
        var configurationBuilder = ConfigurationBuilder.Instance(Google.Play.Billing.GooglePlayStoreModule.Instance()); //For Google purchasing specifically
        //var configurationBuilder = ConfigurationBuilder.Instance(StandardPurchasingModule.Instance());
        // Add a product to sell / restore by way of its identifier, associating the general identifier
        // with its store-specific identifiers.
        configurationBuilder.AddProduct(kProductIDConsumable, ProductType.Consumable);
        // Kick off the remainder of the set-up with an asynchrounous call, passing the configuration 
        // and this class' instance. Expect a response either in OnInitialized or OnInitializeFailed.
        UnityPurchasing.Initialize(this, configurationBuilder);
    }
    private bool IsInitialized()
    {
        // Only say we are initialized if both the Purchasing references are set.
        return m_StoreController != null &amp;&amp; m_StoreExtensionProvider != null;
    }
    public void OnGooglePurchase()
    {
        // Buy the consumable product using its general identifier. Expect a response either 
        // through ProcessPurchase or OnPurchaseFailed asynchronously.
        BuyProductID(kProductIDConsumable);
    }
    public void OnVerifyPurchase()
    {
        gpJsonDict = (Dictionary&lt;string, object>)MiniJson.JsonDecode(gpJson);
        Dictionary&lt;string, object> receiptData = new Dictionary&lt;string, object>();
        receiptData.Add("productId", gpJsonDict["productId"]);
        receiptData.Add("orderId", gpJsonDict["orderId"]);
        receiptData.Add("token", gpJsonDict["purchaseToken"]);
        //Developer payload is not supported
        //Google Play deprecated developer payload and is replacing it with alternatives that are more meaningful and contextual. 
        receiptData.Add("developerPayload", ""); //So pass in empty string for developer payload.
        string receiptDataString = JsonWriter.Serialize(receiptData);
        BCConfig._bc.AppStoreService.VerifyPurchase("googlePlay", receiptDataString, OnSuccess_VerifyPurchase, OnError_VerifyPurchase);
    }
    public void OnSuccess_VerifyPurchase(string responseData, object cbObject)
    {
        statusText = "Verified Purchase!\n" + responseData;
    }
    public void OnError_VerifyPurchase(int statusCode, int reasonCode, string statusMessage, object cbObject)
    {
        statusText = "Failed to Verify Purchase...\n" + statusMessage + "\n" + reasonCode;
    }
    void BuyProductID(string productId)
    {
        // If Purchasing has been initialized ...
        if (IsInitialized())
        {
            // ... look up the Product reference with the general product identifier and the Purchasing 
            // system's products collection.
            Product product = m_StoreController.products.WithID(productId);
            // If the look up found a product for this device's store and that product is ready to be sold ... 
            if (product != null &amp;&amp; product.availableToPurchase)
            {
                Debug.Log(string.Format("Purchasing product asychronously: '{0}'", product.definition.id));
                // ... buy the product. Expect a response either through ProcessPurchase or OnPurchaseFailed 
                // asynchronously.
                m_StoreController.InitiatePurchase(product);
            }
            // Otherwise ...
            else
            {
                // ... report the product look-up failure situation  
                Debug.Log("BuyProductID: FAIL. Not purchasing product, either is not found or is not available for purchase");
            }
        }
        // Otherwise ...
        else
        {
            // ... report the fact Purchasing has not succeeded initializing yet. Consider waiting longer or 
            // retrying initiailization.
            Debug.Log("BuyProductID FAIL. Not initialized.");
        }
    }
    public void OnShowGoogleStats()
    {
        statusText = "STORE: " + store +"\nPAYLOAD: " + payload + "\nJSON: " + gpJson + "\nSIGNATURE: " + gpSig;
    }
    public void OnShowJSONStats()
    {
        gpJsonDict = (Dictionary&lt;string, object>)MiniJson.JsonDecode(gpJson);
        statusText = "PRODUCTID: " + gpJsonDict["productId"] + "\n:ORDERID " + gpJsonDict["orderId"] + "\nTOKEN: " + gpJsonDict["purchaseToken"];
    }
    //  
    // --- IStoreListener callbacks
    //
    public void OnInitialized(IStoreController controller, IExtensionProvider extensions)
    {
        // Purchasing has succeeded initializing. Collect our Purchasing references.
        statusText = "OnInitialized: Google Store PASS";
        //Debug.Log("OnInitialized: PASS");
        // Overall Purchasing system, configured with products for this application.
        m_StoreController = controller;
        // Store specific subsystem, for accessing device-specific store features.
        m_StoreExtensionProvider = extensions;
    }
    public void OnInitializeFailed(InitializationFailureReason error)
    {
        // Purchasing set-up has not succeeded. Check error for reason. Consider sharing this reason with the user.
        statusText = "OnInitializeFailed InitializationFailureReason:" + error;
        //statusText = "blah bala";
        //Debug.Log("OnInitializeFailed InitializationFailureReason:" + error);
    }
    public PurchaseProcessingResult ProcessPurchase(PurchaseEventArgs args)
    {
        // A consumable product has been purchased by this user.
        if (String.Equals(args.purchasedProduct.definition.id, kProductIDConsumable, StringComparison.Ordinal))
        {
            //Debug.Log(string.Format("ProcessPurchase: PASS. Product: '{0}'", args.purchasedProduct.definition.id));
            statusText = "ProcessPurchase: PASS. Product: " + args.purchasedProduct.definition.id;
        }
        else
        {
            //Debug.Log(string.Format("ProcessPurchase: FAIL. Unrecognized product: '{0}'", args.purchasedProduct.definition.id));
            statusText = "ProcessPurchase: FAIL. Unrecognized product: " + args.purchasedProduct.definition.id;
        }
        wrapper = (Dictionary&lt;string, object>)MiniJson.JsonDecode(args.purchasedProduct.receipt);
        store = (string)wrapper["Store"];
        payload = (string)wrapper["Payload"];
        gpDetails = (Dictionary&lt;string, object>)MiniJson.JsonDecode(payload);
        gpJson = (string)gpDetails["json"];
        gpSig = (string)gpDetails["signature"];
        // Return a flag indicating whether this product has completely been received, or if the application needs 
        // to be reminded of this purchase at next app launch. Use PurchaseProcessingResult.Pending when still 
        // saving purchased products to the cloud, and when that save is delayed. 
        return PurchaseProcessingResult.Complete;
    }
    public void OnPurchaseFailed(Product product, PurchaseFailureReason failureReason)
    {
        // A product purchase attempt did not succeed. Check failureReason for more detail. Consider sharing 
        // this reason with the user to guide their troubleshooting actions.
        //Debug.Log(string.Format("OnPurchaseFailed: FAIL. Product: '{0}', PurchaseFailureReason: {1}", product.definition.storeSpecificId, failureReason));
        statusText = "OnPurchaseFailed: FAIL. Product: " + product.definition.storeSpecificId + ", PurchaseFailureReason: " + failureReason;
    }
}</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:paragraph -->
<p>Here is the <a href="https://github.com/getbraincloud/examples-unity/tree/develop/GoogleIAP" rel="noreferrer noopener" target="_blank">repository</a> of the above Unity example.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7092</wp:post_id>
		<wp:post_date><![CDATA[2020-12-23 15:35:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-12-23 20:35:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[store-integration-google-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>62</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Authentication - Apple</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/authentication-apple/</link>
		<pubDate>Mon, 11 Jan 2021 05:02:38 +0000</pubDate>
		<dc:creator><![CDATA[jasonl]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=7103</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This article elaborates on the basic steps of how to authenticate end-users with their Apple credentials in a unity example.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Prerequisites</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>You have an Apple developer account</li><li>Your testing device with iOS 13 and above</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong>Step 1: Create an application on Unity editor</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Open Unity hub and create a new project.</li><li>Download and import the latest <a href="https://github.com/getbraincloud/braincloud-csharp/releases" target="_blank" rel="noreferrer noopener">brainCloud client Unity package</a> to this project. Once imported the plugin correctly, you will find the brainCloud tab appears on the editor menu.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/285883197/aa601320a7757495ae3aed7e/Screen+Shot+2021-01-10+at+8.10.14+PM.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/285883197/aa601320a7757495ae3aed7e/Screen+Shot+2021-01-10+at+8.10.14+PM.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Download and import the latest <code>Sign in with Apple</code> plugin (the left one on the picture below) to this project via the Asset store.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/285888536/bbe9af49fc4ec526bc9b5b4b/Screen+Shot+2021-01-10+at+8.57.20+PM.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/285888536/bbe9af49fc4ec526bc9b5b4b/Screen+Shot+2021-01-10+at+8.57.20+PM.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>You should find the Unity Technologies folder under the asset after <code>SignInWithApple</code> plugin imported.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/285889108/1b7769afa90c43fe28b9e623/Screen+Shot+2021-01-10+at+9.05.16+PM.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/285889108/1b7769afa90c43fe28b9e623/Screen+Shot+2021-01-10+at+9.05.16+PM.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Open brainCloud setting from the tab, select or create a brainCloud back-end app linked to your project.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/285889725/1386428122ce5d7142643b2f/Screen+Shot+2021-01-10+at+9.11.08+PM.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/285889725/1386428122ce5d7142643b2f/Screen+Shot+2021-01-10+at+9.11.08+PM.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Create some UI elements and initialize brainCloud and Apple SignIn from your script. You can compare the differences between brainCloud universal authentication and Apple authentication by setting both of them to UI.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/285890084/51ad044d85db7a5ca2592e7b/Screen+Shot+2021-01-10+at+9.13.34+PM.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/285890084/51ad044d85db7a5ca2592e7b/Screen+Shot+2021-01-10+at+9.13.34+PM.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Functions and its code that linked behind the button [Sign in with Apple] are similar to below. Once end-user login into their Apple account, from the success callback, retrieve the userId and id token and pass them to brainCloud Apple authentication method --<code> AuthenticateApple</code></li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">    void Start()

    {

        bcreturn = GameObject.Find("bcreturn").GetComponent&lt;Text>();

        username = GameObject.Find("username").GetComponent&lt;InputField>();

        password = GameObject.Find("password").GetComponent&lt;InputField>();

        _bc.SetAlwaysAllowProfileSwitch(true);

        gameObject.AddComponent&lt;SignInWithApple>();

    }
    //click authentication apple button

    public void AuthenticateApple()

    {
        var siwa = gameObject.GetComponent&lt;SignInWithApple>();

        siwa.Login(OnLogin);

    }
    private void OnLogin(SignInWithApple.CallbackArgs args)
    {
        if (args.error != null)
        {
            Debug.Log("Errors occurred: " + args.error);
            return;
        }
        UserInfo userInfo = args.userInfo;
        // Save the userId so we can use it later for other operations.
        userId = userInfo.userId;
        idToken = userInfo.idToken;
        // Print out information about the user who logged in.
        Debug.Log(
            string.Format("Display Name: {0}\nEmail: {1}\nUser ID: {2}\nID Token: {3}", userInfo.displayName ?? "",
                userInfo.email ?? "", userInfo.userId ?? "", userInfo.idToken ?? ""));
        //authenticate user to bc
        _bc.AuthenticateApple(userId, idToken, true, authSuccess_BCcall, authError_BCcall);
    }</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:list -->
<ul><li>Finish the rest callbacks code in your script.</li><li>Click <code>Build Settings</code> from Unity <code>File</code> tab, switch platform to iOS.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/285894570/a762ccc8796ffd0f0e9c1df2/Screen+Shot+2021-01-10+at+9.44.33+PM.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/285894570/a762ccc8796ffd0f0e9c1df2/Screen+Shot+2021-01-10+at+9.44.33+PM.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Set up project <code>Bundle Identifier</code> via <code>Player Settings</code> .</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/285895068/44669e72e173434f0ddfbc00/Screen+Shot+2021-01-10+at+9.47.48+PM.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/285895068/44669e72e173434f0ddfbc00/Screen+Shot+2021-01-10+at+9.47.48+PM.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Click <code>Build and Run</code>, then create a folder to save this Xcode project on your local storage.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/285896056/9744398043cd503cc7ffca22/Screen+Shot+2021-01-10+at+9.55.52+PM.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/285896056/9744398043cd503cc7ffca22/Screen+Shot+2021-01-10+at+9.55.52+PM.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><strong>Step 2: Configure bundle identifier on brainCloud</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Open your app from brainCloud development portal, navigate to <strong>Design | Core App Info</strong> page.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/285908041/f165ca4a7d3aa1ce30c6c2e3/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/285908041/f165ca4a7d3aa1ce30c6c2e3/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Click <strong>Apple </strong>under Configure Platforms and paste your <code>Bundle Identifier</code> to <code>Signin Client Id</code> field.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/285908913/c591b521a4616bbb5a1b743d/Screen+Shot+2021-01-10+at+11.26.27+PM.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/285908913/c591b521a4616bbb5a1b743d/Screen+Shot+2021-01-10+at+11.26.27+PM.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Make sure the <code>Apple iOS</code> platform is selected from the <strong>Design | Core App Info | Platforms</strong> page.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong>Step 3: Configure authentication service on Xcode</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Open the build Xcode project via Xcode editor, make sure <code>AuthenticationServices.framework</code> is added to <code>UnityFramework</code></li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/285905752/c0386612eda45b59bb0149a5/Screen+Shot+2021-01-10+at+11.00.41+PM.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/285905752/c0386612eda45b59bb0149a5/Screen+Shot+2021-01-10+at+11.00.41+PM.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Add <code>Sign in with Apple</code> capability to Unity-iPhone from <code>Signing &amp; Capabilities</code> tab.</li><li>Select <code>Automatically manage signing</code> checkbox, then login to your Apple developer team.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/285906760/d880662a000a2c03db1cac23/Screen+Shot+2021-01-10+at+11.11.17+PM.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/285906760/d880662a000a2c03db1cac23/Screen+Shot+2021-01-10+at+11.11.17+PM.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Once the above step is done, check the <code>Identifiers</code> is added to your Apple developer account under <code>Certificates, Identifiers &amp; Profiles</code> section.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/285907595/c10ac4da92fa8fde99b72828/Screen+Shot+2021-01-10+at+11.13.37+PM.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/285907595/c10ac4da92fa8fde99b72828/Screen+Shot+2021-01-10+at+11.13.37+PM.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Connect your testing device to Xcode, then run this project on your testing device.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/285910469/c944f42a52608034397396aa/Screen+Shot+2021-01-10+at+11.37.43+PM.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/285910469/c944f42a52608034397396aa/Screen+Shot+2021-01-10+at+11.37.43+PM.png" alt=""/></a></figure>
<!-- /wp:image -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7103</wp:post_id>
		<wp:post_date><![CDATA[2021-01-11 00:02:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-11 05:02:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[authentication-apple]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>42</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Push notification configuration - iOS</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/push-notification-configuration-ios/</link>
		<pubDate>Tue, 19 Jan 2021 03:05:10 +0000</pubDate>
		<dc:creator><![CDATA[jasonl]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=7113</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This article will walk you through the steps of setting up push notifications (iOS) with brainCloud.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4><strong>Prerequisites</strong></h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>You have an Apple developer account</li><li>You have a physical iOS 10 and above testing device</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4><strong>Step 1: Create an application on Unity editor</strong></h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Open Unity hub and create a new project.</li><li>Download and import the latest <a href="https://github.com/getbraincloud/braincloud-csharp/releases" rel="noreferrer noopener" target="_blank">brainCloud client Unity package</a> to this project. Once imported the plugin correctly, you will find the brainCloud tab appears on the editor menu.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287322489/19de350205641bd3409c95f9/Screen+Shot+2021-01-13+at+17.50.42.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287322489/19de350205641bd3409c95f9/Screen+Shot+2021-01-13+at+17.50.42.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Download and import the latest <code>Mobile Notifications</code> package from package manager to your project.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287324032/c2515dcc176e4eb52d277676/Screen+Shot+2021-01-13+at+17.56.24.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287324032/c2515dcc176e4eb52d277676/Screen+Shot+2021-01-13+at+17.56.24.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Set up mobile notifications for iOS from edit-&gt;project settings</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287326591/b3481fc6474f0d4aee31ff2c/Screen+Shot+2021-01-13+at+18.07.00.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287326591/b3481fc6474f0d4aee31ff2c/Screen+Shot+2021-01-13+at+18.07.00.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Open brainCloud setting from the tab, select or create a brainCloud back-end app linked to your project.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/285889725/1386428122ce5d7142643b2f/Screen+Shot+2021-01-10+at+9.11.08+PM.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/285889725/1386428122ce5d7142643b2f/Screen+Shot+2021-01-10+at+9.11.08+PM.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Create some basic functional UI elements in your project and link the code behind them as the following image.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287327658/5ee06930a5d156ac1bf7d580/Screen+Shot+2021-01-13+at+18.12.07.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287327658/5ee06930a5d156ac1bf7d580/Screen+Shot+2021-01-13+at+18.12.07.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Functions and its code that linked behind the button [Register device token] are similar to below. Once authenticate end-user with their brainCloud account, from the Authorization request, retrieve the device token and pass it to brainCloud device token register method --<code> RegisterPushNotificationDeviceToken</code>()</li></ul>
<!-- /wp:list -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">    IEnumerator RequestAuthorization()<br>    {<br>        var authorizationOption = AuthorizationOption.Alert | AuthorizationOption.Badge;<br>        using (var req = new AuthorizationRequest(authorizationOption, true))<br>        {<br>            while (!req.IsFinished)<br>            {<br>                yield return null;<br>            };<br>            string res = "\n RequestAuthorization:";<br>            res += "\n finished: " + req.IsFinished;<br>            res += "\n granted:  " + req.Granted;<br>            res += "\n error:  " + req.Error;<br>            res += "\n deviceToken:  " + req.DeviceToken;<br>            Debug.Log("debug inside ienumerator the res: "+ res);<br>            _bc.PushNotificationService.RegisterPushNotificationDeviceToken(req.DeviceToken, authSuccess_BCcall, authError_BCcall);<br>        }<br>    }<br><br>    //click register token button<br>    public void RegisterDeviceToken()
<br>    {
<br>        StartCoroutine(RequestAuthorization());<br>    }</pre>
<!-- /wp:preformatted -->

<!-- wp:list -->
<ul><li>Finish the rest methods and callbacks code in your script.</li><li>Click <code>Build Settings</code> from Unity <code>File</code> tab, switch platform to iOS.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/285894570/a762ccc8796ffd0f0e9c1df2/Screen+Shot+2021-01-10+at+9.44.33+PM.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/285894570/a762ccc8796ffd0f0e9c1df2/Screen+Shot+2021-01-10+at+9.44.33+PM.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Set up project <code>Bundle Identifier</code> and <code>target SDK</code> via <code>Player Settings</code> .</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287330568/371b1e49aef2bc7faa85c973/Screen+Shot+2021-01-13+at+18.23.48.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287330568/371b1e49aef2bc7faa85c973/Screen+Shot+2021-01-13+at+18.23.48.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Click <code>Build and Run</code>, then create a folder to save this Xcode project on your local storage.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287390067/92da66f43ec70edc81d6df55/Screen+Shot+2021-01-13+at+18.28.27.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287390067/92da66f43ec70edc81d6df55/Screen+Shot+2021-01-13+at+18.28.27.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":4} -->
<h4><strong>Step 2: Setup your project on Xcode editor</strong></h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Once Xcode is opened from the above step, open <code>Signing &amp; Capabilities</code> from your target device in the project panel.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287332931/9ea846c0e0fc9a649d4f8ad4/Screen+Shot+2021-01-12+at+11.08.24+AM.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287332931/9ea846c0e0fc9a649d4f8ad4/Screen+Shot+2021-01-12+at+11.08.24+AM.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Click <code>Automatically manage signing</code> checkbox and enable it.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287333985/3fa16a94553c0429e9607890/Screen+Shot+2021-01-12+at+11.30.32+AM.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287333985/3fa16a94553c0429e9607890/Screen+Shot+2021-01-12+at+11.30.32+AM.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Then, login into your team and provisioning profile.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287334370/ca810aec10460e8b49721c0e/Screen+Shot+2021-01-13+at+18.43.17.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287334370/ca810aec10460e8b49721c0e/Screen+Shot+2021-01-13+at+18.43.17.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":4} -->
<h4><strong>Step 3: Create and download a notification p12 file from your apple account</strong></h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>You should find your project identifier is created from the above step on the list of Identifiers under the <code>Certificates, Identifiers &amp; Profiles</code> section of your apple developer account.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287335685/b6e2099fe768ca04e4c8aaaa/Screen+Shot+2021-01-12+at+11.37.28+AM.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287335685/b6e2099fe768ca04e4c8aaaa/Screen+Shot+2021-01-12+at+11.37.28+AM.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Click it and scroll down to <code>Pushnotification</code> row, then click <code>configure</code>.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287336087/2066988a19f724ce0432035b/Screen+Shot+2021-01-12+at+11.40.01+AM.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287336087/2066988a19f724ce0432035b/Screen+Shot+2021-01-12+at+11.40.01+AM.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Click <code>create certificate</code> under an environment type ( you will use the same environment type when configuring push notification settings on brainCloud), then click <code>continue</code> to create a CSR file.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287337173/d4f877c56bc8fd93cbf180b7/Screen+Shot+2021-01-12+at+14.48.39.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287337173/d4f877c56bc8fd93cbf180b7/Screen+Shot+2021-01-12+at+14.48.39.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>You will be asked to upload a certificate then.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287337551/72ed23d7d3d2c7ef219968be/Screen+Shot+2021-01-12+at+14.51.05.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287337551/72ed23d7d3d2c7ef219968be/Screen+Shot+2021-01-12+at+14.51.05.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Open Keychain from your Mac, click the <code>Certificate Assistant</code> menu and select <code>Request a Certificate From a Certificate Authority</code> under the <code>Keychain Access</code> tab.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287374513/d33bf2b774eef6983f226bde/Screen+Shot+2021-01-12+at+14.56.51.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287374513/d33bf2b774eef6983f226bde/Screen+Shot+2021-01-12+at+14.56.51.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Fill out the fields and select <code>Saved</code> to disk, then click Continue.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287391648/79083ea308019bb976de4ae7/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287391648/79083ea308019bb976de4ae7/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Choose a folder to save this cert.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287375462/422a3a206a4186c917c52c0d/Screen+Shot+2021-01-12+at+15.00.35.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287375462/422a3a206a4186c917c52c0d/Screen+Shot+2021-01-12+at+15.00.35.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>This cert file will be saved to your local folder.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287375513/3146bafae68c0e3a484e052a/Screen+Shot+2021-01-12+at+15.02.04.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287375513/3146bafae68c0e3a484e052a/Screen+Shot+2021-01-12+at+15.02.04.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Go back to your apple account page, upload this signing request file there, and hit <code>Continue</code>.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287375611/212eda2959d53517bdcd02d5/Screen+Shot+2021-01-12+at+15.02.39.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287375611/212eda2959d53517bdcd02d5/Screen+Shot+2021-01-12+at+15.02.39.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Click download to save this certificate.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287375690/cd77c2f5ae2faa436704899d/Screen+Shot+2021-01-12+at+15.03.03.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287375690/cd77c2f5ae2faa436704899d/Screen+Shot+2021-01-12+at+15.03.03.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Go back to your Keychain app again, drag this certificate file from the above step to the <code>certificates</code> section of the <code>login</code> keychains</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287375830/6e6bdb87b912432aa9458d43/Screen+Shot+2021-01-12+at+15.06.48.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287375830/6e6bdb87b912432aa9458d43/Screen+Shot+2021-01-12+at+15.06.48.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>You will find the <code>push services certificate</code> is added to the <code>certificates</code> list.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287376016/cd824be05dc106c0c33e1b29/Screen+Shot+2021-01-12+at+15.09.17.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287376016/cd824be05dc106c0c33e1b29/Screen+Shot+2021-01-12+at+15.09.17.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Right-click the <code>push services certificate</code> and export it to local storage.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287375943/eeca4df3a7d8aa6455531171/Screen+Shot+2021-01-12+at+15.09.34.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287375943/eeca4df3a7d8aa6455531171/Screen+Shot+2021-01-12+at+15.09.34.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Enter your login password and click <code>continue</code></li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287382305/86ed20b48c8dc83b96c5c868/image.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287382305/86ed20b48c8dc83b96c5c868/image.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Click <code>Save</code>.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287376872/58323d3cda08002fe99511fc/Screen+Shot+2021-01-12+at+15.10.28.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287376872/58323d3cda08002fe99511fc/Screen+Shot+2021-01-12+at+15.10.28.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Leave a password for this file, you will need this password later when configuring push notification on your brainCloud portal.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287377005/decadb39c052f8149b7b654b/Screen+Shot+2021-01-12+at+15.12.07.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287377005/decadb39c052f8149b7b654b/Screen+Shot+2021-01-12+at+15.12.07.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":4} -->
<h4><strong>Step 4: Upload a p12 certificate file to your app on brainCloud portal</strong></h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Go to <code>Design | Notifications | Settings</code> page, click <code>edit settings</code> under the <code>Actions</code> column of <code>Apple</code>, upload the p12 certificate you get from the previous steps.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287377081/e5c03a8e6aa3ce07184ab675/Screen+Shot+2021-01-12+at+15.14.10.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287377081/e5c03a8e6aa3ce07184ab675/Screen+Shot+2021-01-12+at+15.14.10.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Enter the p12 file protect-password and select the certificate environment accordingly. It should match the type when you created this certificate from your apple account.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287377217/781843f96e2fa862afd01b49/Screen+Shot+2021-01-12+at+15.14.44.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287377217/781843f96e2fa862afd01b49/Screen+Shot+2021-01-12+at+15.14.44.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Set an expiration day.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287377266/cd140124231eb54737077ff6/Screen+Shot+2021-01-12+at+15.15.10.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287377266/cd140124231eb54737077ff6/Screen+Shot+2021-01-12+at+15.15.10.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":4} -->
<h4><strong>Step 5: Run app via Xcode</strong></h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Go back to Xcode editor</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287377455/580c9fc451f38606327f0457/Screen+Shot+2021-01-12+at+15.56.55.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287377455/580c9fc451f38606327f0457/Screen+Shot+2021-01-12+at+15.56.55.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Connect your test device to Xcode and run this project.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287377565/3d97740598324990d47a36cb/Screen+Shot+2021-01-12+at+15.58.34.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287377565/3d97740598324990d47a36cb/Screen+Shot+2021-01-12+at+15.58.34.png" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Click <code>Allow</code> when asking for notification authorization.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287378264/b362ad92745b441b0dc0ca67/IMG_0596.PNG" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287378264/b362ad92745b441b0dc0ca67/IMG_0596.PNG" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Authenticate an end-user and register device token with brainCloud.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287378280/04977ba1dcad130d48653503/IMG_0597.PNG" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287378280/04977ba1dcad130d48653503/IMG_0597.PNG" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Check the sent notification.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287378312/a6c5bc31ac18a92f8f50cf08/IMG_0598.PNG" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287378312/a6c5bc31ac18a92f8f50cf08/IMG_0598.PNG" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Check the registered device token of the end-user from brainCloud portal.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/287378522/aa4f9dcb5b8ffab534ff98a2/Screen+Shot+2021-01-13+at+11.24.13.png" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/287378522/aa4f9dcb5b8ffab534ff98a2/Screen+Shot+2021-01-13+at+11.24.13.png" alt=""/></a></figure>
<!-- /wp:image -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7113</wp:post_id>
		<wp:post_date><![CDATA[2021-01-18 22:05:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-19 03:05:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[push-notification-configuration-ios]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>56</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Authentication - Oculus</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/authentication-oculus/</link>
		<pubDate>Thu, 22 Apr 2021 19:34:44 +0000</pubDate>
		<dc:creator><![CDATA[jasonl]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=7167</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This article elaborates on the basic steps of how to authenticate end-users with their Oculus credentials in a Unity example.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="h_7ab4b3a820">Prerequisites</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>You have set up an Oculus developer account</li><li>Your Oculus app installed on your test device</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>For more information about setting up a development environment refer to the <a href="https://developer.oculus.com/documentation/unity/book-unity-gsg/" rel="noreferrer noopener" target="_blank">Oculus developer</a> site.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="h_a5f10e487b">User Authentication Flow</h3>
<!-- /wp:heading -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/327819613/7c2a2098f34ffe793f383014/image.png?expires=1619204400&amp;signature=2db87e22097e30b94cccc23ca7ebc8ed2ca18764e0becb5b4c7b50bf0506bb07" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/327819613/7c2a2098f34ffe793f383014/image.png?expires=1619204400&amp;signature=2db87e22097e30b94cccc23ca7ebc8ed2ca18764e0becb5b4c7b50bf0506bb07" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3 id="h_57c8abe274">brainCloud Portal Setup</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":4} -->
<h4 id="h_ee3144001c">Get your Oculus app info on the Oculus developer console</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Log in to the <a href="https://developer.oculus.com/manage/organizations/105569934983132/" rel="noreferrer noopener" target="_blank">Oculus Developer Console</a> site</li><li>Select an existing app or create a new one</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/327823074/63003ab86707ded12181f5ea/image.png?expires=1619204400&amp;signature=787f558dd05a49b7224d88ba8e2a2dafbbb545d6d16b7043de487a8b91f2c037" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/327823074/63003ab86707ded12181f5ea/image.png?expires=1619204400&amp;signature=787f558dd05a49b7224d88ba8e2a2dafbbb545d6d16b7043de487a8b91f2c037" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Fill out all necessary settings information from there.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/327823563/b9e18b2eeeb8582f1b198058/image.png?expires=1619204400&amp;signature=b669e67c300e9f5aa1ce09a1f1c8714c7725faf0f97514f82497effe8f8e5ec5" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/327823563/b9e18b2eeeb8582f1b198058/image.png?expires=1619204400&amp;signature=b669e67c300e9f5aa1ce09a1f1c8714c7725faf0f97514f82497effe8f8e5ec5" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Click API from the left navigation panel, copy down App ID and App Secret</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/327823816/2880ce064445607ee8835934/image.png?expires=1619204400&amp;signature=7eb83a181bdd562e712b580959bc2cbac55f3270b4a6b4ef165d36579d22f44b" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/327823816/2880ce064445607ee8835934/image.png?expires=1619204400&amp;signature=7eb83a181bdd562e712b580959bc2cbac55f3270b4a6b4ef165d36579d22f44b" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Go back to your organization dashboard, click Test Users from the left side panel, add a new tester, we will use it for this tutorial.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/327824067/7a84068676c59f20b2441099/image.png?expires=1619204400&amp;signature=4ec27b88fb512e252126ddfdac2d600b499966853dc19357958a9443ba5bb224" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/327824067/7a84068676c59f20b2441099/image.png?expires=1619204400&amp;signature=4ec27b88fb512e252126ddfdac2d600b499966853dc19357958a9443ba5bb224" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":4} -->
<h4 id="h_bfb4690b64">Link your Oculus app into brainCloud</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Open your app or create a new one from brainCloud development portal, navigate to <strong>Design | Core App Info</strong> page.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/327824389/d6226c87556afce86a77952a/image.png?expires=1619204400&amp;signature=0413ff629d701a659f2c89215fdccee396abd14dd3a4dc8b1d0ec5e8af598550" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/327824389/d6226c87556afce86a77952a/image.png?expires=1619204400&amp;signature=0413ff629d701a659f2c89215fdccee396abd14dd3a4dc8b1d0ec5e8af598550" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Click <strong>Oculus </strong>under Configure Platforms and paste your <strong>Oculus App ID</strong> and <strong>Oculus App Secret</strong> which you copied down from the above step there.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/327824646/f5ea1198f41f87e1e8035d52/image.png?expires=1619204400&amp;signature=32de705ceb01e345afc64382bfb3cd5e2c9b307bdea739a7dfcc56543505485b" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/327824646/f5ea1198f41f87e1e8035d52/image.png?expires=1619204400&amp;signature=32de705ceb01e345afc64382bfb3cd5e2c9b307bdea739a7dfcc56543505485b" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Click the Save Changes button when finished.</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 id="h_5ccb0ea540">Create an app on Unity editor</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Open Unity hub and create a new project.</li><li>Download and import the latest <a href="https://github.com/getbraincloud/braincloud-csharp/releases" rel="noreferrer noopener" target="_blank">brainCloud client Unity package</a> to this project. Once imported the plugin correctly, you should find the brainCloud tab appears on the editor menu.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/327825905/5ecb2c4b19b1eab7a452d59b/image.png?expires=1619204400&amp;signature=d835dd9c33bef014a39419a79dc2b3847ed50a4e2243ba2b88c51ba206532f63" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/327825905/5ecb2c4b19b1eab7a452d59b/image.png?expires=1619204400&amp;signature=d835dd9c33bef014a39419a79dc2b3847ed50a4e2243ba2b88c51ba206532f63" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Download and import the latest Oculus Unity SDK to this project. You should be able to find the Oculus tab on the editor menu once it was imported.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/327826120/442a7b3a3d8eff8dc7399a79/image.png?expires=1619204400&amp;signature=cb59669e7afb53d6acd58685135c892e8ee9e65ce4d4e19d655cb0e0addd63a7" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/327826120/442a7b3a3d8eff8dc7399a79/image.png?expires=1619204400&amp;signature=cb59669e7afb53d6acd58685135c892e8ee9e65ce4d4e19d655cb0e0addd63a7" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Open brainCloud setting from the tab and log into brainCloud account, then select your team and the app which has Oculus app info configured from the above step.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/327826370/704f1d2ed3ebb4164b020f66/image.png?expires=1619204400&amp;signature=318ccd8469af814f121f59c599ecd3fdd804060e86c6cfcc776c4352c941e8b6" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/327826370/704f1d2ed3ebb4164b020f66/image.png?expires=1619204400&amp;signature=318ccd8469af814f121f59c599ecd3fdd804060e86c6cfcc776c4352c941e8b6" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Open Oculus Platform Edit Settings from the tab and link the Oculus app and test user you just created from the above steps.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/327826589/157340e53bf6f7f73d081a01/image.png?expires=1619204400&amp;signature=155da2dea6516adcffda91ff7f670114b16ee7885c27fa993d3c0336c6d2e6bd" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/327826589/157340e53bf6f7f73d081a01/image.png?expires=1619204400&amp;signature=155da2dea6516adcffda91ff7f670114b16ee7885c27fa993d3c0336c6d2e6bd" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Create some UI elements if you want and initialize brainCloud and Oculus from your script.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/327826976/ef992a41d159fc46b180aa24/image.png?expires=1619204400&amp;signature=a5ddb7b0dc9d4f1cacb86b0235f325f9c03a15e382ffa010e2628398fc381737" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/327826976/ef992a41d159fc46b180aa24/image.png?expires=1619204400&amp;signature=a5ddb7b0dc9d4f1cacb86b0235f325f9c03a15e382ffa010e2628398fc381737" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Functions and its code that linked behind the hood [Oculus Login&amp; bc Auth] are similar to below. Once the test-user is entitled into this Oculus app, from the success callback, retrieve the userId and nonce then pass them to brainCloud Oculus authentication method -- AuthenticateOculus</li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">    void Start()
    {
      try
      {
        if (!Oculus.Platform.Core.IsInitialized())
        {
          Oculus.Platform.Core.Initialize();
        }

        Entitlements.IsUserEntitledToApplication().OnComplete(EntitlementCheckCallback);
      }
      catch
      {
        HandleEntitlementCheckResult(false);
      }
    }
    
    void EntitlementCheckCallback(Message msg)
    {
        if (msg.IsError ==  false)
        {
            Users.GetLoggedInUser().OnComplete(LoggedInUserCallback);
        }
    }

    void LoggedInUserCallback(Message&lt;User> msg)
    {
        if (msg.IsError == false)
        {
            oculusUserId = msg.Data.ID.ToString();
            Users.GetUserProof().OnComplete(UserProofCallback);
        }
    }
    
    void UserProofCallback(Message&lt;UserProof> msg)
    {
        if (msg.IsError == false)
        {
            string oculusNonce = msg.Data.value;
            _bc.AuthenticateOculus(oculusUserId, oculusNonce, true, authSuccess_BCcall, authError_BCcall);
        }
    }</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:group -->
<div class="wp-block-group"><div class="wp-block-group__inner-container"></div></div>
<!-- /wp:group -->

<!-- wp:heading {"level":3} -->
<h3 id="h_5a34c24f9a">Run Oculus client app on your device</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Navigate to the <a href="https://www.oculus.com/setup/" rel="noreferrer noopener" target="_blank">Oculus device setup site</a>, download Oculus App software, install and run it on your compatible gaming device.</li></ul>
<!-- /wp:list -->

<!-- wp:list -->
<ul><li>Run your Unity app on the local Unity editor or the device which is running Oculus App.</li><li>Now, you should be successfully logged in to brainCloud with the tester credentials!</li><li>Go back to brainCloud portal open your app, advance to the User Summary page and find the newly authenticated user, click the profiled to open it, you will find the user is logged in with an Oculus credential.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/327827555/aa2efe7b98197533aceb87f8/image.png?expires=1619204400&amp;signature=338ae4b72491b0816c0ef6c4cdbbb34fdda05e5152aac0166026e60fcb24696d" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/327827555/aa2efe7b98197533aceb87f8/image.png?expires=1619204400&amp;signature=338ae4b72491b0816c0ef6c4cdbbb34fdda05e5152aac0166026e60fcb24696d" alt=""/></a></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Check the user log, you should see the request as follow.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://downloads.intercomcdn.com/i/o/327827727/3ffd8678109fc394292146d3/image.png?expires=1619204400&amp;signature=8fb758b6fc5333dfab7324bde73750b191ff5bdffd84fbe7022bf371901eb479" target="_blank" rel="noreferrer noopener"><img src="https://downloads.intercomcdn.com/i/o/327827727/3ffd8678109fc394292146d3/image.png?expires=1619204400&amp;signature=8fb758b6fc5333dfab7324bde73750b191ff5bdffd84fbe7022bf371901eb479" alt=""/></a></figure>
<!-- /wp:image -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7167</wp:post_id>
		<wp:post_date><![CDATA[2021-04-22 15:34:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-04-22 19:34:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[authentication-oculus]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>52</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Authentication - Google (PlayGame)</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/authentication-google-playgame/</link>
		<pubDate>Mon, 28 Jun 2021 16:05:35 +0000</pubDate>
		<dc:creator><![CDATA[jasonl]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=7192</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This article elaborates on the basic steps of how to authenticate end-users with their Google credentials through Google Play Game in a Unity Android app example. If you want to use OpenID Connect to authenticate end-users with their Google credential, check out the <a href="http://help.getbraincloud.com/en/articles/5397633-authentication-google-openid" target="_blank" rel="noreferrer noopener">article -- <code>Authentication - Google (OpenID)</code></a> for detail.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><strong>Prerequisites</strong></h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>You have a Google Play developer account</li><li>Your testing device with Android API level 19 and above</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3><strong>Step 1: Create an application on Unity editor</strong></h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Open Unity hub and create a new project.</li><li>Download and import the latest <a rel="noreferrer noopener" href="https://github.com/getbraincloud/braincloud-csharp/releases" target="_blank">brainCloud client Unity package</a> to this project. Once imported the plugin correctly, you will find the brainCloud tab appears on the editor menu.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"align":"left"} -->
<div class="wp-block-image"><figure class="alignleft"><img src="https://downloads.intercomcdn.com/i/o/355313103/e394a1c7177d7d3e51497acb/image.png" alt="image.png (1052×521)"/></figure></div>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/355313103/e394a1c7177d7d3e51497acb/image.png" target="_blank"></a>Download and import the latest <code>Google Play Games plugin for Unity</code> from repositories of <a rel="noreferrer noopener" href="https://github.com/playgameservices" target="_blank">Google Play Game Services</a>. (<em><code>for the time being, version is 0.10.12</code></em>) </li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355315375/577e6e22cf61d509c45d7637/image.png" alt="image.png (827×593)"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/355315375/577e6e22cf61d509c45d7637/image.png" target="_blank"></a>Download and import the latest <code>Google Sign-In Unity Plugin</code> from repositories of <a rel="noreferrer noopener" href="https://github.com/googlesamples" target="_blank">Google Samples</a>. We will use it to require <code>server auth codes</code> that will be passed to brainCloud method <a rel="noreferrer noopener" href="https://internal.braincloudservers.com/s3/apiref/index.html?csharp#capi-authentication-authenticategoogle" target="_blank"><code>AuthenticateGoogle</code></a> in our code example. (<em>Note that if you see some files already exist in your project, just uncheck them. Also, in some cases, the PlayServiceResover might cause errors in your project, you can uncheck them too</em>) </li></ul>
<!-- /wp:list -->

<!-- wp:advanced-gutenberg-blocks/notice -->
<div class="wp-block-advanced-gutenberg-blocks-notice is-variation-advice has-icon" data-type="advice"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewbox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"></path></svg><p class="wp-block-advanced-gutenberg-blocks-notice__title">Advice</p><p class="wp-block-advanced-gutenberg-blocks-notice__content"><strong>Note that this step is just used as an extra guarantee mechanism to assure your app can get <code>ServerAuthCode</code> from users Google login. It is ONLY necessary in the case that you cannot get <code>ServerAuthCode</code> from <code>PlayGamesPlatform</code> in certain versions of <code>Google Play Games plugin for Unity</code> that users reported, otherwise, totally ignore this step and its related code block</strong></p></div>
<!-- /wp:advanced-gutenberg-blocks/notice -->

<!-- wp:advanced-gutenberg-blocks/intro -->
<div class="wp-block-advanced-gutenberg-blocks-intro"><p class="wp-block-advanced-gutenberg-blocks-intro__content"></p></div>
<!-- /wp:advanced-gutenberg-blocks/intro -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355320733/dc3218b8e17e121f1964d6bc/image.png" alt="image.png (848×661)"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/355320733/dc3218b8e17e121f1964d6bc/image.png" target="_blank"></a>After plugins installed, you should be able to find <code>Google Play Games</code> menu appears under <code>Window</code> tab, we will use it to configure <code>Android setup</code> later afterward a game created on <code>Google Play Console</code>.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355322200/5b700c7ff7f850897ea3381d/image.png" alt="image.png (852×544)"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/355322200/5b700c7ff7f850897ea3381d/image.png" target="_blank"></a>You should find these plugins imported folder under the asset.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355325087/3c95f744da27876aad8523dc/image.png" alt="image.png (898×295)"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/355325087/3c95f744da27876aad8523dc/image.png" target="_blank"></a>Open <code>brainCloud setting</code> from the tab, select or create a brainCloud back-end app linked to your project.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355325472/9206d341c511a08de57f41d1/image.png" alt="image.png (704×532)"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/355325472/9206d341c511a08de57f41d1/image.png" target="_blank"></a>Create some UI elements to invoke initialize brainCloud and Google SignIn from your script. </li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355325945/fe9c9f3d1a77cf66f997468a/image.png" alt="image.png (864×442)"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Functions and the code that linked behind the buttons are similar to below. Once end-users login into their Google account with Google Play Games by setting <code>UseGameSignIn</code> as <code>true</code>, so we can get their <code>userId</code> via calling <code>GetUserId</code>() from success callback, and get their <code>server auth codes</code> from <code>Google Sign in</code> API, then pass them to brainCloud Google authentication method --<code> AuthenticateGoogle</code></li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">    public void RegisterDeviceToken()
    {
        GoogleSignIn.Configuration = configuration;
        GoogleSignIn.Configuration.UseGameSignIn = true;
        GoogleSignIn.DefaultInstance.SignIn().ContinueWith(GoogleSinInCallback);
    }

    public void GoogleSinInCallback(Task&lt;GoogleSignInUser> task)
    {
        if (task.IsFaulted)
        {
            bcreturn.GetComponent&lt;Text>().text = "Failed to call Google SignIn()";
        }
        else
        {
            serverAuthCode = task.Result.AuthCode;
        }
    }

    public void GetGoogleUserId()
    {
        PlayGamesClientConfiguration config = new PlayGamesClientConfiguration.Builder()
        .RequestIdToken()
        .RequestServerAuthCode(false)
        .Build();

        PlayGamesPlatform.InitializeInstance(config);
        PlayGamesPlatform.Activate();
        Social.localUser.Authenticate((bool success) => {
            if (success)
            {
                googleId = PlayGamesPlatform.Instance.GetUserId();
                channelid.GetComponent&lt;InputField>().text = googleId;
            }
            else
            {
                bcreturn.GetComponent&lt;Text>().text = "Failed to get Signed in user info";
            }
        });
    }

    public void AuthenticateBC()
    {
        if (!string.IsNullOrEmpty(googleId))
        {
            _bc.AuthenticateGoogle(googleId, serverAuthCode, true, authSuccess_BCcall, authError_BCcall);
        }
        else
        {
            bcreturn.GetComponent&lt;Text>().text = "log into your Google account first!";
        }
    }</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:list -->
<ul><li>Finish the rest callbacks code in your script. Check the completed code from our GitHub Google Authentication project <a rel="noreferrer noopener" href="https://github.com/getbraincloud/UnityExamples/tree/master/Authentication" target="_blank">example</a> for reference. (<em>Note that, <code>GoogleSignInConfiguration</code> requires <code>WebClientId</code> to represent user in order to call Googel SignIn, we will need to config this in our code after the <code>client credential</code> created from <code>Google Cloud Console</code> later.</em>)</li><li>Now, click <code>Build Settings</code> from Unity <code>File</code> tab, switch platform to <code>Android</code>. Then, create a keystore from <code>Keystore Manager</code> and save it to your local if you don't have one.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355344462/ec16cb2dcc7f4108584b871f/image.png" alt="image.png (1582×643)"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Set up your app <code>package name</code> as well via <code>Player Settings</code>.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355344432/f2f88e1f331816efb9871b7e/image.png" alt="image.png (767×680)"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/355344432/f2f88e1f331816efb9871b7e/image.png" target="_blank"></a>Now we can move to the next step to create a Google project.</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3><strong>Step 2: Create a Google project and configure it with OAuth 2.0 Client Credential</strong></h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Before creating a project, let's generate a <code>SHA1</code> fingerprint by using the <code>keystore</code> and <code>package name</code> that we created from the previous step via the local terminal by using Java JDK <code>keytool</code> command <code>keytool -exportcert -alias your-keystore-alia -keystore path-to-your-keystore-file -list -v</code>. ( <em>if not set this command globally, to use this <code>keytool</code> command you might need to cd into your java JDK home folder)</em></li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355344385/543db145f0ffabdf12632150/image.png" alt="image.png (1172×616)"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/355344385/543db145f0ffabdf12632150/image.png" target="_blank"></a>Then, instead of going to Google Cloud Console to create a project and add auth client credential manually, we can go to the android-developer <code>Google Sign In</code> page and create a project from there. (<em>by utilizing this, a Google project and Android client ID for OAuth 2.0 created in just one click</em>), paste your Android app <code>package name </code>and <code>SHA1</code> fingerprint accordingly when asked and create the project.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355349069/05bbe2e8ec56914cfca427b1/image.png" alt="image.png (611×454)"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/355349069/05bbe2e8ec56914cfca427b1/image.png" target="_blank"></a>Now, open Google Cloud Platform, you should be able to see both project and OAuth 2.0 Client IDs created for you.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355349656/30d02799eda487c19b2f423e/image.png" alt="image.png (1621×489)"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/355349656/30d02799eda487c19b2f423e/image.png" target="_blank"></a>Click the <code>main navigation menu</code> open <code>APIs &amp; Services</code> page from GCP console. Click <code>ENABLE APIS AND SERVICES</code> button, search <code>Google Play Game Services</code> and enable it, you should be able to see it listed on the dashboard after enabled. <em>(Note that after you tested your app when completed, you will be able to see several some request traffic generated like the picture shown below)</em>.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355351534/d699120c1d0b3ad40183e6dd/image.png" alt="image.png (1535×590)"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/355351534/d699120c1d0b3ad40183e6dd/image.png" target="_blank"></a>Now, we finished the configurations for our project from GCP, note down Client ID and its secret of Web client credential, also, the <code>project number</code>, we will need them to configure in brainCloud console. <em>(Note that you may already notice, the project number actually prefixed to Client ID)</em></li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355354096/99520cf4ab33895ba50e49d8/image.png" alt="image.png (852×519)"/></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3><strong>Step 3: Configure Google client credential on brainCloud</strong></h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Open your corresponding brainCloud app from brainCloud development portal, navigate to <strong>Design | Core App Info</strong> page.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355353624/dd78d4a4c17e04aaeee3dfc5/image.png" alt="image.png (817×526)"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Click <strong>Google </strong>under Configure Platforms and paste your <code>Client ID</code> and its <code>secret of</code> Web client credential, also the Google <code>project number</code>, into Google configs fields respectively.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355355059/fe69b581a43b1a67bcbd926b/image.png" alt="image.png (795×451)"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>Make sure the <code>Google Android</code> platform is selected from the <strong>Design | Core App Info | Platforms</strong> page.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355355598/9e21357f36fc027e3a2e2d4f/image.png" alt="image.png (1085×556)"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/355355598/9e21357f36fc027e3a2e2d4f/image.png" target="_blank"></a>Now, we finished the settings from brainCloud, let us move to the next step to create a game in Google Play Console.</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3><strong>Step 4: Create a Google Play Game in Google Play Console</strong></h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Log into your Google Play Console and create a new app.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355356946/060a7650e542c50a6ea5a74a/image.png" alt="image.png (1253×673)"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/355356946/060a7650e542c50a6ea5a74a/image.png" target="_blank"></a>Go to the Configuration page under <code>Play Games Services</code> link your GCP project to this new game by selecting the project from the <code>cloud project</code> dropdown menu and click <code>Use</code>.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355358298/eefb8a393478be0f5f396c10/image.png" alt="image.png (1278×698)"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/355358298/eefb8a393478be0f5f396c10/image.png" target="_blank"></a>After that, click <code>Add credential</code>, select GCP project's <code>OAuth client</code>, click <code>Save chagnges</code>, now, you should see the Android client credential is added to this game. </li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355520782/60dfec6942a0061b35dcc0c2/image.png" alt="image.png (1060×673)"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/355520782/60dfec6942a0061b35dcc0c2/image.png" target="_blank"></a>The screen of <code>Play Games Services configuration</code> should be like below. </li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355359004/30c2c4f65e442ddd6f6e821a/image.png" alt="image.png (1165×491)"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/355359004/30c2c4f65e442ddd6f6e821a/image.png" target="_blank"></a>Go ahead to create several testers for your game (<em>since we will not publish this game to the public, for demonstration purposes, you have to create testers to test Google sign in with their Google accounts</em>) by selecting the Testers menu.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355359414/7a139d5f531c38d7d110baae/image.png" alt="image.png (982×556)"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/355359414/7a139d5f531c38d7d110baae/image.png" target="_blank"></a>Create one dummy game resource from any resources ( <em>Achievements, Events, or Leaderboards</em>) listed under Play Games Services, we will use it to set up Google Play Game connection from Unity editor, the leftover setting from step 1. (<em>for this example, we will create an Achievements resource)</em></li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355360463/7ff3749592c12a2eaf23722d/image.png" alt="image.png (1246×735)"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/355360463/7ff3749592c12a2eaf23722d/image.png" target="_blank"></a>Click <code>Get resources</code> button from Achievements list, copy down the <code>Android (XML)</code>format content.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355360849/3c3651909fe16818ae592e3e/image.png" alt="image.png (1759×454)"/></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3><strong>Step 5: Final set up for Android app in Unity and build test app</strong></h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Go back to your Unity editor, click Android setup from the Google Play Games menu, paste the resource content from the previous step and GCP Web client ID respectively to pop-up setting window as shown following.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355361103/41883728586bae6a9f2a35a4/image.png" alt="image.png (1151×848)"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/355361103/41883728586bae6a9f2a35a4/image.png" target="_blank"></a>Referencing this Client ID as Google SignIn config in your code too.</li><li>Go to the <code>Build Settings</code> screen and build APK for your test device.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355362333/7f66e72672dd2f87840d84b6/image.png" alt="image.png (767×739)"/></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3><strong>Step 6: Test</strong></h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Install APK which built from the previous step to your device and test it. You may be asked to install Google Play Games if it did not exist in your test Android device. Install it and login into one of your Play Game Services tester account.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355363451/f1d96d71264fc30f05d84f6a/image.png" alt="image.png (948×227)"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/355363451/f1d96d71264fc30f05d84f6a/image.png" target="_blank"></a>Grant test app permission to your test account.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355363901/9a12dd817fa2fce7870a9c89/image.png" alt="image.png (942×225)"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/355363901/9a12dd817fa2fce7870a9c89/image.png" target="_blank"></a>Log into brainCloud after successfully logged in Google account.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355364033/b48225d8c969942cf0f2b587/image.png" alt="image.png (1047×244)"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/355364033/b48225d8c969942cf0f2b587/image.png" target="_blank"></a>Check the authenticated tester user from the brainCloud console.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355364302/3d11e5ceabac9baf4a2cb271/image.png" alt="image.png (921×239)"/></figure>
<!-- /wp:image -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7192</wp:post_id>
		<wp:post_date><![CDATA[2021-06-28 12:05:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-28 16:05:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[authentication-google-playgame]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>43</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Authentication - Google (OpenID)</title>
		<link>https://staging.getbraincloud.com/apidocs/portal-usage/authentication-google-openid/</link>
		<pubDate>Fri, 09 Jul 2021 22:40:00 +0000</pubDate>
		<dc:creator><![CDATA[jasonl]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=7231</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This article elaborates on the basic steps of how to authenticate end-users with their Google credentials through <code>OpenID Connect</code> in a Unity Android app example. If you want to use <code>Google Play Game</code> to authenticate end-users with their Google credential, check out the <a href="http://help.getbraincloud.com/en/articles/5363283-authentication-google-playgame" target="_blank" rel="noreferrer noopener">article -- <code>Authentication - Google (PlayGame)</code></a> for detail.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><strong>Prerequisites</strong></h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>You have a Google account to create projects in GCP</li><li>Your testing device with Android API level 19 and above</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3><strong>Step 1: Create an application on Unity editor</strong></h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Open Unity hub and create a new project.</li><li>Download and import the latest <a rel="noreferrer noopener" href="https://github.com/getbraincloud/braincloud-csharp/releases" target="_blank">brainCloud client Unity package</a> to this project. Once imported the plugin correctly, you will find the brainCloud tab appears on the editor menu.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/361191090/54fe2737fe8dbdf80062b782/image.png" alt="image.png (1086×446)"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/361191090/54fe2737fe8dbdf80062b782/image.png" target="_blank"></a>Download and import the latest <code>Google Sign-In Unity Plugin</code> from repositories of <a rel="noreferrer noopener" href="https://github.com/googlesamples" target="_blank">Google Samples</a>. We will use it to require <code>server auth codes</code> that will be passed to brainCloud method <a rel="noreferrer noopener" href="https://internal.braincloudservers.com/s3/apiref/index.html?csharp#capi-authentication-authenticategoogle" target="_blank"><code>AuthenticateGoogle</code></a> in our code example. </li></ul>
<!-- /wp:list -->

<!-- wp:advanced-gutenberg-blocks/notice -->
<div class="wp-block-advanced-gutenberg-blocks-notice is-variation-info has-icon" data-type="info"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewbox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12" y2="8"></line></svg><p class="wp-block-advanced-gutenberg-blocks-notice__title">Information</p><p class="wp-block-advanced-gutenberg-blocks-notice__content">Some files under <code>PlayServiceResover</code> might be obsolete, most likely, you will need to install the <code>unity-jar-resolver</code> plugin from Google Samples repositories to update the <code>PlayServiceResover</code>. Also, in case that you encounter duplicated <code>Task DLL</code> file error, just go ahead to delete the one that was installed with the plugin located under <code>Asset->Paese->Plugins</code> folder</p></div>
<!-- /wp:advanced-gutenberg-blocks/notice -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/361231381/71eb2508c3d9feadd7517023/image.png" alt=""/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/361231381/71eb2508c3d9feadd7517023/image.png" target="_blank"></a>You should find these plugins imported folder under the asset.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/361231553/115a857dda9b1c9dae5f45a7/image.png" alt=""/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/361231553/115a857dda9b1c9dae5f45a7/image.png" target="_blank"></a>Open <code>brainCloud setting</code> from the tab, select or create a brainCloud back-end app linked to your project.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/361231833/401996e1a0ae795afc816102/image.png" alt=""/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/361231833/401996e1a0ae795afc816102/image.png" target="_blank"></a>Create some UI elements to invoke initialize brainCloud and Google SignIn from your script.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":7246,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://staging.getbraincloud.com/apidocs/wp-content/uploads/2021/07/image.png" alt="" class="wp-image-7246"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/355325945/fe9c9f3d1a77cf66f997468a/image.png" target="_blank"></a>Functions and the code behind the buttons are similar to below. Once end-users login into their Google account with Google Play Games by setting <code>UseGameSignIn</code> as <code>false</code>, so we can get their <code>userId</code> via calling <code>GetUserId</code>() from success callback, and get their <code>server auth codes</code> from <code>Google Sign in</code> API, then pass them to brainCloud Google authentication method --<code> AuthenticateGoogleOpenId</code></li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">    public void GoogleAPISignIn()
    {
        bcreturn.GetComponent&lt;Text>().text = "Google sign in......";
        GoogleSignIn.Configuration = configuration;
        //GoogleSignIn.Configuration.UseGameSignIn = true;
        GoogleSignIn.DefaultInstance.SignIn().ContinueWith(GoogleSinInCallback);
    }


    public void GoogleSinInCallback(Task&lt;GoogleSignInUser> task)
    {
        if (task.IsFaulted)
        {
            using (IEnumerator&lt;System.Exception> enumerator = task.Exception.InnerExceptions.GetEnumerator())
            {
                if (enumerator.MoveNext())
                {
                    GoogleSignIn.SignInException error = (GoogleSignIn.SignInException)enumerator.Current;
                    bcreturn.GetComponent&lt;Text>().text = "Task Exception Error: " + error.Status + " " + error.Message;
                }
                else
                {
                    bcreturn.GetComponent&lt;Text>().text = "Task Unexpected Exception" + task.Exception;
                }
            }
        }
        else if (task.IsCanceled)
        {
            bcreturn.GetComponent&lt;Text>().text = "Canceled";
        }
        else
        {
            //serverAuthCode = task.Result.AuthCode;
            googleEmail = task.Result.Email;
            idToken = task.Result.IdToken;

            bcreturn.GetComponent&lt;Text>().text = "Logged into google! \n Email: " + googleEmail + " \n IdToken: " + idToken;
            channelid.GetComponent&lt;InputField>().text = "[" + googleEmail + "]" + idToken;
        }
    }</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:list -->
<ul><li>Finish the rest callbacks code in your script. Check the completed code from our GitHub Google Authentication project <a rel="noreferrer noopener" href="https://github.com/getbraincloud/examples-unity/tree/master/OpenIdGoogle" target="_blank">example</a> for reference. (<em>Note that, <code>GoogleSignInConfiguration</code> requires <code>WebClientId</code> to represent user in order to call Googel SignIn, we will need to config this in our code after the <code>client credential</code> created from <code>Google Cloud Console</code> later.</em>)</li><li>Now, click <code>Build Settings</code> from Unity <code>File</code> tab, switch platform to <code>Android</code>. Then, create a keystore from <code>Keystore Manager</code> and save it to your local if you don't have one.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/361233339/fc4363332baee44b9fac323a/image.png" alt=""/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/361233339/fc4363332baee44b9fac323a/image.png" target="_blank"></a>Set up your app <code>package name</code> as well via <code>Player Settings</code>.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/361233585/03e756cbc8e7a6679e34c796/image.png" alt=""/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/361233585/03e756cbc8e7a6679e34c796/image.png" target="_blank"></a>Now we can move to the next step to create a Google project.</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3><strong>Step 2: Create a Google project and configure it with OAuth 2.0 Client Credential</strong></h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Before creating a project, let's generate a <code>SHA1</code> fingerprint by using the <code>keystore</code> and <code>package name</code> that we created from the previous step via the local terminal by using Java JDK <code>keytool</code> command <code>keytool -exportcert -alias your-keystore-alia -keystore path-to-your-keystore-file -list -v</code>. ( <em>if not set this command globally, to use this <code>keytool</code> command you might need to cd into your java JDK home folder)</em></li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/361233828/7931db1cd0e1837f5d9857ae/image.png" alt=""/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/361233828/7931db1cd0e1837f5d9857ae/image.png" target="_blank"></a>Then, instead of going to Google Cloud Console to create a project and add auth client credential manually, we can go to the android-developer <code>Google Sign In</code> page and create a project from there. (<em>by utilizing this, a Google project and Android client ID for OAuth 2.0 created in just one click</em>), paste your Android app <code>package name </code>and <code>SHA1</code> fingerprint accordingly when asked and create the project.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/361234143/f21c64af2b92b4da78c4aba3/image.png" alt=""/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/361234143/f21c64af2b92b4da78c4aba3/image.png" target="_blank"></a>Now, open Google Cloud Platform, you should be able to see both project and OAuth 2.0 Client IDs created for you.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/361234774/7a56ac3704359cb8419011d0/image.png" alt=""/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/361234774/7a56ac3704359cb8419011d0/image.png" target="_blank"></a>Now, we finished the configurations for our project from GCP, note down Client ID and its secret of Web client credential, also, the <code>project number</code>, we will need them to configure in brainCloud console. <em>(Note that you may already notice, the project number actually prefixed to Client ID)</em></li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/361235214/01f53f2bd216671473577a91/image.png" alt=""/></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3><strong>Step 3: Configure Google client credential on brainCloud</strong></h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Open your corresponding brainCloud app from brainCloud development portal, navigate to <strong>Design | Core App Info</strong> page.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/361235476/c62e63024fdfcae04aced9b7/image.png" alt=""/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/361235476/c62e63024fdfcae04aced9b7/image.png" target="_blank"></a>Click <strong>Google </strong>under Configure Platforms and paste your <code>Client ID</code> and its <code>secret of</code> Web client credential into Google configs fields respectively.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/361235890/d42bb6f584320d30ea0dd3f6/image.png" alt=""/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/361235890/d42bb6f584320d30ea0dd3f6/image.png" target="_blank"></a>Make sure the <code>Google Android</code> platform is selected from the <strong>Design | Core App Info | Platforms</strong> page.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/355355598/9e21357f36fc027e3a2e2d4f/image.png" alt=""/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/355355598/9e21357f36fc027e3a2e2d4f/image.png" target="_blank"></a>Now, we finished the settings from brainCloud, let us move to the next step to set up the client id to your code in Unity.</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3><strong>Step 4: Final set up for Android app in Unity and build a test app</strong></h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Referencing this Client ID as Google SignIn config in your code. </li></ul>
<!-- /wp:list -->

<!-- wp:enlighter/codeblock {"language":"csharp"} -->
<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">        configuration = new GoogleSignInConfiguration
        {
            WebClientId = "998140262691-eot4ico1t3qtb35ea1prbt9ilinekpnr.apps.googleusercontent.com",
            RequestEmail = true,
            RequestIdToken = true,
            RequestAuthCode = true
        };</pre>
<!-- /wp:enlighter/codeblock -->

<!-- wp:list -->
<ul><li>Go to the <code>Build Settings</code> screen to build APK for your test device.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/361236840/b110a9a68d197132e561444a/image.png" alt=""/></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3><strong>Step 5: Test</strong></h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Install APK which was built from the previous step to your device and test it. You may be asked to give some permissions to your test app, grant it, and continue.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/361238988/94711012a481ce69b7dc295f/image.png" alt=""/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><a rel="noreferrer noopener" href="https://downloads.intercomcdn.com/i/o/361238988/94711012a481ce69b7dc295f/image.png" target="_blank"></a>Check the authenticated tester user from the brainCloud console.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://downloads.intercomcdn.com/i/o/361177366/801dc1e198f40bad5622d7c5/image.png" alt=""/></figure>
<!-- /wp:image -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7231</wp:post_id>
		<wp:post_date><![CDATA[2021-07-09 18:40:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-09 22:40:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[authentication-google-openid]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>44</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>testExport</title>
		<link>https://staging.getbraincloud.com/apidocs/introduction-2/testexport123/</link>
		<pubDate>Sun, 01 Jan 2023 17:28:13 +0000</pubDate>
		<dc:creator><![CDATA[jasonl]]></dc:creator>
		<guid isPermaLink="false">https://staging.getbraincloud.com/apidocs/?page_id=7645</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>export from the intro section</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7645</wp:post_id>
		<wp:post_date><![CDATA[2023-01-01 12:28:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-01-01 17:28:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[testexport123]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>73</wp:post_parent>
		<wp:menu_order>20</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskeywords]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_keywordsynonyms]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
				</channel>
</rss>
	